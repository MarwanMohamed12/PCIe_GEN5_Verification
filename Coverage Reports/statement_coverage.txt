Coverage Report by file with details

=================================================================================
=== File: RTL/Counter.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            3         3         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/Counter.v --

    1                                                module counter (input reset,input clk,input up,output reg [4: 0] count);
    2                                                
    3               1                     135636     always @(posedge up or negedge reset)
    4                                                begin
    5               1                      62088     if(!reset) count = {4{1'b0}};
    6               1                      73548     else if (up) count = count + 1'b1;
    7               1                          E     else count = count;
    8                                                end
    9                                                
    10                                               endmodule
    11                                               


=================================================================================
=== File: RTL/DataHandling.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            9         9         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/DataHandling.v --

    1                                                module DataHandling #(parameter GEN1_PIPEWIDTH = 8, parameter GEN2_PIPEWIDTH = 16, parameter GEN3_PIPEWIDTH = 32, parameter GEN4_PIPEWIDTH = 8,
    2                                                					 parameter GEN5_PIPEWIDTH = 8)(input wire [511:0] LMCIn, input wire [2:0]GEN, input wire [4:0]LANESNUMBER, input wire [63:0]descramblerDataK,
    3                                                													output wire [511:0]stripedData, output wire [63:0]stripedDataK, output wire [5:0]PIPEWIDTH);
    4                                                
    5                                                	reg [511:0]handledData, shiftedData;
    6                                                	reg [63:0]handledDataK, shiftedDataK;
    7                                                	reg [5:0]pipeWidth;
    8                                                
    9               1                    1024713     	always@*
    10                                               		begin
    11              1                    1024713     		shiftedData = (LANESNUMBER == 16)? LMCIn:
    12                                               						(LANESNUMBER == 8)? LMCIn >> 256:
    13                                               						(LANESNUMBER == 4)? LMCIn >> 384:
    14                                               						(LANESNUMBER == 2)? LMCIn >> 448: 
    15                                               						(LANESNUMBER == 1)? LMCIn >> 480: LMCIn >> 512 ;
    16                                               	
    17              1                    1024713     		shiftedDataK = (LANESNUMBER == 16)? descramblerDataK:
    18                                               						(LANESNUMBER == 8)? descramblerDataK >> 32:
    19                                               						(LANESNUMBER == 4)? descramblerDataK >> 48:
    20                                               						(LANESNUMBER == 2)? descramblerDataK >> 56: 
    21                                               						(LANESNUMBER == 1)? descramblerDataK >> 60: descramblerDataK >> 64 ;
    22                                               		if(GEN == 1)
    23                                               			begin
    24              1                     366274     			handledData = {shiftedData[(480+GEN1_PIPEWIDTH)-1:480], shiftedData[(448+GEN1_PIPEWIDTH)-1:448], shiftedData[(416+GEN1_PIPEWIDTH)-1:416], 
    25                                               							shiftedData[(384+GEN1_PIPEWIDTH)-1:384], shiftedData[(352+GEN1_PIPEWIDTH)-1:352], shiftedData[(320+GEN1_PIPEWIDTH)-1:320], 
    26                                               							shiftedData[(288+GEN1_PIPEWIDTH)-1:288], shiftedData[(256+GEN1_PIPEWIDTH)-1:256], shiftedData[(224+GEN1_PIPEWIDTH)-1:224], 
    27                                               							shiftedData[(192+GEN1_PIPEWIDTH)-1:192], shiftedData[(160+GEN1_PIPEWIDTH)-1:160], shiftedData[(128+GEN1_PIPEWIDTH)-1:128], 
    28                                               							shiftedData[(96+GEN1_PIPEWIDTH)-1:96], shiftedData[(64+GEN1_PIPEWIDTH)-1:64], 
    29                                               							shiftedData[(32+GEN1_PIPEWIDTH)-1:32], shiftedData[GEN1_PIPEWIDTH-1:0]};
    30                                               			
    31              1                     366274     			handledDataK = {shiftedDataK[(60+(GEN1_PIPEWIDTH/8))-1:60], shiftedDataK[(56+(GEN1_PIPEWIDTH/8))-1:56], 
    32                                               							shiftedDataK[(52+(GEN1_PIPEWIDTH/8))-1:52], shiftedDataK[(48+(GEN1_PIPEWIDTH/8))-1:48], shiftedDataK[(44+(GEN1_PIPEWIDTH/8))-1:44], 
    33                                               							shiftedDataK[(40+(GEN1_PIPEWIDTH/8))-1:40], shiftedDataK[(36+(GEN1_PIPEWIDTH/8))-1:36], shiftedDataK[(32+(GEN1_PIPEWIDTH/8))-1:32], 
    34                                               							shiftedDataK[(28+(GEN1_PIPEWIDTH/8))-1:28], shiftedDataK[(24+(GEN1_PIPEWIDTH/8))-1:24], shiftedDataK[(20+(GEN1_PIPEWIDTH/8))-1:20], 
    35                                               							shiftedDataK[(16+(GEN1_PIPEWIDTH/8))-1:16], shiftedDataK[(12+(GEN1_PIPEWIDTH/8))-1:12], shiftedDataK[(8+(GEN1_PIPEWIDTH/8))-1:8],
    36                                               							shiftedDataK[(4+(GEN1_PIPEWIDTH/8))-1:4], shiftedDataK[(GEN1_PIPEWIDTH/8)-1:0]};
    37              1                     366274     			pipeWidth = GEN1_PIPEWIDTH;
    38                                               			end
    39                                               		/*else if(GEN == 2)
    40                                               			begin
    41                                               			handledData = {shiftedData[(480+GEN2_PIPEWIDTH)-1:480], shiftedData[(448+GEN2_PIPEWIDTH)-1:448], shiftedData[(416+GEN2_PIPEWIDTH)-1:416], 
    42                                               							shiftedData[(384+GEN2_PIPEWIDTH)-1:384], shiftedData[(352+GEN2_PIPEWIDTH)-1:352], shiftedData[(320+GEN2_PIPEWIDTH)-1:320], 
    43                                               							shiftedData[(288+GEN2_PIPEWIDTH)-1:288], shiftedData[(256+GEN2_PIPEWIDTH)-1:256], shiftedData[(224+GEN2_PIPEWIDTH)-1:224], 
    44                                               							shiftedData[(192+GEN2_PIPEWIDTH)-1:192], shiftedData[(160+GEN2_PIPEWIDTH)-1:160], shiftedData[(128+GEN2_PIPEWIDTH)-1:128], 
    45                                               							shiftedData[(96+GEN2_PIPEWIDTH)-1:96], shiftedData[(64+GEN2_PIPEWIDTH)-1:64], 
    46                                               							shiftedData[(32+GEN2_PIPEWIDTH)-1:32], shiftedData[GEN2_PIPEWIDTH-1:0]};
    47                                               
    48                                               			handledDataK = {shiftedDataK[(60+(GEN2_PIPEWIDTH/8))-1:60], shiftedDataK[(56+(GEN2_PIPEWIDTH/8))-1:56], 
    49                                               							shiftedDataK[(52+(GEN2_PIPEWIDTH/8))-1:52], shiftedDataK[(48+(GEN2_PIPEWIDTH/8))-1:48], shiftedDataK[(44+(GEN2_PIPEWIDTH/8))-1:44], 
    50                                               							shiftedDataK[(40+(GEN2_PIPEWIDTH/8))-1:40], shiftedDataK[(36+(GEN2_PIPEWIDTH/8))-1:36], shiftedDataK[(32+(GEN2_PIPEWIDTH/8))-1:32], 
    51                                               							shiftedDataK[(28+(GEN2_PIPEWIDTH/8))-1:28], shiftedDataK[(24+(GEN2_PIPEWIDTH/8))-1:24], shiftedDataK[(20+(GEN2_PIPEWIDTH/8))-1:20], 
    52                                               							shiftedDataK[(16+(GEN2_PIPEWIDTH/8))-1:16], shiftedDataK[(12+(GEN2_PIPEWIDTH/8))-1:12], shiftedDataK[(8+(GEN2_PIPEWIDTH/8))-1:8],
    53                                               							shiftedDataK[(4+(GEN2_PIPEWIDTH/8))-1:4], shiftedDataK[(GEN2_PIPEWIDTH/8)-1:0]};
    54                                               			pipeWidth = GEN2_PIPEWIDTH;
    55                                               			end
    56                                               		else if(GEN == 3)
    57                                               			begin
    58                                               			handledData = {shiftedData[(480+GEN3_PIPEWIDTH)-1:480], shiftedData[(448+GEN3_PIPEWIDTH)-1:448], shiftedData[(416+GEN3_PIPEWIDTH)-1:416], 
    59                                               							shiftedData[(384+GEN3_PIPEWIDTH)-1:384], shiftedData[(352+GEN3_PIPEWIDTH)-1:352], shiftedData[(320+GEN3_PIPEWIDTH)-1:320], 
    60                                               							shiftedData[(288+GEN3_PIPEWIDTH)-1:288], shiftedData[(256+GEN3_PIPEWIDTH)-1:256], shiftedData[(224+GEN3_PIPEWIDTH)-1:224], 
    61                                               							shiftedData[(192+GEN3_PIPEWIDTH)-1:192], shiftedData[(160+GEN3_PIPEWIDTH)-1:160], shiftedData[(128+GEN3_PIPEWIDTH)-1:128], 
    62                                               							shiftedData[(96+GEN3_PIPEWIDTH)-1:96], shiftedData[(64+GEN3_PIPEWIDTH)-1:64], 
    63                                               							shiftedData[(32+GEN3_PIPEWIDTH)-1:32], shiftedData[GEN3_PIPEWIDTH-1:0]};
    64                                               
    65                                               			handledDataK = {shiftedDataK[(60+(GEN3_PIPEWIDTH/8))-1:60], shiftedDataK[(56+(GEN3_PIPEWIDTH/8))-1:56], 
    66                                               							shiftedDataK[(52+(GEN3_PIPEWIDTH/8))-1:52], shiftedDataK[(48+(GEN3_PIPEWIDTH/8))-1:48], shiftedDataK[(44+(GEN3_PIPEWIDTH/8))-1:44], 
    67                                               							shiftedDataK[(40+(GEN3_PIPEWIDTH/8))-1:40], shiftedDataK[(36+(GEN3_PIPEWIDTH/8))-1:36], shiftedDataK[(32+(GEN3_PIPEWIDTH/8))-1:32], 
    68                                               							shiftedDataK[(28+(GEN3_PIPEWIDTH/8))-1:28], shiftedDataK[(24+(GEN3_PIPEWIDTH/8))-1:24], shiftedDataK[(20+(GEN3_PIPEWIDTH/8))-1:20], 
    69                                               							shiftedDataK[(16+(GEN3_PIPEWIDTH/8))-1:16], shiftedDataK[(12+(GEN3_PIPEWIDTH/8))-1:12], shiftedDataK[(8+(GEN3_PIPEWIDTH/8))-1:8],
    70                                               							shiftedDataK[(4+(GEN3_PIPEWIDTH/8))-1:4], shiftedDataK[(GEN3_PIPEWIDTH/8)-1:0]};
    71                                               			pipeWidth = GEN3_PIPEWIDTH;
    72                                               			end
    73                                               		else if(GEN == 4)
    74                                               			begin
    75                                               			handledData = {shiftedData[(480+GEN4_PIPEWIDTH)-1:480], shiftedData[(448+GEN4_PIPEWIDTH)-1:448], shiftedData[(416+GEN4_PIPEWIDTH)-1:416], 
    76                                               							shiftedData[(384+GEN4_PIPEWIDTH)-1:384], shiftedData[(352+GEN4_PIPEWIDTH)-1:352], shiftedData[(320+GEN4_PIPEWIDTH)-1:320], 
    77                                               							shiftedData[(288+GEN4_PIPEWIDTH)-1:288], shiftedData[(256+GEN4_PIPEWIDTH)-1:256], shiftedData[(224+GEN4_PIPEWIDTH)-1:224], 
    78                                               							shiftedData[(192+GEN4_PIPEWIDTH)-1:192], shiftedData[(160+GEN4_PIPEWIDTH)-1:160], shiftedData[(128+GEN4_PIPEWIDTH)-1:128], 
    79                                               							shiftedData[(96+GEN4_PIPEWIDTH)-1:96], shiftedData[(64+GEN4_PIPEWIDTH)-1:64], 
    80                                               							shiftedData[(32+GEN4_PIPEWIDTH)-1:32], shiftedData[GEN4_PIPEWIDTH-1:0]};
    81                                               
    82                                               			handledDataK = {shiftedDataK[(60+(GEN4_PIPEWIDTH/8))-1:60], shiftedDataK[(56+(GEN4_PIPEWIDTH/8))-1:56], 
    83                                               							shiftedDataK[(52+(GEN4_PIPEWIDTH/8))-1:52], shiftedDataK[(48+(GEN4_PIPEWIDTH/8))-1:48], shiftedDataK[(44+(GEN4_PIPEWIDTH/8))-1:44], 
    84                                               							shiftedDataK[(40+(GEN4_PIPEWIDTH/8))-1:40], shiftedDataK[(36+(GEN4_PIPEWIDTH/8))-1:36], shiftedDataK[(32+(GEN4_PIPEWIDTH/8))-1:32], 
    85                                               							shiftedDataK[(28+(GEN4_PIPEWIDTH/8))-1:28], shiftedDataK[(24+(GEN4_PIPEWIDTH/8))-1:24], shiftedDataK[(20+(GEN4_PIPEWIDTH/8))-1:20], 
    86                                               							shiftedDataK[(16+(GEN4_PIPEWIDTH/8))-1:16], shiftedDataK[(12+(GEN4_PIPEWIDTH/8))-1:12], shiftedDataK[(8+(GEN4_PIPEWIDTH/8))-1:8],
    87                                               							shiftedDataK[(4+(GEN4_PIPEWIDTH/8))-1:4], shiftedDataK[(GEN4_PIPEWIDTH/8)-1:0]};
    88                                               			pipeWidth = GEN4_PIPEWIDTH;
    89                                               			end*/
    90                                               		else if(GEN == 5)
    91                                               			begin
    92              1                     658439     			handledData = {shiftedData[(480+GEN5_PIPEWIDTH)-1:480], shiftedData[(448+GEN5_PIPEWIDTH)-1:448], shiftedData[(416+GEN5_PIPEWIDTH)-1:416], 
    93                                               							shiftedData[(384+GEN5_PIPEWIDTH)-1:384], shiftedData[(352+GEN5_PIPEWIDTH)-1:352], shiftedData[(320+GEN5_PIPEWIDTH)-1:320], 
    94                                               							shiftedData[(288+GEN5_PIPEWIDTH)-1:288], shiftedData[(256+GEN5_PIPEWIDTH)-1:256], shiftedData[(224+GEN5_PIPEWIDTH)-1:224], 
    95                                               							shiftedData[(192+GEN5_PIPEWIDTH)-1:192], shiftedData[(160+GEN5_PIPEWIDTH)-1:160], shiftedData[(128+GEN5_PIPEWIDTH)-1:128], 
    96                                               							shiftedData[(96+GEN5_PIPEWIDTH)-1:96], shiftedData[(64+GEN5_PIPEWIDTH)-1:64], 
    97                                               							shiftedData[(32+GEN5_PIPEWIDTH)-1:32], shiftedData[GEN5_PIPEWIDTH-1:0]};
    98                                               
    99              1                     658439     			handledDataK = {shiftedDataK[(60+(GEN5_PIPEWIDTH/8))-1:60], shiftedDataK[(56+(GEN5_PIPEWIDTH/8))-1:56], 
    100                                              							shiftedDataK[(52+(GEN5_PIPEWIDTH/8))-1:52], shiftedDataK[(48+(GEN5_PIPEWIDTH/8))-1:48], shiftedDataK[(44+(GEN5_PIPEWIDTH/8))-1:44], 
    101                                              							shiftedDataK[(40+(GEN5_PIPEWIDTH/8))-1:40], shiftedDataK[(36+(GEN5_PIPEWIDTH/8))-1:36], shiftedDataK[(32+(GEN5_PIPEWIDTH/8))-1:32], 
    102                                              							shiftedDataK[(28+(GEN5_PIPEWIDTH/8))-1:28], shiftedDataK[(24+(GEN5_PIPEWIDTH/8))-1:24], shiftedDataK[(20+(GEN5_PIPEWIDTH/8))-1:20], 
    103                                              							shiftedDataK[(16+(GEN5_PIPEWIDTH/8))-1:16], shiftedDataK[(12+(GEN5_PIPEWIDTH/8))-1:12], shiftedDataK[(8+(GEN5_PIPEWIDTH/8))-1:8],
    104                                              							shiftedDataK[(4+(GEN5_PIPEWIDTH/8))-1:4], shiftedDataK[(GEN5_PIPEWIDTH/8)-1:0]};
    105             1                     658439     			pipeWidth = GEN5_PIPEWIDTH;
    106                                              			end
    107                                              		else 
    108                                              			begin
    109                                              			/*handledData = 0;
    110                                              			handledDataK = 0;
    111                                              			pipeWidth = 0;*/
    112                                              			end
    113                                              		end
    114                                              
    115                                              	assign stripedData = handledData;
    116                                              	assign stripedDataK = handledDataK;
    117                                              	assign PIPEWIDTH = pipeWidth;
    118                                              
    119                                              endmodule


=================================================================================
=== File: RTL/Descrambler.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           33        33         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/Descrambler.v --

    1                                                module Descrambler(input wire clk, input wire reset, input wire turnOff, input wire PIPEDataValid, input wire [1:0]PIPESyncHeader,input wire [5:0] PIPEWIDTH,input wire [4:0]State,
    2                                                					input wire [23:0]seedValue, input wire [31:0]PIPEData, input wire [3:0]PIPEDataK, input [2:0]GEN, output wire descramblerDataValid,
    3                                                					output wire [1:0]descramblerSyncHeader, output wire [31:0]descramblerData, output wire [3:0]descramblerDataK);
    4                                                
    5                                                
    6                                                	//sync header: 01 -> data block , 10 -> OS
    7                                                	wire patternReset;
    8                                                	wire [3:0]advance;
    9                                                	wire [1:0]lfsrSel;
    10                                               	wire [3:0]descramblingEnable;
    11                                               	wire [31:0]lfsrOut_8, lfsrOut_16, lfsrOut_32, lfsrOut_8_gen3, lfsrOut_16_gen3, lfsrOut_32_gen3;
    12                                               	reg [7:0] reg1, reg2, reg3, reg4;
    13                                               	reg [31:0]data, lfsrOut;
    14                                               
    15                                               	LFSR_8 lfsr_8(.scrambler_reset(patternReset), .reset_n(reset), .pclk(clk), .data_out(lfsrOut_8[7:0]));
    16                                               	LFSR_16 lfsr_16(.scrambler_reset(patternReset), .reset_n(reset), .pclk(clk), .data_out(lfsrOut_16[15:0]));
    17                                               	LFSR_32 lfsr_32(.scrambler_reset(patternReset), .reset_n(reset), .pclk(clk), .data_out(lfsrOut_32));
    18                                               	
    19                                               	LFSR_8_gen3 lfsr_8_gen3(.seedValue(seedValue), .scrambler_reset(patternReset), .reset_n(reset), .pclk(clk), .data_out(lfsrOut_8_gen3[7:0]));
    20                                               	LFSR_16_gen3 lfsr_16_gen3(.seedValue(seedValue), .scrambler_reset(patternReset), .reset_n(reset), .pclk(clk), .data_out(lfsrOut_16_gen3[15:0]));
    21                                               	LFSR_32_gen3 lfsr_32_gen3(.seedValue(seedValue), .scrambler_reset(patternReset), .reset_n(reset), .pclk(clk), .data_out(lfsrOut_32_gen3));		
    22                                               		
    23                                               	
    24                                               	Master master(.turnOff(turnOff), .syncHeader(PIPESyncHeader), .PIPEWIDTH(PIPEWIDTH), .masterData(PIPEData),.RX_State(State),.masterDataValid(PIPEDataValid) ,.GEN(GEN),.masterDataK(PIPEDataK),
    25                                               					.patternReset(patternReset), .LFSRSel(lfsrSel), .advance(advance), .descramblingEnable(descramblingEnable));
    26                                               
    27              1                   25586490     	always@*
    28                                               		if(GEN < 3) 
    29                                               		begin
    30                                               			/*if(lfsrSel == 0)
    31                                               				lfsrOut = lfsrOut_8;
    32                                               			else if(lfsrSel == 1)
    33                                               				lfsrOut = lfsrOut_16;
    34                                               			else */
    35              1                   15156688     				lfsrOut = lfsrOut_32;
    36                                               		end
    37                                               		else 
    38                                               		begin
    39                                               			/*if(lfsrSel == 0)
    40                                               				lfsrOut = lfsrOut_8_gen3;
    41                                               			else if(lfsrSel == 1)
    42                                               				lfsrOut = lfsrOut_16_gen3;
    43                                               			else */
    44              1                   10429802     				lfsrOut = lfsrOut_32_gen3;
    45                                               		end
    46                                               
    47              1                    5905966     	always@(*)
    48                                               		if(!reset)
    49                                               			begin
    50              1                        512     			reg1 <= 0;
    51              1                        512     			reg2 <= 0;
    52              1                        512     			reg3 <= 0;
    53              1                        512     			reg4 <= 0;
    54              1                        512     			data <= 0;
    55              1                        512     			lfsrOut <= 0;
    56                                               			end
    57                                               		else 
    58                                               			begin
    59                                               			if(advance[0] == 1)
    60              1                    5900254     				reg1 <= lfsrOut[7:0];
    61                                               			if(advance[1] == 1)
    62              1                    5901601     				reg2 <= lfsrOut[15:8];
    63                                               			if(advance[2] == 1)
    64              1                    5901606     				reg3 <= lfsrOut[23:16];
    65                                               			if(advance[3] == 1)
    66              1                    5848198     				reg4 <= lfsrOut[31:24];
    67                                               			end
    68                                               
    69              1                   15436976     	always@*
    70                                               		begin
    71                                               			if(GEN < 3)
    72                                               			begin
    73                                               				if(PIPEDataK[0] == 0)
    74              1                    4804496     					data[7:0] = reg1 ^ PIPEData[7:0];
    75                                               				else
    76              1                     372784     					data[7:0] = PIPEData[7:0];
    77                                               				if(PIPEDataK[1] == 0)
    78              1                    4048576     					data[15:8] = reg2 ^ PIPEData[15:8];
    79                                               				else 
    80              1                    1128704     					data[15:8] = PIPEData[15:8];
    81                                               				if(PIPEDataK[2] == 0)
    82              1                    4090640     					data[23:16] = reg3 ^ PIPEData[23:16];
    83                                               				else 
    84              1                    1086640     					data[23:16] = PIPEData[23:16];
    85                                               				if(PIPEDataK[3] == 0)
    86              1                    3652144     					data[31:24] = reg4 ^ PIPEData[31:24];
    87                                               				else 
    88              1                    1525136     					data[31:24] = PIPEData[31:24];
    89                                               			end
    90                                               		end
    91                                               		
    92              1                   16181690     		always@*
    93                                               		begin
    94                                               			if(GEN >= 3)
    95                                               			begin
    96                                               				if(descramblingEnable[0])
    97              1                    9295640     					data[7:0] = reg1 ^ PIPEData[7:0];
    98                                               				else
    99              1                    1954056     					data[7:0] = PIPEData[7:0];
    100                                              				if(descramblingEnable[1])
    101             1                    9295766     					data[15:8] = reg2 ^ PIPEData[15:8];
    102                                              				else 
    103             1                    1953930     					data[15:8] = PIPEData[15:8];
    104                                              				if(descramblingEnable[2])
    105             1                    9299918     					data[23:16] = reg3 ^ PIPEData[23:16];
    106                                              				else 
    107             1                    1949778     					data[23:16] = PIPEData[23:16];
    108                                              				if(descramblingEnable[3])
    109             1                    7843126     					data[31:24] = reg4 ^ PIPEData[31:24];
    110                                              				else 
    111             1                    3406570     					data[31:24] = PIPEData[31:24];
    112                                              			end
    113                                              		end
    114                                              			
    115                                              
    116             1                   25247290     	assign descramblerData =  (turnOff == 1 && GEN < 3)? PIPEData :  
    117                                              							  (PIPEWIDTH == 8)? {24'b0, data[7:0]} : 
    118                                              							  (PIPEWIDTH == 16)? {16'b0, data[15:0]} :
    119                                              							  (PIPEWIDTH == 32)? data : 32'b0;
    120                                              	assign descramblerDataK = PIPEDataK;	
    121                                              	assign descramblerDataValid = PIPEDataValid;
    122                                              	assign descramblerSyncHeader = PIPESyncHeader;
    123                                              
    124                                              endmodule


=================================================================================
=== File: RTL/Descrambler_contr.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            8         8         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/Descrambler_contr.v --

    1                                                 module Descrambler_contr (input OS_detection,clk,reset,input[2:0]GEN,input[5:0]PIPEWIDTH,output reg pass_it );
    2                                                 
    3                                                 
    4                                                  reg[3:0] count;
    5                                                 
    6               1                     293050     always@(posedge clk or negedge reset) begin
    7                                                 if(GEN == 1 || GEN == 2) begin
    8                                                   if (!reset) begin
    9               1                         14                 count<=0;
    10              1                         14                 pass_it <= 0;            
    11                                                  end
    12                                                
    13                                                  else begin
    14                                                  
    15                                                   if(OS_detection == 1) begin
    16              1                      60927              count<= count+1;
    17              1                      60927              pass_it <= 1;
    18                                                      end
    19                                                      
    20                                                   else if ((count< 32/PIPEWIDTH *4 -1)&&  count!=0 )
    21              1                     115024               count<= count+1;
    22                                                   
    23                                                   else begin
    24              1                     115046                pass_it <= 0;
    25              1                     115046                count<=0;
    26                                                        end
    27                                                 
    28                                                   end
    29                                               
    30                                                 end
    31                                                 
    32                                               end
    33                                               
    34                                               endmodule


=================================================================================
=== File: RTL/FIFOV2.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           31        31         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/FIFOV2.v --

    1                                                module FIFOV2(reset_n,data_in,wr,rd,wr_valid,pclk,STP_IN,SDP_IN,END_IN,length_in,length_out,empty,full,data_out,STP_OUT,SDP_OUT,END_OUT,rd_valid);
    2                                                parameter depth=4;
    3                                                input reset_n;
    4                                                input wr;
    5                                                input rd;
    6                                                input pclk;
    7                                                input[63:0] wr_valid;
    8                                                input[63:0] STP_IN;
    9                                                input[63:0] SDP_IN;
    10                                               input[63:0] END_IN;
    11                                               input[511:0] data_in;
    12                                               input [79:0]length_in;
    13                                               output reg full;
    14                                               output reg empty;
    15                                               output reg[63:0] rd_valid;
    16                                               output reg[63:0] STP_OUT;
    17                                               output reg[63:0] SDP_OUT;
    18                                               output reg[63:0] END_OUT;
    19                                               output reg[511:0] data_out;
    20                                               output reg [79:0]length_out;
    21                                               reg [847:0] FIFO [0:depth-1];
    22                                               reg [1:0] writecounter;
    23                                               reg [1:0] readcounter;
    24              1                      40265     always @(posedge pclk) begin
    25                                                if (reset_n==1'b0) begin
    26              1                          8        full<=1'b0;
    27              1                          8       readcounter<=0;
    28                                                 end
    29                                                 
    30                                                if(wr==1'b1)begin 
    31                                                 if (writecounter==readcounter)
    32              1                       8385        full<=1;
    33                                                 else
    34              1                         15        full<=0;
    35                                                end
    36                                                 
    37                                                 if (rd==1'b1) begin
    38              1                       8400         data_out<=FIFO[readcounter][511:0];
    39              1                       8400     	STP_OUT<=FIFO[readcounter][575:512];
    40              1                       8400     	SDP_OUT<=FIFO[readcounter][639:576];
    41              1                       8400     	END_OUT<=FIFO[readcounter][703:640];
    42              1                       8400     	rd_valid<=FIFO[readcounter][767:704];
    43              1                       8400     	length_out<=FIFO[readcounter][847:768];
    44              1                       8400     	readcounter<=readcounter+1;
    45              1                       8400     	full<=0;
    46                                                 end	
    47                                                else begin
    48              1                      31865       data_out<=512'b0;
    49              1                      31865       STP_OUT<=64'b0;
    50              1                      31865       SDP_OUT<=64'b0;
    51              1                      31865       END_OUT<=64'b0;
    52              1                      31865       rd_valid<=64'b0;
    53                                                end 	   
    54                                                end
    55              1                      33608      always @ (negedge pclk)begin
    56                                                if (reset_n==1'b0) begin
    57              1                         10        writecounter<=0;
    58              1                         10        empty<=1;
    59                                                 end
    60                                                 if (rd==1)begin
    61                                                 if (readcounter==writecounter)
    62              1                          3          empty<=1;
    63                                               	else
    64              1                       8397     	 empty<=0;
    65                                                 end
    66                                                 
    67                                                if(wr==1'b1)begin
    68              1                       8400       empty<=0;
    69              1                       8400       FIFO[writecounter][511:0]<=data_in;
    70              1                       8400       FIFO[writecounter][575:512]<=STP_IN;
    71              1                       8400       FIFO[writecounter][639:576]<=SDP_IN;
    72              1                       8400       FIFO[writecounter][703:640]<=END_IN;
    73              1                       8400       FIFO[writecounter][767:704]<=wr_valid;
    74              1                       8400       FIFO[writecounter][847:768]<=length_in;
    75              1                       8400       writecounter<=writecounter+1;
    76                                                 end
    77                                                end
    78                                                endmodule
    79                                               	
    80                                               	   
    81                                                
    82                                               
    83                                               
    84                                               


=================================================================================
=== File: RTL/Gen1_2_DataPath.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            2         2         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/Gen1_2_DataPath.v --

    1                                                
    2                                                module Gen1_2_DataPath(
    3                                                    input [511:0]Data_in,
    4                                                    input [63:0]DK,
    5                                                    input [63:0]valid,
    6                                                    output [511:0]Data_out,
    7                                                    input clk,
    8                                                    output [63:0]dlpstart ,
    9                                                    output [63:0]dlpend   ,
    10                                                   output [63:0]tlpstart ,
    11                                                   output [63:0]tlpedb   ,
    12                                                   output [63:0]tlpend   ,
    13                                                   output [63:0]valid_d
    14                                                   
    15                                               );
    16                                               
    17                                               wire [63:0]tlp_or_dllp1;
    18                                               
    19                                               wire [63:0]tlp_or_dllp2;
    20                                               localparam N = 64;
    21                                               
    22                                               wire [1:0]tlp_or_dllp_reg_in;
    23                                               wire [1:0]tlp_or_dllp_reg_out;
    24                                               assign Data_out = Data_in;
    25                                               generate
    26                                                   genvar i;
    27                                                   for(i=0;i<64;i = i + 1)
    28                                                       begin  : generate_checkbytes
    29                                                         if(i == 0)
    30                                                         begin
    31                                                           check_byte CheckByte(
    32                                                               .data_in(Data_in[8*(i+1)-1:8*i]),
    33                                                               .tlp_or_dllp_in(tlp_or_dllp_reg_out),
    34                                                               .valid(valid[i]),
    35                                                               .DK(DK[i]),
    36                                                               
    37                                                               .type({valid_d[i],tlpstart[i],tlpend[i],dlpend[i],dlpstart[i],tlpedb[i]}),
    38                                                               .tlp_or_dllp_out({tlp_or_dllp1[0],tlp_or_dllp2[0]})
    39                                               
    40                                                           );  
    41                                                         end
    42                                                         else if (i == N-1) begin
    43                                                             check_byte CheckByte(
    44                                                               .data_in(Data_in[8*(i+1)-1:8*i]),
    45                                                               .tlp_or_dllp_in({tlp_or_dllp1[62],tlp_or_dllp2[62]}),
    46                                                               .valid(valid[i]),
    47                                                               .DK(DK[i]),
    48                                                              
    49                                                               .type({valid_d[i],tlpstart[i],tlpend[i],dlpend[i],dlpstart[i],tlpedb[i]}),
    50                                                               .tlp_or_dllp_out(tlp_or_dllp_reg_in)
    51                                                           );  
    52                                                         end
    53                                                         else 
    54                                                         begin
    55                                                            check_byte CheckByte(
    56                                                               .data_in(Data_in[8*(i+1)-1:8*i]),
    57                                                               .tlp_or_dllp_in({tlp_or_dllp1[i-1],tlp_or_dllp2[i-1]}),
    58                                                               .valid(valid[i]),
    59                                                               .DK(DK[i]),
    60                                                             
    61                                                               .type({valid_d[i],tlpstart[i],tlpend[i],dlpend[i],dlpstart[i],tlpedb[i]}),
    62                                                               .tlp_or_dllp_out({tlp_or_dllp1[i],tlp_or_dllp2[i]})
    63                                                           );      
    64                                                         end  
    65                                                           
    66                                               
    67                                               
    68                                                       end
    69                                                
    70                                               
    71                                               endgenerate
    72                                               
    73                                               reg [1:0] data_out_reg;
    74              1                          4     always @(posedge clk) begin
    75              1                          4         data_out_reg <= tlp_or_dllp_reg_in;
    76                                               end
    77                                               assign tlp_or_dllp_reg_out = data_out_reg;
    78                                               
    79                                               endmodule


=================================================================================
=== File: RTL/Gen3_DataPath.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           19        19         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/Gen3_DataPath.v --

    1                                                
    2                                                module Gen3_DataPath(
    3                                                  input  [511:0]Data_in,
    4                                                  input  [63:0]valid,
    5                                                  input  [31:0]syncHeader,
    6                                                input    clk,
    7                                                input rst,
    8                                                  output [511:0]Data_out,
    9                                                  output [63:0]dlpstart ,
    10                                                 output [63:0]dlpend   ,
    11                                                 output [63:0]tlpstart ,
    12                                                 output [63:0]tlpedb   ,
    13                                                 output [63:0]tlpend   ,
    14                                                 output [63:0]valid_d
    15                                                 
    16                                               );
    17                                               
    18                                               localparam N = 65;
    19                                               
    20                                               wire [11:0]count_limit[0:64];
    21                                               wire [11:0]count_byte[0:64]; 
    22                                               wire [2:0]header_byte[0:64];
    23                                               reg [127:0]syncHeader1;
    24                                               wire [63:0] valid_w;
    25                                               
    26                                               assign Data_out = Data_in;
    27                                               reg[8:0] h;
    28              1                          2     integer j=0;
    29              1                     107752     always @(*) 
    30                                               
    31                                               begin
    32              1                     107752       syncHeader1 = syncHeader;
    33                                               
    34              1                     107752       h = 0;
    35              1                     107752       for(j=0;j<32;j = j + 2)
    35              2                    1724032     
    36                                                 begin
    37              1                    1724032         syncHeader1[h] = syncHeader[j];
    38              1                    1724032         syncHeader1[h+1] = syncHeader[j+1];
    39                                               
    40              1                    1724032         syncHeader1[h+2] = syncHeader[j];
    41              1                    1724032         syncHeader1[h+3] = syncHeader[j+1];
    42                                               
    43              1                    1724032         syncHeader1[h+4] = syncHeader[j];
    44              1                    1724032         syncHeader1[h+5] = syncHeader[j+1];
    45                                               
    46              1                    1724032         syncHeader1[h+6] = syncHeader[j];
    47              1                    1724032         syncHeader1[h+7] = syncHeader[j+1];
    48              1                    1724032         h = h + 8;
    49                                                 end
    50                                               end
    51                                               generate
    52                                                 genvar i;
    53                                                 for(i=0;i<64;i = i + 1)
    54                                                     begin  : generate_checkbytes_gen3
    55                                                       if(i == 0)
    56                                                       begin
    57                                                         Gen_3_check_byte CheckByte3(
    58                                                             .clk(clk),
    59                                                             .data_in(Data_in[8*(i+1)-1:8*i]),
    60                                                             .byte_count_in(count_byte[N-1]),
    61                                                             .byte_header_in(header_byte[N-1]),
    62                                                             .count_limit_in(count_limit[N-1]),
    63                                                             .syncHeader(syncHeader1[2*(i+1)-1:2*i]),
    64                                                             .valid(valid_w[i]),
    65                                                             .byte_count_out(count_byte[i]),
    66                                                             .byte_header_out(header_byte[i]),
    67                                                             .count_limit_out(count_limit[i]),
    68                                                             .type({valid_d[i],tlpstart[i],tlpend[i],dlpend[i],dlpstart[i],tlpedb[i]}),
    69                                                             .rst(rst)
    70                                                         );  
    71                                                       end
    72                                                       else if (i == N-2) begin
    73                                                           Gen_3_check_byte CheckByte3(
    74                                                             .clk(clk),
    75                                                             .data_in(Data_in[8*(i+1)-1:8*i]),
    76                                                             .byte_count_in( count_byte[62]  ),
    77                                                             .byte_header_in(header_byte[62]),
    78                                                             .count_limit_in(count_limit[62]),
    79                                                             .syncHeader    (syncHeader1[2*(i+1)-1:2*i]),
    80                                                             .valid(valid_w[i]),
    81                                                             .byte_count_out(count_byte[i]),
    82                                                             .byte_header_out(header_byte[i]),
    83                                                             .count_limit_out(count_limit[i]),
    84                                                             .type({valid_d[i],tlpstart[i],tlpend[i],dlpend[i],dlpstart[i],tlpedb[i]}),
    85                                                             .rst(rst)  
    86                                                           );  
    87                                                       end
    88                                                  
    89                                                       else 
    90                                                       begin
    91                                                         Gen_3_check_byte CheckByte3(
    92                                                           .clk(clk),
    93                                                           .data_in(Data_in[8*(i+1)-1:8*i]),
    94                                                           .byte_count_in(count_byte[i-1]),
    95                                                           .byte_header_in(header_byte[i-1]),
    96                                                           .count_limit_in(count_limit[i-1]),
    97                                                           .syncHeader(syncHeader1[2*(i+1)-1:2*i]),
    98                                                           .valid(valid_w[i]),
    99                                                           .byte_count_out(count_byte[i]),
    100                                                          .byte_header_out(header_byte[i]),
    101                                                          .count_limit_out(count_limit[i]),
    102                                                          .type({valid_d[i],tlpstart[i],tlpend[i],dlpend[i],dlpstart[i],tlpedb[i]}),
    103                                                          .rst(rst)  
    104                                                        );    
    105                                                      end  
    106                                                        
    107                                              
    108                                              
    109                                                    end
    110                                              
    111                                              
    112                                              endgenerate
    113                                              
    114                                              reg [26:0] data_out_reg;
    115                                              
    116             1                      13639     always @(posedge clk) begin
    117                                                
    118             1                      13639         data_out_reg <= {count_byte[63],header_byte[63],count_limit[63]};
    119                                                  
    120                                              end
    121                                              
    122                                              
    123             1                     181618     assign valid_w = (valid!=0 /*&& syncHeader!=0*/) ?  valid : 0 ;
    124             1                       5880     assign {count_byte[64],header_byte[64],count_limit[64]} = data_out_reg;
    125                                              
    126                                              endmodule


=================================================================================
=== File: RTL/Gen_3_check_byte.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           44        40         4      90.9

================================Statement Details================================

Statement Coverage for file RTL/Gen_3_check_byte.v --

    1                                                
    2                                                module Gen_3_check_byte(
    3                                                    input   clk,
    4                                                    input   [7:0]data_in,
    5                                                    input   valid,
    6                                                    input   [11:0]byte_count_in,
    7                                                    input   [2:0]byte_header_in,
    8                                                    input   [11:0]count_limit_in,
    9                                                    input   [1:0]syncHeader,
    10                                                   input rst,
    11                                                   output   [5:0]type,
    12                                                   output   [11:0]byte_count_out,
    13                                                   output   [2:0]byte_header_out,
    14                                                   output   [11:0]count_limit_out
    15                                                               
    16                                               );
    17                                               // data boundries
    18                                                   localparam STP = 4'b1111 ;
    19                                               
    20                                                   localparam SDP_byte1 = 8'b1111_0000;
    21                                                   localparam SDP_byte2 = 8'b1010_1100 ;
    22                                                   
    23                                                   // localparam END_byte1 = 8'b0001_1111 ;
    24                                                   // localparam END_byte2 = 8'b0000_0000 ;
    25                                                   // localparam END_byte3 = 8'b1001_0000 ;
    26                                                   // localparam END_byte4 = 8'b0000_0000 ;
    27                                                   
    28                                                   // localparam EDB_byte1 = 8'b1100_0000 ;
    29                                                   // localparam EDB_byte2 = 8'b1100_0000 ;
    30                                                   // localparam EDB_byte3 = 8'b111_11110 ;
    31                                                   // localparam EDB_byte4 = 8'b111_11110 ; 
    32                                                   
    33                                                   // byte type
    34                                                   localparam not_header =3'b000;
    35                                                   localparam sdp1 = 3'b001;
    36                                                   localparam sdp2 = 3'b010;
    37                                                   localparam stp1 = 3'b011;
    38                                                   localparam stp2 = 3'b100;
    39                                                   localparam stp3 = 3'b101;
    40                                                   localparam stp4 = 3'b111;
    41                                                   localparam edb1 = 3'b110;
    42                                               
    43                                               // types
    44                                                   localparam data       = 6'b100_000;
    45                                                   localparam not_valid  = 6'b000_000;
    46                                                   localparam tlpstart   = 6'b010_000;
    47                                                   localparam tlpend     = 6'b101_000;
    48                                                   localparam dllpend    = 6'b100_100;
    49                                                   localparam dllpstart  = 6'b000_010;
    50                                                   localparam tlpedb     = 6'b000_001;
    51                                               
    52                                               reg   [11:0]byte_count_in_reg;
    53                                               reg   [2:0]byte_header_in_reg;
    54                                               reg   [11:0]count_limit_in_reg;
    55                                               reg   [5:0]type_reg;
    56                                               reg   [2:0] edb_count;
    57                                               reg  [1:0] syncHeader_out_reg;
    58                                               
    59                                               
    60                                               
    61              1                   10344192     always@(posedge clk)begin
    62                                                 
    63              1                   10344192       syncHeader_out_reg <= syncHeader;
    64                                                 
    65                                               end
    66                                               
    67                                               
    68              1                   60979666     always @(*) begin
    69              1                   60979666         byte_count_in_reg = byte_count_in;
    70              1                   60979666         byte_header_in_reg = byte_header_in;
    71              1                   60979666         count_limit_in_reg = count_limit_in;
    72              1                   60979666         type_reg = not_valid;
    73                                                   if(!rst)
    74                                                   begin
    75              1                       1342             byte_count_in_reg = 0;
    76              1                       1342             byte_header_in_reg= 0;
    77              1                       1342             count_limit_in_reg= 0;   
    78              1                       1342             edb_count = 0; 
    79                                                   end
    80                                                   else
    81                                                   begin
    82                                                    
    83                                                       if(valid  && (syncHeader == 2'b01 || syncHeader_out_reg== 2'b01)) // Youssef
    84                                                       begin
    85                                                          if(data_in == SDP_byte1 & byte_header_in == 2'b00)
    86                                                       begin
    87              1                      33846                 byte_header_in_reg = sdp1;
    88                                                       end
    89                                                       else if ((data_in == SDP_byte2) & (byte_header_in == sdp1) ) 
    90                                                       begin
    91                                                           // count = 0
    92              1                      32401                 count_limit_in_reg = 12'd6;
    93              1                      32401                 byte_count_in_reg = 12'd0;
    94                                                           // type SDP
    95              1                      32401                 type_reg = dllpstart;
    96              1                      32401                 byte_header_in_reg = sdp2;
    97                                                           // 
    98                                                       end
    99                                                       
    100                                                      if(data_in[3:0] == STP  & (byte_header_in == 2'b00 || (type_reg==6'b101_000)))
    101                                                          begin
    102             1                      36746                     byte_header_in_reg = stp1;
    103             1                      36746                     count_limit_in_reg[3:0] = data_in[7:4];
    104             1                      36746                     edb_count = 0;
    105                                                          end
    106                                                          else if (byte_header_in == stp1) 
    107                                                          begin
    108             1                      36843                     byte_header_in_reg = stp2;
    109             1                      36843                     count_limit_in_reg[11:4] = data_in;
    110                                                              // 
    111                                                          end
    112                                                          else if (byte_header_in == stp2) 
    113                                                          begin
    114             1                      37088                     byte_header_in_reg = stp3;
    115             1                      37088                     count_limit_in_reg = count_limit_in_reg << 2;
    116                                                              // 
    117                                                          end
    118                                                          else if (byte_header_in == stp3) 
    119                                                          begin
    120             1                      37349                     byte_count_in_reg = 12'd0;
    121                                                              // type SDP
    122             1                      37349                     type_reg = tlpstart;
    123                                                             
    124             1                      37349                     byte_header_in_reg = stp4;
    125                                                              // 
    126                                                          end
    127                                                       if((byte_count_in+1 < count_limit_in) && (byte_header_in == stp4))
    128                                                      begin           
    129                                                          
    130             1                    3870707                 byte_count_in_reg = byte_count_in_reg + 1;
    131             1                    3870707                 type_reg = data;
    132                                              
    133                                                          
    134                                                      end
    135                                                      else if((byte_count_in+1 ==count_limit_in) & (byte_header_in == stp4))
    136                                                      begin
    137                                              
    138             1                     192747                 count_limit_in_reg = 0;
    139             1                     192747                 byte_count_in_reg = 0;
    140             1                     192747                 byte_header_in_reg = 0;
    141                                                          
    142                                              
    143                                                          
    144                                                         /* if(data_in ==8'b1100_0000 && edb_count==4)
    145                                                              type_reg = tlpedb;
    146                                                          else */     
    147             1                     192747                     type_reg = tlpend;
    148                                                      end 
    149                                              
    150                                                      if((byte_count_in+1 < count_limit_in) && (byte_header_in == sdp2))
    151                                                      begin
    152                                                          
    153             1                     360877                 byte_count_in_reg = byte_count_in_reg + 1;
    154             1                     360877                 type_reg = data;
    155                                                      end
    156                                                      else if((byte_count_in+1 == 6) & (byte_header_in == sdp2))
    157                                                      begin
    158                                              
    159             1                      96007                 count_limit_in_reg = 0;
    160             1                      96007                 byte_count_in_reg = 0;
    161             1                      96007                 byte_header_in_reg = 0;
    162             1                      96007                 type_reg = dllpend;
    163                                              
    164                                                      end  
    165                                              
    166                                                     end
    167                                                      
    168                                                   else if(valid  /*& (syncHeader == 2'b01)*/) //Youssef
    169                                                      begin
    170                                                        
    171                                                        
    172                                                    if(((byte_count_in+1) < count_limit_in) && (byte_header_in == stp4))
    173                                                      begin
    174                                                          
    175             1                     248768                 byte_count_in_reg = byte_count_in_reg + 1;
    176             1                     248768                 type_reg = data;
    177                                              
    178                                                      end
    179                                                      else if(((byte_count_in+1) ==count_limit_in) & (byte_header_in == stp4))
    180                                                      begin
    181                                              
    182             1                    ***0***                 count_limit_in_reg = 0;
    183             1                    ***0***                 byte_count_in_reg = 0;
    184             1                    ***0***                 byte_header_in_reg = 0;
    185                                               
    186                                                          
    187                                                         /* if(data_in ==8'b1100_0000 && edb_count==4)
    188                                                              type_reg = tlpedb;
    189                                                          else */  
    190             1                    ***0***                     type_reg = tlpend;
    191                                              
    192                                                      end          
    193                                                       
    194                                                    end      
    195                                                  end
    196                                                 
    197                                              
    198                                                
    199                                                
    200                                              end
    201                                              
    202                                              
    203                                              
    204                                              assign byte_count_out = byte_count_in_reg;
    205                                              assign byte_header_out = byte_header_in_reg;
    206                                              assign count_limit_out = count_limit_in_reg;
    207                                              assign type = type_reg;
    208                                              
    209                                              endmodule


=================================================================================
=== File: RTL/Gen_ctrl.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            6         6         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/Gen_ctrl.v --

    1                                                module Gen_ctrl
    2                                                 #( 
    3                                                    parameter GEN1_PIPEWIDTH = 8 ,	
    4                                                	parameter GEN2_PIPEWIDTH = 16 ,	
    5                                                	parameter GEN3_PIPEWIDTH = 32 ,								
    6                                                	parameter GEN4_PIPEWIDTH = 8 ,	
    7                                                	parameter GEN5_PIPEWIDTH = 8 
    8                                                )(
    9                                                    
    10                                                   
    11                                                   input valid_pd,
    12                                                   input [2:0]gen,
    13                                                   input linkup,
    14                                                   input [4:0]numberOfDetectedLanes,
    15                                               
    16                                                   output sel,
    17                                                   output [63:0]valid,
    18                                                   output w
    19                                               
    20                                               );
    21                                               
    22                                               localparam gen1_sel = 3'd1;
    23                                               localparam gen2_sel = 3'd2;
    24                                               localparam gen3_sel = 3'd3;
    25                                               localparam gen4_sel = 3'd4;
    26                                               localparam gen5_sel = 3'd5;
    27                                               
    28                                               
    29                                               localparam N = 64;
    30                                               
    31                                               reg [63:0]valid_reg;
    32                                               
    33                                               
    34                                               
    35                                               // gen decoder
    36              1                         30     always @*
    37                                               begin
    38                                                   case (gen)
    39                                                   gen1_sel: 
    40                                                       case (numberOfDetectedLanes)
    41                                                         //      5'b00001: valid_reg = {{(64 - (GEN1_PIPEWIDTH/8)*1){1'b0}},{(GEN1_PIPEWIDTH/8)*1{1'b1}}};
    42                                                          // 5'b00010: valid_reg = {{(64 - (GEN1_PIPEWIDTH/8)*2){1'b0}},{(GEN1_PIPEWIDTH/8)*2{1'b1}}};
    43                                                          // 5'b00100: valid_reg = {{(64 - (GEN1_PIPEWIDTH/8)*4){1'b0}},{(GEN1_PIPEWIDTH/8)*4{1'b1}}};
    44                                                          // 5'b01000: valid_reg = {{(64 - (GEN1_PIPEWIDTH/8)*8){1'b0}},{(GEN1_PIPEWIDTH/8)*8{1'b1}}};
    45              1                         12                   5'b10000: valid_reg = {{(64 - (GEN1_PIPEWIDTH/8)*16){1'b0}},{(GEN1_PIPEWIDTH/8)*16{1'b1}}}; 
    46                                                       endcase 
    47                                                   gen5_sel: 
    48                                                       case (numberOfDetectedLanes)
    49                                                          // 5'b00001: valid_reg = {{(64 - (GEN5_PIPEWIDTH/8)*1){1'b0}},{(GEN5_PIPEWIDTH/8)*1{1'b1}}};
    50                                                          // 5'b00010: valid_reg = {{(64 - (GEN5_PIPEWIDTH/8)*2){1'b0}},{(GEN5_PIPEWIDTH/8)*2{1'b1}}};
    51                                                          // 5'b00100: valid_reg = {{(64 - (GEN5_PIPEWIDTH/8)*4){1'b0}},{(GEN5_PIPEWIDTH/8)*4{1'b1}}};
    52                                                          // 5'b01000: valid_reg = {{(64 - (GEN5_PIPEWIDTH/8)*8){1'b0}},{(GEN5_PIPEWIDTH/8)*8{1'b1}}};
    53              1                          6                   5'b10000: valid_reg = {{(64 - (GEN5_PIPEWIDTH/8)*16){1'b0}},{(GEN5_PIPEWIDTH/8)*16{1'b1}}}; 
    54                                                       endcase 
    55                                                   default:
    56              1                          E         valid_reg = 64'b0;
    57                                                       
    58                                                   endcase
    59                                               end
    60                                               
    61                                               
    62              1                         14     assign sel =(gen == gen1_sel | gen == gen2_sel)? 1'b0:1'b1;
    63              1                     267547     assign w = valid_pd & linkup;
    64              1                     267549     assign valid =(valid_pd & linkup)? valid_reg:64'b0;   // Youssef
    65                                               endmodule


=================================================================================
=== File: RTL/Gen_mux.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            2         2         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/Gen_mux.v --

    1                                                module Gen_mux(
    2                                                    input [511:0]data_in1,
    3                                                    input [511:0]data_in2,
    4                                                    input [383:0]bytetype1,
    5                                                    input [383:0]bytetype2,
    6                                                    input sel,
    7                                                    output [511:0]data_out,
    8                                                    output [383:0] ByteType
    9                                                );
    10              1                     599581        assign data_out = sel? data_in2:data_in1;
    11              1                     228038        assign ByteType = sel? bytetype2:bytetype1;
    12                                               endmodule


=================================================================================
=== File: RTL/InsertBlockToken_G3.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          270       231        39      85.5

================================Statement Details================================

Statement Coverage for file RTL/InsertBlockToken_G3.v --

    1                                                
    2                                                
    3                                                  module InsertBlockToken_G3 #
    4                                                (
    5                                                parameter MAXPIPEWIDTH =32,
    6                                                parameter LANESNUMBER = 16,
    7                                                parameter GEN1_PIPEWIDTH = 8 ,	
    8                                                parameter GEN2_PIPEWIDTH = 32 ,	
    9                                                parameter GEN3_PIPEWIDTH = 16 ,	
    10                                               parameter GEN4_PIPEWIDTH = 8 ,	
    11                                               parameter GEN5_PIPEWIDTH = 8 	
    12                                               )
    13                                               (clk,ResetN,DataIn,ValidIn,TLPStart,DLLPStart,PEnd,Gen,length,Hold,Empty,ReadEn,DataOut,ValidOut,DKOut);
    14                                               input clk;
    15                                               input ResetN;
    16                                               input [511:0] DataIn;
    17                                               input [63:0] ValidIn;
    18                                               input [63:0] TLPStart;
    19                                               input [63:0] DLLPStart;
    20                                               input [63:0] PEnd;
    21                                               input [2:0] Gen;
    22                                               input[79:0] length;
    23                                               input Hold;
    24                                               input Empty;
    25                                               //input stop_DS;
    26                                               output reg ReadEn;
    27                                               output reg[511:0]DataOut;
    28                                               output reg [63:0]ValidOut;
    29                                               output reg [63:0] DKOut;
    30                                               ////GEN3
    31              1                          2     reg done = 0 ;
    32                                               reg[511:0]DataOut_reg;
    33                                               reg [63:0]ValidOut_reg;
    34                                               reg[63:0]TLPStart_reg;
    35                                               reg[63:0]DLLPStart_reg;
    36                                               reg [63:0]PEnd_reg;
    37                                               reg [63:0]ValidIn_reg;
    38                                               reg [255:0]Valid_reg;
    39                                               reg [255:0]Valid_comb;
    40                                               reg[511:0]DataIn_reg;
    41                                               reg [15:0]SDP;
    42                                               reg [31:0]STP1;
    43                                               reg [31:0]STP2;
    44                                               reg [31:0]STP3;
    45                                               reg [31:0]STP4;
    46                                               reg [31:0]STP5;
    47                                               reg [31:0]STP6;
    48                                               reg [31:0]STP7;
    49                                               reg [31:0]STP8;
    50                                               reg [31:0]STP9;
    51                                               reg [31:0]STP10;
    52                                               reg [31:0]STP11;
    53                                               reg [31:0]STP12;
    54                                               reg [31:0]STP13;
    55                                               reg [31:0]STP14;
    56                                               reg [31:0]STP15;
    57                                               reg [31:0]STP16;
    58                                               reg [5:0]pipe;
    59                                               reg [4:0]lanes;
    60                                               reg [2047:0] out_comb;
    61                                               reg [2047:0] out_reg;
    62                                               reg [4:0]TLP_count;
    63                                               reg start;
    64                                               reg write_data;
    65                                               reg read_data_reg;
    66                                               reg read_data_comb;
    67                                               reg finish;
    68                                               reg flag_reg;
    69                                               reg flag_comb;
    70                                               reg [1023:0] temp_data;
    71                                               reg [127:0] temp_valid;
    72                                               //////////////GEN1
    73                                               reg [7:0] count;
    74                                               reg [MAXPIPEWIDTH/8*LANESNUMBER-1:0]DK;
    75                                               wire[MAXPIPEWIDTH/8*LANESNUMBER-1:0]flag1;
    76                                               reg [MAXPIPEWIDTH*LANESNUMBER-1:0] flag2; 
    77                                               reg [MAXPIPEWIDTH*LANESNUMBER-1:0]   ShiftLeftVaLueData;
    78                                               reg [MAXPIPEWIDTH/8*LANESNUMBER-1:0] ShiftLeftValueValid;
    79                                               reg [2:0] width;
    80                                               reg [MAXPIPEWIDTH*LANESNUMBER-1:0]   out_data_mask;
    81                                               reg [MAXPIPEWIDTH/8*LANESNUMBER-1:0] out_valid_mask;
    82                                               reg NoMoreData;
    83                                               reg finishprocessing;
    84                                               reg read_new;
    85                                               reg [512+16*8-1:0] data_reg;
    86                                               
    87                                               reg [64+16-1:0] STB_reg;
    88                                               reg [64+16-1:0] SDB_reg;
    89                                               reg [64+16-1:0] END_reg;
    90                                               reg [64+16-1:0] valid_reg;
    91                                               reg [MAXPIPEWIDTH*LANESNUMBER-1:0] data_temp;
    92                                               reg [MAXPIPEWIDTH/8*LANESNUMBER-1:0] valid_temp;
    93                                               reg [MAXPIPEWIDTH/8*LANESNUMBER-1:0] DK_temp;
    94                                               reg [7:0] count_temp;
    95                                               reg ConFlag ;
    96                                               parameter STB=8'hFB,
    97                                               			 SDB=8'h5C,
    98                                               			 END_t=8'hFD;
    99                                               //////////////////////////////////////
    100             1                         35     always @ (posedge clk)
    101                                              begin 
    102             1                          8     	if(~ResetN) begin width <= 0; end
    103                                              	else begin
    104                                              		if (Gen == 1)begin  
    105                                              			case(GEN1_PIPEWIDTH)
    106                                              			8:width<=0;
    107                                              			16:width<=1;
    108             1                         20     			32:width<=2;
    109                                              			endcase
    110                                              		end
    111                                              		/*else if (Gen == 2)begin  
    112                                              			case(GEN2_PIPEWIDTH)
    113                                              			8:width<=0;
    114                                              			16:width<=1;
    115                                              			32:width<=2;
    116                                              			endcase
    117                                              		end
    118                                              		else if (Gen == 3)begin  
    119                                              			case(GEN3_PIPEWIDTH)
    120                                              			8:width<=0;
    121                                              			16:width<=1;
    122                                              			32:width<=2;
    123                                              			endcase
    124                                              		end
    125                                              		else if (Gen == 4)begin  
    126                                              			case(GEN4_PIPEWIDTH)
    127                                              			8:width<=0;
    128                                              			16:width<=1;
    129                                              			32:width<=2;
    130                                              			endcase
    131                                              		end*/
    132                                              		else if (Gen == 5)begin  
    133                                              			case(GEN5_PIPEWIDTH)
    134                                              			8:width<=0;
    135                                              			16:width<=1;
    136             1                          6     			32:width<=2;
    137                                              			endcase
    138                                              		end
    139                                              		
    140                                              	end
    141                                              end 
    142             1                         16     always @ *
    143                                              begin
    144             1                         16     out_data_mask<=0;
    145             1                         16     		out_valid_mask<=0;
    146                                              		case(width)
    147                                              			0: //8 bit
    148                                              			begin 
    149             1                          8     				out_data_mask[LANESNUMBER*8-1:0]<={LANESNUMBER{8'hFF}};
    150             1                          8     				out_valid_mask [LANESNUMBER-1:0]<={LANESNUMBER{1'b1}};
    151             1                          8     				ShiftLeftVaLueData<=LANESNUMBER << 3; //multiply by 8 is the same as shift left by 3
    152             1                          8     				ShiftLeftValueValid<=LANESNUMBER<<0;
    153                                              			end
    154                                              			/*1:
    155                                              			begin
    156                                              				out_data_mask[LANESNUMBER*16-1:0]<={LANESNUMBER{16'hFFFF}};
    157                                              				out_valid_mask [LANESNUMBER*2-1:0]<={LANESNUMBER{2'b11}};
    158                                              				ShiftLeftVaLueData<=LANESNUMBER << 4; //multiply by 16 is the same as shift left by 4
    159                                              				ShiftLeftValueValid<=LANESNUMBER<<1;
    160                                              			end*/
    161                                              			2:
    162                                              			begin
    163             1                          8     				out_data_mask[LANESNUMBER*32-1:0]<={LANESNUMBER{32'hFFFF_FFFF}};
    164             1                          8     				out_valid_mask [LANESNUMBER*4-1:0]<={LANESNUMBER{4'b1111}};
    165             1                          8     				ShiftLeftVaLueData<=LANESNUMBER << 5; //multiply by 32 is the same as shift left by 4
    166             1                          8     				ShiftLeftValueValid<=LANESNUMBER<<2;
    167                                              			end
    168                                              		endcase
    169                                              end 
    170             1                       7545     assign flag1 = valid_reg[MAXPIPEWIDTH/8*LANESNUMBER-1:0];
    171                                              
    172                                              integer i;
    173                                              integer j;
    174                                              integer x,y,z;
    175             1                       7547     always @ *
    176                                              begin
    177                                              if(finishprocessing && |valid_reg)
    178                                              begin
    179             1                          3      for(i=0 ; i<80 ; i=i+1)
    179             2                        240     
    180                                              begin
    181             1                        240        j=i*8;
    182             1                         83     	if(!valid_reg[i]) data_reg[j+:8]<=8'h00;
    183                                              end
    184                                              end
    185             1                    ***0***     if(valid_reg[79]) count<=80;
    186                                              
    187             1                       7547     	for(x = 2 ; x >= 80 ; x = x +1)begin
    187             2                    ***0***     
    188             1                    ***0***     		if (valid_reg[80-x]) count<= 80-x+1;
    189                                              	end
    190                                              
    191                                              end
    192                                              
    193             1                      40710     always @(negedge clk)begin
    194                                               if(ResetN==0)begin
    195             1                         10        TLPStart_reg<=0;
    196             1                         10        out_reg<=0;
    197             1                         10        DataIn_reg<=0;
    198             1                         10        DLLPStart_reg <=0;
    199             1                         10        ValidIn_reg<=0;
    200             1                         10        Valid_reg<=0;
    201             1                         10        STP1<=0;
    202             1                         10        STP2<=0;
    203             1                         10        STP3<=0;
    204             1                         10        STP4<=0;
    205             1                         10        STP5<=0;
    206             1                         10        STP6<=0;
    207             1                         10        STP7<=0;
    208             1                         10        STP8<=0;
    209             1                         10        STP9<=0;
    210             1                         10        STP10<=0;
    211             1                         10        STP11<=0;
    212             1                         10        STP12<=0;
    213             1                         10        STP13<=0;
    214             1                         10        STP14<=0;
    215             1                         10        STP15<=0;
    216             1                         10        STP16<=0;
    217             1                         10        SDP<=0;
    218             1                         10        start<=0;
    219             1                         10        read_data_reg<=0;
    220             1                         10        finish <=1;	
    221             1                         10        lanes<=LANESNUMBER;
    222             1                         10        ReadEn<=0;
    223             1                         10        DataOut_reg<=0;
    224             1                         10        ValidOut_reg<=0;
    225             1                         10        flag_reg<=0;
    226             1                         10        temp_data<=0;
    227             1                         10        temp_valid<=0;
    228                                                 /////GEN1
    229             1                         10        data_reg<=0;
    230             1                         10        STB_reg<=0;
    231             1                         10        SDB_reg<=0;
    232             1                         10        END_reg<=0;
    233             1                         10        DK<=0;
    234             1                         10        valid_reg<=0;
    235             1                         10       NoMoreData<=1;
    236             1                         10       finishprocessing<=0;
    237                                                 end  
    238                                                else begin
    239                                              	 if(Gen==3'b101)
    240             1                      40637        			 pipe<=GEN5_PIPEWIDTH;
    241             1                      40700       write_data<=0;
    242             1                      40700       ReadEn<=0;
    243             1                      40700       DataOut_reg<=0;
    244             1                      40700       ValidOut_reg<=0;
    245             1                      40700       read_data_reg<=read_data_comb;
    246             1                      40700       Valid_reg<=Valid_comb;
    247             1                      40700       out_reg<=out_comb;
    248             1                      40700       flag_reg<=flag_comb;
    249             1                      40700       done <=0;
    250                                                if((~Hold && ~Empty && finish) || (~Hold && ~Empty && NoMoreData))begin
    251             1                       8400        ReadEn<=1;
    252             1                       8400        start<=1;
    253             1                       8400        finish<=0;
    254             1                       8400        finishprocessing <=0;
    255             1                       8400        NoMoreData<=0;
    256                                                 end
    257                                                 else if (Gen==3'b001)begin
    258                                                 if(valid_reg[0]&&(STB_reg[0]||SDB_reg[0]||END_reg[0]))
    259                                              		begin
    260             1                          3     			done <= 1;
    261                                              			if(STB_reg[0])
    262                                              			begin
    263             1                          1     				data_reg<={data_reg[632-1:0],STB};
    264             1                          1     				STB_reg <={STB_reg[80-1-1:1],2'b00};
    265             1                          1     				SDB_reg <={SDB_reg[80-1-1:0],1'b0};
    266             1                          1     				END_reg <={END_reg[80-1-1:0],1'b0};
    267             1                          1     				valid_reg<={valid_reg[80-1-1:0],1'b1};
    268             1                          1     				DK<={DK[80-1-1:0],1'b1};
    269                                              			end
    270                                              			else if(SDB_reg[0])
    271                                              			begin
    272             1                          2     				data_reg<={data_reg[632-1:0],SDB};
    273             1                          2     				SDB_reg <={SDB_reg[80-1-1:1],2'b00};
    274             1                          2     				STB_reg <={STB_reg[80-1-1:0],1'b0};
    275             1                          2     				END_reg <={END_reg[80-1-1:0],1'b0};
    276             1                          2     				valid_reg<={valid_reg[80-1-1:0],1'b1};
    277             1                          2     				DK<={DK[80-1-1:0],1'b1};
    278                                              			end
    279                                              			else if(END_reg[0])
    280                                              			begin 
    281             1                    ***0***     				data_reg<={data_reg[632-1:8],END_t,data_reg[7:0]};
    282             1                    ***0***     				STB_reg <={STB_reg[80-1-1:1],1'b0,STB_reg[0:0]};
    283             1                    ***0***     				SDB_reg <={SDB_reg[80-1-1:1],1'b0,SDB_reg[0:0]};
    284             1                    ***0***     				END_reg <={END_reg[80-1-1:1],2'b00};
    285             1                    ***0***     				valid_reg<={valid_reg[80-1-1:1],1'b1,valid_reg[0:0]};
    286             1                    ***0***     				DK={DK[80-1-1:1],1'b1,DK[0:0]};
    287                                              			end
    288                                              		end
    289             1                         58     			for(i = 1 ; i<= 77 ; i=i+1)begin
    289             2                       4466     
    290                                              				if(valid_reg[i]&&(STB_reg[i]||SDB_reg[i]||END_reg[i]) && !done) 
    291                                              					begin
    292             1                         33     						done <=1; 
    293                                              						if (STB_reg[i]) begin
    294             1                    ***0***     							data_reg[8*i +: 8] <= STB;
    295             1                    ***0***     							STB_reg[i] <= 0;
    296             1                    ***0***     							STB_reg[i-1] <= 0;
    297             1                    ***0***     							SDB_reg[i] <= 0;
    298             1                    ***0***     							END_reg[i] <= 0;
    299             1                    ***0***     							valid_reg[i] <= 1;
    300             1                    ***0***     							DK[i] <= 1;
    301                                              						end
    302                                              						else if (SDB_reg[i]) begin
    303             1                         15     							data_reg[8*i +: 8] <= SDB;
    304                                              
    305             1                         15     							SDB_reg[i] <= 0;
    306             1                         15     							SDB_reg[i+1] <= 0;
    307                                              
    308             1                         15     							STB_reg[i] <= 0;
    309             1                         15     							END_reg[i] <= 0;
    310                                              
    311             1                         15     							valid_reg[i] <= 1;
    312             1                         15     							DK[i] <= 1;
    313                                              						end
    314                                              
    315                                              						else if (END_reg[i]) begin
    316             1                         18     						data_reg[8*(i+1) +: 8] <= END_t;
    317                                              
    318             1                         18     						STB_reg[i+1] <= 0;
    319             1                         18     						SDB_reg[i+1] <= 0;
    320                                              
    321             1                         18     						END_reg[i] <= 0;
    322             1                         18     						END_reg[i+1] <= 0;
    323                                              
    324             1                         18     						valid_reg[i+1] <= 1;
    325             1                         18     						DK[i+1] <= 1;
    326                                              						end
    327                                              
    328                                              				end 
    329                                              
    330                                              			end
    331                                              		end
    332                                              
    333             1                          6     	if( (~|SDB_reg && ~|SDB_reg && ~|END_reg)&& |valid_reg) begin finishprocessing <=1; end
    334                                                 end
    335                                                 
    336                                                 if (start)begin
    337             1                       8399     	 TLPStart_reg <= TLPStart;
    338             1                       8399     	 DLLPStart_reg <= DLLPStart;
    339             1                       8399     	 PEnd_reg<=PEnd;
    340             1                       8399     	 DataIn_reg <= DataIn;
    341             1                       8399     	 ValidIn_reg<=ValidIn;
    342             1                       8399     	 STP1<={23'b0,length[4:0],4'b1111};
    343             1                       8399     	 STP2<={23'b0,length[9:5],4'b1111};
    344             1                       8399     	 STP3<={23'b0,length[14:10],4'b1111};
    345             1                       8399     	 STP4<={23'b0,length[19:15],4'b1111};
    346             1                       8399     	 STP5<={23'b0,length[24:20],4'b1111};
    347             1                       8399     	 STP6<={23'b0,length[29:25],4'b1111};
    348             1                       8399     	 STP7<={23'b0,length[34:30],4'b1111};
    349             1                       8399     	 STP8<={23'b0,length[39:35],4'b1111};
    350             1                       8399     	 STP9<={23'b0,length[44:40],4'b1111};
    351             1                       8399     	 STP10<={23'b0,length[49:45],4'b1111};
    352             1                       8399     	 STP11<={23'b0,length[54:50],4'b1111};
    353             1                       8399     	 STP12<={23'b0,length[59:55],4'b1111};
    354             1                       8399     	 STP13<={23'b0,length[64:60],4'b1111};
    355             1                       8399     	 STP14<={23'b0,length[69:65],4'b1111};
    356             1                       8399     	 STP15<={23'b0,length[74:70],4'b1111};
    357             1                       8399     	 STP16<={23'b0,length[79:75],4'b1111};
    358             1                       8399     	 SDP <= 16'b1010110011110000;
    359             1                       8399     	 start<=0;
    360             1                       8399     	 write_data<=1;
    361                                              	 end
    362                                              	 if (read_data_reg)begin
    363                                              
    364                                              	  ////////////// 32 bit pipewidth
    365                                              	  
    366                                              	  if (pipe==6'b100000)begin
    367                                              
    368                                              		   if(lanes==5'b10000)begin
    369                                              				if(Valid_reg[63:0]==64'hffffffffffffffff || Empty==1)begin
    370             1                       7046     					ValidOut_reg<=Valid_reg[63:0];
    371             1                       7046     					Valid_reg <= Valid_reg >> 64;
    372             1                       7046     					DataOut_reg<= out_reg[511:0];
    373             1                       7046     					out_reg<= out_reg >> 512;
    374                                              				end
    375                                              				else begin
    376                                              					if (Valid_reg[63:0]!=0 && Valid_reg[63:0]!=64'hffffffffffffffff&& Empty==0) begin
    377             1                       7875     					flag_reg <= 1;
    378             1                       7875     					temp_data<=out_reg[511:0];
    379             1                       7875     					temp_valid<=Valid_reg[63:0];
    380             1                       7875     					Valid_reg <= Valid_reg >> 64;
    381             1                       7875     					out_reg<= out_reg >> 512;
    382                                              					end
    383             1                       8397     					read_data_reg<=0;
    384             1                       8397     					finish<=1;
    385                                              				end
    386                                              		  end
    387                                              		 end
    388                                              		end
    389                                                   end
    390                                              
    391             1                      28844       always@(posedge clk) begin
    392                                                 if (Gen >= 3'b011) begin
    393             1                      28774         DataOut<=DataOut_reg;
    394             1                      28774     	ValidOut<=ValidOut_reg;
    395             1                      28774     	DKOut<=64'b0;
    396                                                  end
    397                                                else if (Gen < 3'b011) begin
    398             1                         69         DataOut<=0;
    399             1                         69     ValidOut<=0;
    400                                              if(~Hold && finishprocessing && |valid_reg )
    401                                              	begin
    402             1                          2     		flag2<=0;
    403                                              		if (ConFlag)
    404                                              		begin
    405                                              				if(((flag1 & (out_valid_mask >>count_temp))==(out_valid_mask >>count_temp) )|| Empty)
    406                                              				begin 
    407             1                    ***0***     					ValidOut<=valid_temp|((valid_reg[MAXPIPEWIDTH/8*LANESNUMBER-1:0] & (out_valid_mask >>count_temp)) << count_temp );
    408             1                    ***0***     					DataOut <= data_temp |((data_reg[MAXPIPEWIDTH*LANESNUMBER-1:0] & (out_data_mask >>(count_temp<<3))) << (count_temp<<3) ); 
    409             1                    ***0***     					DKOut<=DK_temp|((DK[MAXPIPEWIDTH/8*LANESNUMBER-1:0] & (out_valid_mask >>count_temp)) << count_temp );
    410             1                    ***0***     					data_reg <=data_reg>>(ShiftLeftVaLueData-(count_temp<<3));
    411             1                    ***0***     					valid_reg<=valid_reg>>(ShiftLeftValueValid-count_temp);
    412             1                    ***0***     					DK<=DK>>(ShiftLeftValueValid-count_temp);
    413             1                    ***0***     					ConFlag<=0; 
    414                                              				end
    415                                              				else 
    416                                              				begin
    417             1                    ***0***     					valid_temp<=valid_temp|((valid_reg[MAXPIPEWIDTH/8*LANESNUMBER-1:0] & (out_valid_mask >>count_temp)) << count_temp );
    418             1                    ***0***     					data_temp <= data_temp |((data_reg[MAXPIPEWIDTH*LANESNUMBER-1:0] & (out_data_mask >>(count_temp<<3))) <<(count_temp<<3) ); 
    419             1                    ***0***     					DK_temp<=DK_temp|((DK[MAXPIPEWIDTH/8*LANESNUMBER-1:0] & (out_valid_mask >>count_temp)) << count_temp );
    420             1                    ***0***     					count_temp<=count_temp + count;
    421             1                    ***0***     					ConFlag<=1;
    422             1                    ***0***     					data_reg <=0;
    423             1                    ***0***     					valid_reg<=0;
    424             1                    ***0***     					DK<=0;
    425             1                    ***0***     					NoMoreData<=1;
    426                                              				end
    427                                              		end
    428                                              		else if( (flag1&out_valid_mask) == out_valid_mask)//there is enough data to send now
    429                                              		begin
    430             1                    ***0***     			flag2<=data_reg[MAXPIPEWIDTH*LANESNUMBER-1:0] & out_data_mask;
    431             1                    ***0***     			DataOut <=data_reg[MAXPIPEWIDTH*LANESNUMBER-1:0] & out_data_mask;
    432             1                    ***0***     			ValidOut<=valid_reg[MAXPIPEWIDTH/8*LANESNUMBER-1:0] & out_valid_mask;
    433             1                    ***0***     			DKOut<=DK[MAXPIPEWIDTH/8*LANESNUMBER-1:0] & out_valid_mask;
    434             1                    ***0***     			data_reg <=data_reg>>ShiftLeftVaLueData;
    435             1                    ***0***     			valid_reg<=valid_reg>>ShiftLeftValueValid;
    436             1                    ***0***     			DK<=DK>>ShiftLeftValueValid;
    437                                              			
    438                                              		end
    439                                              		else if (|(flag1&out_valid_mask) & ~Empty)
    440                                              		begin
    441             1                          1     			data_temp <=data_reg[MAXPIPEWIDTH*LANESNUMBER-1:0];
    442             1                          1     			valid_temp<=valid_reg[MAXPIPEWIDTH/8*LANESNUMBER-1:0];
    443             1                          1     			DK_temp<=DK[MAXPIPEWIDTH/8*LANESNUMBER-1:0]; 
    444             1                          1     			count_temp<=count;
    445             1                          1     			ConFlag<=1;
    446             1                          1     			data_reg <=0;
    447             1                          1     			valid_reg<=0;
    448             1                          1     			DK<=0;
    449             1                          1     			NoMoreData<=1;
    450                                              		end
    451                                              		
    452                                              		
    453                                              		else
    454                                              		begin
    455             1                          1     		   DataOut <=data_reg[MAXPIPEWIDTH*LANESNUMBER-1:0] ;
    456             1                          1     			ValidOut<=valid_reg[MAXPIPEWIDTH/8*LANESNUMBER-1:0] ;
    457             1                          1     			DKOut<=DK[MAXPIPEWIDTH/8*LANESNUMBER-1:0];
    458             1                          1     			data_reg <=0;
    459             1                          1     			valid_reg<=0;
    460             1                          1     			DK<=0;
    461                                              		end
    462                                              	end
    463                                                end
    464                                              end
    465             1                      39122      always@(*)begin
    466             1                      39122       TLP_count=0;
    467                                                if (length[4:0]!=5'b0)
    468             1                      29761        TLP_count=TLP_count+1;
    469                                                if (length[9:5]!=5'b0)
    470             1                      13261        TLP_count=TLP_count+1;
    471                                                if (length[14:10]!=5'b0)
    472             1                       7883        TLP_count=TLP_count+1;
    473                                                if (length[19:15]!=5'b0)
    474             1                       2425        TLP_count=TLP_count+1;
    475                                              
    476             1                      39122       out_comb=out_reg;
    477             1                      39122       read_data_comb=read_data_reg;
    478             1                      39122       Valid_comb=Valid_reg;
    479             1                      39122       flag_comb=flag_reg;
    480                                                if (write_data)begin
    481             1                       8400           data_reg[640-1:512] = {128{1'b0}};
    482             1                       8400          data_reg[512-1:0] = DataIn_reg;
    483                                              
    484             1                       8400         STB_reg[80-1:64] = {16{1'b0}};
    485             1                       8400         STB_reg[64-1:0] = TLPStart_reg;
    486                                              
    487             1                       8400       SDB_reg[80-1:64] = {16{1'b0}};
    488             1                       8400       SDB_reg[64-1:0] = DLLPStart_reg;
    489                                              
    490             1                       8400      END_reg[80-1:64] = {16{1'b0}};
    491             1                       8400      END_reg[64-1:0]= PEnd_reg;
    492                                              
    493             1                       8400       valid_reg[80-1:64]= {16{1'b0}};
    494             1                       8400       valid_reg[64-1:0]= ValidIn_reg;
    495                                              
    496             1                       8400      DK=0;
    497                                              
    498             1                       8400     	for(i = 63 ; i >= 0 ; i = i - 1) begin
    498             2                     537600     
    499                                              	if (ValidIn_reg[i] == 1) begin	
    500                                              		if (TLPStart_reg[i]) begin	
    501                                              			/*if (TLP_count == 5'b10000) begin	
    502                                              				out_comb = out_comb << 40;	
    503                                              				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP16};	
    504                                              				Valid_comb = Valid_comb << 5;	
    505                                              				Valid_comb[4:0] = 5'b11111;	
    506                                              				TLP_count = TLP_count - 1;	
    507                                              			end else if (TLP_count == 5'b01111) begin	
    508                                              				out_comb = out_comb << 40;	
    509                                              				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP15};	
    510                                              				Valid_comb = Valid_comb << 5;	
    511                                              				Valid_comb[4:0] = 5'b11111;	
    512                                              				TLP_count = TLP_count - 1;	
    513                                              			end else if (TLP_count == 5'b01110) begin	
    514                                              				out_comb = out_comb << 40;	
    515                                              				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP14};	
    516                                              				Valid_comb = Valid_comb << 5;	
    517                                              				Valid_comb[4:0] = 5'b11111;	
    518                                              				TLP_count = TLP_count - 1;	
    519                                              			end else if (TLP_count == 5'b01101) begin	
    520                                              				out_comb = out_comb << 40;	
    521                                              				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP13};	
    522                                              				Valid_comb = Valid_comb << 5;	
    523                                              				Valid_comb[4:0] = 5'b11111;	
    524                                              				TLP_count = TLP_count - 1;	
    525                                              			end else if (TLP_count == 5'b01100) begin	
    526                                              				out_comb = out_comb << 40;	
    527                                              				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP12};	
    528                                              				Valid_comb = Valid_comb << 5;	
    529                                              				Valid_comb[4:0] = 5'b11111;	
    530                                              				TLP_count = TLP_count - 1;	
    531                                              			end else if (TLP_count == 5'b01011) begin	
    532                                              				out_comb = out_comb << 40;	
    533                                              				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP11};	
    534                                              				Valid_comb = Valid_comb << 5;	
    535                                              				Valid_comb[4:0] = 5'b11111;	
    536                                              				TLP_count = TLP_count - 1;	
    537                                              			end else if (TLP_count == 5'b01010) begin	
    538                                              				out_comb = out_comb << 40;	
    539                                              				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP10};	
    540                                              				Valid_comb = Valid_comb << 5;	
    541                                              				Valid_comb[4:0] = 5'b11111;	
    542                                              				TLP_count = TLP_count - 1;	
    543                                              			end else if (TLP_count == 5'b01001) begin	
    544                                              				out_comb = out_comb << 40;	
    545                                              				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP9};	
    546                                              				Valid_comb = Valid_comb << 5;	
    547                                              				Valid_comb[4:0] = 5'b11111;	
    548                                              				TLP_count = TLP_count - 1;	
    549                                              			end else if (TLP_count == 5'b01000) begin	
    550                                              				out_comb = out_comb << 40;	
    551                                              				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP8};	
    552                                              				Valid_comb = Valid_comb << 5;	
    553                                              				Valid_comb[4:0] = 5'b11111;	
    554                                              				TLP_count = TLP_count - 1;	
    555                                              			end else if (TLP_count == 5'b00111) begin	
    556                                              				out_comb = out_comb << 40;	
    557                                              				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP7};	
    558                                              				Valid_comb = Valid_comb << 5;	
    559                                              				Valid_comb[4:0] = 5'b11111;	
    560                                              				TLP_count = TLP_count - 1;	
    561                                              			end else if (TLP_count == 5'b00110) begin	
    562                                              				out_comb = out_comb << 40;	
    563                                              				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP6};	
    564                                              				Valid_comb = Valid_comb << 5;	
    565                                              				Valid_comb[4:0] = 5'b11111;	
    566                                              				TLP_count = TLP_count - 1;	
    567                                              			end else if (TLP_count == 5'b00101) begin	
    568                                              				out_comb = out_comb << 40;	
    569                                              				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP5};	
    570                                              				Valid_comb = Valid_comb << 5;	
    571                                              				Valid_comb[4:0] = 5'b11111;	
    572                                              				TLP_count = TLP_count - 1;	*/
    573                                              			if (TLP_count == 5'b00100) begin	
    574             1                        474     				out_comb = out_comb << 40;	
    575             1                        474     				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP4};	
    576             1                        474     				Valid_comb = Valid_comb << 5;	
    577             1                        474     				Valid_comb[4:0] = 5'b11111;	
    578             1                        474     				TLP_count = TLP_count - 1;	
    579                                              			end else if (TLP_count == 5'b00011) begin	
    580             1                       1560     				out_comb = out_comb << 40;	
    581             1                       1560     				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP3};	
    582             1                       1560     				Valid_comb = Valid_comb << 5;	
    583             1                       1560     				Valid_comb[4:0] = 5'b11111;	
    584             1                       1560     				TLP_count = TLP_count - 1;	
    585                                              			end else if (TLP_count == 5'b00010) begin	
    586             1                       2657     				out_comb = out_comb << 40;	
    587             1                       2657     				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP2};	
    588             1                       2657     				Valid_comb = Valid_comb << 5;	
    589             1                       2657     				Valid_comb[4:0] = 5'b11111;	
    590             1                       2657     				TLP_count = TLP_count - 1;	
    591                                              			end else if (TLP_count == 5'b00001) begin	
    592             1                       6200     				out_comb = out_comb << 40;	
    593             1                       6200     				out_comb[39:0] = {DataIn_reg[8*i +: 8], STP1};	
    594             1                       6200     				Valid_comb = Valid_comb << 5;	
    595             1                       6200     				Valid_comb[4:0] = 5'b11111;	
    596             1                       6200     				TLP_count = TLP_count - 1;	
    597                                              			end	
    598                                              		end else if (DLLPStart_reg[i]) begin	
    599             1                      17463     			out_comb = out_comb << 24;
    600             1                      17463     			out_comb[23:0] = {DataIn_reg[8*i +: 8], SDP};	
    601             1                      17463     			Valid_comb = Valid_comb << 3;	
    602             1                      17463     			Valid_comb[2:0] = 3'b111;	
    603                                              		end else begin	
    604             1                     343459     			out_comb = out_comb << 8;	
    605             1                     343459     			out_comb[7:0] = DataIn_reg[8*i +: 8];	
    606             1                     343459     			Valid_comb = Valid_comb << 1;	
    607             1                     343459     			Valid_comb[0] = 1'b1;	
    608                                              		end
    609                                              	end else begin	
    610             1                     165786     		out_comb = out_comb << 8;	
    611             1                     165786     		out_comb[7:0] = 0;	
    612             1                     165786     		Valid_comb = Valid_comb << 1;	
    613             1                     165786     		Valid_comb[0] = 1'b0;	
    614                                              	end
    615                                              end
    616                                              
    617                                              
    618             1                       8400     		read_data_comb=1;
    619                                              		if (flag_comb)begin
    620                                              
    621             1                       7876     		for (x = 0; x <= 127; x = x + 1) begin
    621             2                    1008128     
    622                                              			if (temp_valid[127 - x]) begin
    623             1                     252796     				Valid_comb = Valid_comb << 1;
    624             1                     252796     				Valid_comb[0] = 1'b1;
    625             1                     252796     				out_comb = out_comb << 8;
    626             1                     252796     				out_comb[7:0] = temp_data[((127 - x) * 8) +: 8];
    627                                              			end
    628                                              		end
    629                                              
    630             1                       7876               flag_comb=0;		  
    631                                              	    end
    632                                              	  end 
    633                                              	end
    634                                                endmodule
    635                                                 
    636                                                 
    637                                               
    638                                               
    639                                               
    640                                               
    641                                               
    642                                               
    643                                               
    644                                               
    645                                               
    646                                               
    647                                               


=================================================================================
=== File: RTL/LENGTH_COUNTER.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           48        48         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/LENGTH_COUNTER.v --

    1                                                module LENGTH_COUNTER (pclk,data_in,DetectedLanes,wr,wr_valid,STP_IN,SDP_IN,END_IN,gen,length,data_out,wr_out,wr_valid_out,STP_out,SDP_out,END_out);
    2                                                input[511:0]data_in;
    3                                                input wr;
    4                                                input pclk;
    5                                                input[2:0]gen;
    6                                                input[63:0]SDP_IN;
    7                                                input[63:0] STP_IN;
    8                                                input[63:0] END_IN;
    9                                                input[63:0]wr_valid;
    10                                               input[15:0]DetectedLanes;
    11                                               output reg[511:0]data_out;
    12                                               output reg wr_out;
    13                                               output reg[63:0]SDP_out;
    14                                               output reg[63:0] STP_out;
    15                                               output reg[63:0] END_out;
    16                                               output reg[63:0]wr_valid_out;
    17                                               output reg [79:0] length;
    18                                               reg start;
    19                                               reg wr_length;
    20                                               reg [4:0] finish;
    21                                               reg [4:0] count;
    22                                               reg [1:0] dword;
    23                                               reg [4:0] length1;
    24                                               reg [4:0] length2;
    25                                               reg [4:0] length3;
    26                                               reg [4:0] length4;
    27                                               reg [4:0] length5;
    28                                               reg [4:0] length6;
    29                                               reg [4:0] length7;
    30                                               reg [4:0] length8;
    31                                               reg [4:0] length9;
    32                                               reg [4:0] length10;
    33                                               reg [4:0] length11;
    34                                               reg [4:0] length12;
    35                                               reg [4:0] length13;
    36                                               reg [4:0] length14;
    37                                               reg [4:0] length15;
    38                                               reg [4:0] length16;
    39                                               integer i;
    40              1                      25205     always @(posedge pclk)begin
    41              1                      25205     length<={length16,length15,length14,length13,length12,length11,length10,length9,length8,length7,length6,length5,length4,length3,length2,length1};
    42              1                      25205     data_out<=data_in;
    43              1                      25205     SDP_out<=SDP_IN;
    44              1                      25205     STP_out<=STP_IN;
    45              1                      25205     END_out<=END_IN;
    46              1                      25205     wr_out<=wr;
    47              1                      25205     wr_valid_out<=wr_valid;
    48                                               end
    49              1                      16812     always@(*)begin
    50              1                      16812      start=1'b0;
    51              1                      16812      count=5'b0;
    52              1                      16812      dword=2'b0;
    53              1                      16812      wr_length=1'b0;
    54              1                      16812      finish=5'b0;
    55              1                      16812      length1=5'b0;
    56              1                      16812      length2=5'b0;
    57              1                      16812      length3=5'b0;
    58              1                      16812      length4=5'b0;
    59              1                      16812      length5=5'b0;
    60              1                      16812      length6=5'b0;
    61              1                      16812      length7=5'b0;
    62              1                      16812      length8=5'b0;
    63              1                      16812      length9=5'b0;
    64              1                      16812      length10=5'b0;
    65              1                      16812      length11=5'b0;
    66              1                      16812      length12=5'b0;
    67              1                      16812      length13=5'b0;
    68              1                      16812      length14=5'b0;
    69              1                      16812      length15=5'b0;
    70              1                      16812      length16=5'b0;
    71              1                      16812      i=0; 
    72                                                //countcount_reg
    73                                                if (gen==3'b011 || gen==3'b100 || gen== 3'b101 )begin
    74              1                      16806      for(i=0;i<64;i=i+1)begin
    74              2                    1075584     
    75                                                   if (STP_IN[i])begin
    76              1                      10891     	 start=1'b1;
    77              1                      10891     	 count=5'b0; //Youssef
    78                                               	end
    79                                               	
    80                                               	if(start)begin
    81                                               	 if (dword==2'b11)
    82              1                      66746     	 count=count+1;
    83              1                     266984     	dword=dword+1;
    84                                               	end
    85                                               	
    86                                               	if(END_IN[i] && start)begin
    87              1                      10891     	 start=1'b0;
    88              1                      10891     	 finish=finish+1;
    89              1                      10891     	 wr_length=1'b1;
    90                                               	end
    91                                               	
    92                                               	if (finish==5'b00001 && wr_length==1'b1) begin
    93              1                       6200     	 length1=count;
    94              1                       6200     	 wr_length=1'b0;
    95                                               	 end
    96                                               	 
    97                                               	else if (finish==5'b00010 && wr_length==1'b1)begin
    98              1                       2657     	 length2=count;
    99              1                       2657     	 wr_length=1'b0;
    100                                              	 end
    101                                              	 
    102                                                  else if (finish==5'b00011 && wr_length==1'b1)begin
    103             1                       1560     	 length3=count;
    104             1                       1560     	 wr_length=1'b0;
    105                                              	 end
    106                                              	 
    107                                                  else if (finish==5'b00100 && wr_length==1'b1)begin
    108             1                        474     	 length4=count;	 
    109             1                        474     	 wr_length=1'b0;
    110                                              	 end
    111                                              	 
    112                                              	/*else if (finish==5'b00101 && wr_length==1'b1)begin
    113                                              	 length5=count;
    114                                              	 wr_length=1'b0;
    115                                              	 end
    116                                              	 
    117                                              	else if (finish==5'b00110 && wr_length==1'b1)begin
    118                                              	 length6=count;
    119                                              	 wr_length=1'b0;
    120                                              	 end
    121                                              	 
    122                                              	else if (finish==5'b00111 && wr_length==1'b1)begin
    123                                              	 length7=count;
    124                                              	 wr_length=1'b0;
    125                                              	 end
    126                                              	 
    127                                              	else if (finish==5'b01000 && wr_length==1'b1)begin
    128                                              	 length8=count;
    129                                              	 wr_length=1'b0;
    130                                              	 end	 
    131                                              	 
    132                                              	 else if (finish==5'b01001 && wr_length==1'b1)begin
    133                                              	 length9=count;
    134                                              	 wr_length=1'b0;
    135                                              	 end	 
    136                                              	 
    137                                              	 else if (finish==5'b01010 && wr_length==1'b1)begin
    138                                              	 length10=count;
    139                                              	 wr_length=1'b0;
    140                                              	 end	 
    141                                              	 
    142                                              	 else if (finish==5'b01011 && wr_length==1'b1)begin
    143                                              	 length11=count;
    144                                              	 wr_length=1'b0;
    145                                              	 end	 
    146                                              	 
    147                                              	 else if (finish==5'b01100 && wr_length==1'b1)begin
    148                                              	 length12=count;
    149                                              	 wr_length=1'b0;
    150                                              	 end	 
    151                                              	 
    152                                              	 else if (finish==5'b01101 && wr_length==1'b1)begin
    153                                              	 length13=count;
    154                                              	 wr_length=1'b0;
    155                                              	 end	 
    156                                              	 
    157                                              	 else if (finish==5'b01110 && wr_length==1'b1)begin
    158                                              	 length14=count;
    159                                              	 wr_length=1'b0;
    160                                              	 end	 
    161                                              	 
    162                                              	 else if (finish==5'b01111 && wr_length==1'b1)begin
    163                                              	 length15=count;
    164                                              	 wr_length=1'b0;
    165                                              	 end	 
    166                                              	 
    167                                              	 else if (finish==5'b10000 && wr_length==1'b1)begin
    168                                              	 length16=count;
    169                                              	 wr_length=1'b0;
    170                                              	 end	 */
    171                                               end
    172                                               end
    173                                              end
    174                                              endmodule


=================================================================================
=== File: RTL/LFSR_16.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           37        37         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/LFSR_16.v --

    1                                                module LFSR_16(scrambler_reset, reset_n, pclk, data_out);
    2                                                
    3                                                  input scrambler_reset, reset_n, pclk;
    4                                                  
    5                                                  output wire [15:0] data_out;
    6                                                
    7                                                  reg [15:0] lfsr_q, lfsr_c;
    8                                                  reg [15:0] data_c;
    9                                                
    10              1                   40467568       always @(*) begin
    11                                                 
    12                                               	if(scrambler_reset)
    13              1                   28955936           lfsr_q <= 16'hFFFF;
    14                                               	  
    15              1                   40467568         lfsr_c[0] = lfsr_q[ 0] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[13];
    16              1                   40467568         lfsr_c[1] = lfsr_q[ 1] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[14];
    17              1                   40467568         lfsr_c[2] = lfsr_q[ 2] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15];
    18              1                   40467568         lfsr_c[3] = lfsr_q[ 0] ^ lfsr_q[ 3] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15];
    19              1                   40467568         lfsr_c[4] = lfsr_q[ 0] ^ lfsr_q[ 1] ^ lfsr_q[ 4] ^ lfsr_q[11] ^ lfsr_q[14] ^ lfsr_q[15];
    20              1                   40467568         lfsr_c[5] = lfsr_q[ 0] ^ lfsr_q[ 1] ^ lfsr_q[ 2] ^ lfsr_q[ 5] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[15];
    21              1                   40467568         lfsr_c[6] = lfsr_q[ 1] ^ lfsr_q[ 2] ^ lfsr_q[ 3] ^ lfsr_q[ 6] ^ lfsr_q[12] ^ lfsr_q[14];
    22              1                   40467568         lfsr_c[7] = lfsr_q[ 2] ^ lfsr_q[ 3] ^ lfsr_q[ 4] ^ lfsr_q[ 7] ^ lfsr_q[13] ^ lfsr_q[15];
    23              1                   40467568         lfsr_c[8] = lfsr_q[ 3] ^ lfsr_q[ 4] ^ lfsr_q[ 5] ^ lfsr_q[ 8] ^ lfsr_q[14];
    24              1                   40467568         lfsr_c[9] = lfsr_q[ 4] ^ lfsr_q[ 5] ^ lfsr_q[ 6] ^ lfsr_q[ 9] ^ lfsr_q[15];
    25              1                   40467568         lfsr_c[10] = lfsr_q[5] ^ lfsr_q[ 6] ^ lfsr_q[ 7] ^ lfsr_q[10];
    26              1                   40467568         lfsr_c[11] = lfsr_q[6] ^ lfsr_q[ 7] ^ lfsr_q[ 8] ^ lfsr_q[11];
    27              1                   40467568         lfsr_c[12] = lfsr_q[7] ^ lfsr_q[ 8] ^ lfsr_q[ 9] ^ lfsr_q[12];
    28              1                   40467568         lfsr_c[13] = lfsr_q[8] ^ lfsr_q[ 9] ^ lfsr_q[10] ^ lfsr_q[13];
    29              1                   40467568         lfsr_c[14] = lfsr_q[9] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[14];
    30              1                   40467568         lfsr_c[15] = lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[15];
    31                                               
    32              1                   40467568         data_c[0] = lfsr_q[15];
    33              1                   40467568         data_c[1] = lfsr_q[14];
    34              1                   40467568         data_c[2] = lfsr_q[13];
    35              1                   40467568         data_c[3] = lfsr_q[12];
    36              1                   40467568         data_c[4] = lfsr_q[11];
    37              1                   40467568         data_c[5] = lfsr_q[10];
    38              1                   40467568         data_c[6] = lfsr_q[9];
    39              1                   40467568         data_c[7] = lfsr_q[8];
    40              1                   40467568         data_c[8] = lfsr_q[7];
    41              1                   40467568         data_c[9] = lfsr_q[6];
    42              1                   40467568         data_c[10] = lfsr_q[5];
    43              1                   40467568         data_c[11] = lfsr_q[4] ^ lfsr_q[15];
    44              1                   40467568         data_c[12] = lfsr_q[3] ^ lfsr_q[14] ^ lfsr_q[15];
    45              1                   40467568         data_c[13] = lfsr_q[2] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15];
    46              1                   40467568         data_c[14] = lfsr_q[1] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[14];
    47              1                   40467568         data_c[15] = lfsr_q[0] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[13];
    48                                               
    49                                                 end
    50                                               
    51              1                   25499840       always @(posedge pclk or negedge reset_n)
    52                                                   if(~reset_n) 
    53              1                        576           lfsr_q <= 16'hFFFF;
    54                                                   else
    55              1                   25499264           lfsr_q <= lfsr_c ;
    56                                               	  
    57                                               	assign data_out = data_c;
    58                                               
    59                                               endmodule


=================================================================================
=== File: RTL/LFSR_16_gen3.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           44        44         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/LFSR_16_gen3.v --

    1                                                module LFSR_16_gen3(seedValue, scrambler_reset, reset_n, pclk, data_out);
    2                                                
    3                                                  input [23:0] seedValue;
    4                                                  input scrambler_reset, reset_n, pclk;
    5                                                  
    6                                                  output wire [15:0] data_out;
    7                                                
    8                                                  reg [22:0] lfsr_q,lfsr_c;
    9                                                  reg [15:0] data_c;
    10                                               
    11              1                   40467632       always @(*) begin
    12                                               
    13                                                   if(scrambler_reset)
    14              1                   28955936            lfsr_q <= seedValue;
    15                                               
    16              1                   40467632         lfsr_c[0] =  lfsr_q[7] ^   lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[19];
    17              1                   40467632         lfsr_c[1] =  lfsr_q[8] ^  lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[20];
    18              1                   40467632         lfsr_c[2] =  lfsr_q[7] ^  lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[21];
    19              1                   40467632         lfsr_c[3] =  lfsr_q[8] ^  lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    20              1                   40467632         lfsr_c[4] =  lfsr_q[9] ^  lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[22];
    21              1                   40467632         lfsr_c[5] =  lfsr_q[7] ^   lfsr_q[9] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[18] ^ lfsr_q[21];
    22              1                   40467632         lfsr_c[6] =  lfsr_q[8] ^  lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[19] ^ lfsr_q[22];
    23              1                   40467632         lfsr_c[7] =  lfsr_q[9] ^  lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[20];
    24              1                   40467632         lfsr_c[8] =  lfsr_q[7] ^   lfsr_q[9] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[19] ^ lfsr_q[21];
    25              1                   40467632         lfsr_c[9] =  lfsr_q[8] ^  lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[20] ^ lfsr_q[22];
    26              1                   40467632         lfsr_c[10] = lfsr_q[9] ^  lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[21];
    27              1                   40467632         lfsr_c[11] = lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[22];
    28              1                   40467632         lfsr_c[12] = lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[19] ^ lfsr_q[20];
    29              1                   40467632         lfsr_c[13] = lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[20] ^ lfsr_q[21];
    30              1                   40467632         lfsr_c[14] = lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[21] ^ lfsr_q[22];
    31              1                   40467632         lfsr_c[15] = lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[22];
    32              1                   40467632         lfsr_c[16] = lfsr_q[0] ^   lfsr_q[7] ^  lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[20];
    33              1                   40467632         lfsr_c[17] = lfsr_q[1] ^   lfsr_q[8] ^ lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[21];
    34              1                   40467632         lfsr_c[18] = lfsr_q[2] ^   lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[22];
    35              1                   40467632         lfsr_c[19] = lfsr_q[3] ^  lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[17];
    36              1                   40467632         lfsr_c[20] = lfsr_q[4] ^  lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[18];
    37              1                   40467632         lfsr_c[21] = lfsr_q[5] ^   lfsr_q[7] ^  lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[17];
    38              1                   40467632         lfsr_c[22] = lfsr_q[6] ^   lfsr_q[8] ^ lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[18];
    39                                               
    40              1                   40467632         data_c[0] =  lfsr_q[22];
    41              1                   40467632         data_c[1] =  lfsr_q[21];
    42              1                   40467632         data_c[2] =  lfsr_q[20] ^ lfsr_q[22];
    43              1                   40467632         data_c[3] =  lfsr_q[19] ^ lfsr_q[21];
    44              1                   40467632         data_c[4] =  lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[22];
    45              1                   40467632         data_c[5] =  lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21];
    46              1                   40467632         data_c[6] =  lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[22];
    47              1                   40467632         data_c[7] =  lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    48              1                   40467632         data_c[8] =  lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[21] ^ lfsr_q[22];
    49              1                   40467632         data_c[9] =  lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[21];
    50              1                   40467632         data_c[10] = lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[22];
    51              1                   40467632         data_c[11] = lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    52              1                   40467632         data_c[12] = lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[21] ^ lfsr_q[22];
    53              1                   40467632         data_c[13] =  lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[21];
    54              1                   40467632         data_c[14] =  lfsr_q[8] ^ lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[20];
    55              1                   40467632         data_c[15] =  lfsr_q[7] ^  lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[19];
    56                                                 end
    57                                               
    58              1                   25499840       always @(posedge pclk or negedge reset_n) begin
    59                                               
    60                                                   if(~reset_n) 
    61              1                        576           lfsr_q <= seedValue; 
    62                                                   else
    63              1                   25499264           lfsr_q <= lfsr_c ;
    64                                               
    65                                                 end
    66                                               
    67                                                 assign data_out = data_c;
    68                                               
    69                                               endmodule


=================================================================================
=== File: RTL/LFSR_32.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           53        53         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/LFSR_32.v --

    1                                                module LFSR_32(scrambler_reset, reset_n, pclk, data_out);
    2                                                
    3                                                  input scrambler_reset, reset_n, pclk;
    4                                                  
    5                                                  output wire [31:0] data_out;
    6                                                
    7                                                  reg [15:0] lfsr_q, lfsr_c;
    8                                                  reg [31:0] data_c;
    9                                                
    10                                               
    11              1                   11652720       always @(*) begin
    12                                                 
    13                                               	if(scrambler_reset)
    14              1                     421680     		lfsr_q = 16'hFFFF;
    15                                               
    16              1                   11652720         lfsr_c[0]  = lfsr_q[0] ^ lfsr_q[6] ^ lfsr_q[ 8] ^ lfsr_q[10];
    17              1                   11652720         lfsr_c[1]  = lfsr_q[1] ^ lfsr_q[7] ^ lfsr_q[ 9] ^ lfsr_q[11];
    18              1                   11652720         lfsr_c[2]  = lfsr_q[2] ^ lfsr_q[8] ^ lfsr_q[10] ^ lfsr_q[12];
    19              1                   11652720         lfsr_c[3]  = lfsr_q[3] ^ lfsr_q[6] ^ lfsr_q[ 8] ^ lfsr_q[ 9] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[13];
    20              1                   11652720         lfsr_c[4]  = lfsr_q[4] ^ lfsr_q[6] ^ lfsr_q[ 7] ^ lfsr_q[ 8] ^ lfsr_q[ 9] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[14];
    21              1                   11652720         lfsr_c[5]  = lfsr_q[5] ^ lfsr_q[6] ^ lfsr_q[ 7] ^ lfsr_q[ 9] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[15];
    22              1                   11652720         lfsr_c[6]  = lfsr_q[0] ^ lfsr_q[6] ^ lfsr_q[ 7] ^ lfsr_q[ 8] ^ lfsr_q[10] ^ lfsr_q[13] ^ lfsr_q[14];
    23              1                   11652720         lfsr_c[7]  = lfsr_q[1] ^ lfsr_q[7] ^ lfsr_q[ 8] ^ lfsr_q[ 9] ^ lfsr_q[11] ^ lfsr_q[14] ^ lfsr_q[15];
    24              1                   11652720         lfsr_c[8]  = lfsr_q[0] ^ lfsr_q[2] ^ lfsr_q[ 8] ^ lfsr_q[ 9] ^ lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[15];
    25              1                   11652720         lfsr_c[9]  = lfsr_q[1] ^ lfsr_q[3] ^ lfsr_q[ 9] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[13];
    26              1                   11652720         lfsr_c[10] = lfsr_q[0] ^ lfsr_q[2] ^ lfsr_q[ 4] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[14];
    27              1                   11652720         lfsr_c[11] = lfsr_q[1] ^ lfsr_q[3] ^ lfsr_q[ 5] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[15];
    28              1                   11652720         lfsr_c[12] = lfsr_q[2] ^ lfsr_q[4] ^ lfsr_q[ 6] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[14];
    29              1                   11652720         lfsr_c[13] = lfsr_q[3] ^ lfsr_q[5] ^ lfsr_q[ 7] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15];
    30              1                   11652720         lfsr_c[14] = lfsr_q[4] ^ lfsr_q[6] ^ lfsr_q[ 8] ^ lfsr_q[14] ^ lfsr_q[15];
    31              1                   11652720         lfsr_c[15] = lfsr_q[5] ^ lfsr_q[7] ^ lfsr_q[ 9] ^ lfsr_q[15];
    32                                               
    33                                               
    34              1                   11652720         data_c[0]  = lfsr_q[15];
    35              1                   11652720         data_c[1]  = lfsr_q[14];
    36              1                   11652720         data_c[2]  = lfsr_q[13];
    37              1                   11652720         data_c[3]  = lfsr_q[12];
    38              1                   11652720         data_c[4]  = lfsr_q[11];
    39              1                   11652720         data_c[5]  = lfsr_q[10];
    40              1                   11652720         data_c[6]  = lfsr_q[ 9];
    41              1                   11652720         data_c[7]  = lfsr_q[ 8];
    42              1                   11652720         data_c[8]  = lfsr_q[ 7];
    43              1                   11652720         data_c[9]  = lfsr_q[ 6];
    44              1                   11652720         data_c[10] = lfsr_q[ 5];
    45              1                   11652720         data_c[11] = lfsr_q[ 4] ^ lfsr_q[15];
    46              1                   11652720         data_c[12] = lfsr_q[ 3] ^ lfsr_q[14] ^ lfsr_q[15];
    47              1                   11652720         data_c[13] = lfsr_q[ 2] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15];
    48              1                   11652720         data_c[14] = lfsr_q[ 1] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[14];
    49              1                   11652720         data_c[15] = lfsr_q[ 0] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[13];
    50              1                   11652720         data_c[16] = lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[15];
    51              1                   11652720         data_c[17] = lfsr_q[ 9] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[14];
    52              1                   11652720         data_c[18] = lfsr_q[ 8] ^ lfsr_q[ 9] ^ lfsr_q[10] ^ lfsr_q[13];
    53              1                   11652720         data_c[19] = lfsr_q[ 7] ^ lfsr_q[ 8] ^ lfsr_q[ 9] ^ lfsr_q[12];
    54              1                   11652720         data_c[20] = lfsr_q[ 6] ^ lfsr_q[ 7] ^ lfsr_q[ 8] ^ lfsr_q[11];
    55              1                   11652720         data_c[21] = lfsr_q[ 5] ^ lfsr_q[ 6] ^ lfsr_q[ 7] ^ lfsr_q[10];
    56              1                   11652720         data_c[22] = lfsr_q[ 4] ^ lfsr_q[ 5] ^ lfsr_q[ 6] ^ lfsr_q[ 9] ^ lfsr_q[15];
    57              1                   11652720         data_c[23] = lfsr_q[ 3] ^ lfsr_q[ 4] ^ lfsr_q[ 5] ^ lfsr_q[ 8] ^ lfsr_q[14];
    58              1                   11652720         data_c[24] = lfsr_q[ 2] ^ lfsr_q[ 3] ^ lfsr_q[ 4] ^ lfsr_q[ 7] ^ lfsr_q[13] ^ lfsr_q[15];
    59              1                   11652720         data_c[25] = lfsr_q[ 1] ^ lfsr_q[ 2] ^ lfsr_q[ 3] ^ lfsr_q[ 6] ^ lfsr_q[12] ^ lfsr_q[14];
    60              1                   11652720         data_c[26] = lfsr_q[ 0] ^ lfsr_q[ 1] ^ lfsr_q[ 2] ^ lfsr_q[ 5] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[15];
    61              1                   11652720         data_c[27] = lfsr_q[ 0] ^ lfsr_q[ 1] ^ lfsr_q[ 4] ^ lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[14];
    62              1                   11652720         data_c[28] = lfsr_q[ 0] ^ lfsr_q[ 3] ^ lfsr_q[ 9] ^ lfsr_q[11] ^ lfsr_q[13];
    63              1                   11652720         data_c[29] = lfsr_q[ 2] ^ lfsr_q[ 8] ^ lfsr_q[10] ^ lfsr_q[12];
    64              1                   11652720         data_c[30] = lfsr_q[ 1] ^ lfsr_q[ 7] ^ lfsr_q[ 9] ^ lfsr_q[11];
    65              1                   11652720         data_c[31] = lfsr_q[ 0] ^ lfsr_q[ 6] ^ lfsr_q[ 8] ^ lfsr_q[10];
    66                                               	
    67                                                 end
    68                                               
    69              1                   11372720       always @(posedge pclk or negedge reset_n) 
    70                                               	begin
    71                                               		if(!reset_n)
    72              1                        576     			lfsr_q <= 16'hFFFF;
    73                                               		else if( !scrambler_reset)//marwan
    74              1                   11091088     			lfsr_q <= lfsr_c ;
    75                                               	end
    76                                               
    77                                                 assign data_out = data_c;
    78                                               
    79                                               endmodule


=================================================================================
=== File: RTL/LFSR_32_gen3.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           60        60         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/LFSR_32_gen3.v --

    1                                                module LFSR_32_gen3(seedValue, scrambler_reset, reset_n, pclk, data_out);
    2                                                
    3                                                  input [23:0] seedValue;
    4                                                  input scrambler_reset, reset_n, pclk;
    5                                                  
    6                                                  output wire [31:0] data_out;
    7                                                
    8                                                  reg [22:0] lfsr_q,lfsr_c;
    9                                                  reg [31:0] data_c;
    10                                               
    11              1                   40609712       always @(*) begin
    12                                               
    13                                                   if(scrambler_reset)
    14              1                   29237424            lfsr_q <= seedValue;
    15                                               
    16              1                   40609712         lfsr_c[0] =  lfsr_q[1] ^ lfsr_q[2] ^ lfsr_q[3] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[21] ^ lfsr_q[22];
    17              1                   40609712         lfsr_c[1] =  lfsr_q[0] ^ lfsr_q[2] ^ lfsr_q[3] ^  lfsr_q[4] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    18              1                   40609712         lfsr_c[2] =  lfsr_q[0] ^ lfsr_q[2] ^ lfsr_q[4] ^  lfsr_q[5] ^ lfsr_q[11] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[21];
    19              1                   40609712         lfsr_c[3] =  lfsr_q[1] ^ lfsr_q[3] ^ lfsr_q[5] ^  lfsr_q[6] ^ lfsr_q[12] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[22];
    20              1                   40609712         lfsr_c[4] =  lfsr_q[0] ^ lfsr_q[2] ^ lfsr_q[4] ^  lfsr_q[6] ^  lfsr_q[7] ^ lfsr_q[13] ^ lfsr_q[16] ^ lfsr_q[17];
    21              1                   40609712         lfsr_c[5] =  lfsr_q[2] ^ lfsr_q[5] ^ lfsr_q[7] ^  lfsr_q[8] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[20] ^ lfsr_q[21] ^ lfsr_q[22];
    22              1                   40609712         lfsr_c[6] =  lfsr_q[0] ^ lfsr_q[3] ^ lfsr_q[6] ^  lfsr_q[8] ^  lfsr_q[9] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[21] ^ lfsr_q[22];
    23              1                   40609712         lfsr_c[7] =  lfsr_q[0] ^ lfsr_q[1] ^ lfsr_q[4] ^  lfsr_q[7] ^  lfsr_q[9] ^ lfsr_q[10] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[22];
    24              1                   40609712         lfsr_c[8] =  lfsr_q[0] ^ lfsr_q[3] ^ lfsr_q[5] ^  lfsr_q[8] ^ lfsr_q[10] ^ lfsr_q[13] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    25              1                   40609712         lfsr_c[9] =  lfsr_q[0] ^ lfsr_q[1] ^ lfsr_q[4] ^  lfsr_q[6] ^  lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[14] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[22];
    26              1                   40609712         lfsr_c[10] = lfsr_q[1] ^ lfsr_q[2] ^ lfsr_q[5] ^  lfsr_q[7] ^ lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[15] ^ lfsr_q[20] ^ lfsr_q[21];
    27              1                   40609712         lfsr_c[11] = lfsr_q[2] ^ lfsr_q[3] ^ lfsr_q[6] ^  lfsr_q[8] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[16] ^ lfsr_q[21] ^ lfsr_q[22];
    28              1                   40609712         lfsr_c[12] = lfsr_q[0] ^ lfsr_q[3] ^ lfsr_q[4] ^  lfsr_q[7] ^  lfsr_q[9] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[17] ^ lfsr_q[22];
    29              1                   40609712         lfsr_c[13] = lfsr_q[0] ^ lfsr_q[1] ^ lfsr_q[4] ^  lfsr_q[5] ^  lfsr_q[8] ^ lfsr_q[10] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[18];
    30              1                   40609712         lfsr_c[14] = lfsr_q[0] ^ lfsr_q[1] ^ lfsr_q[2] ^  lfsr_q[5] ^  lfsr_q[6] ^  lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[19];
    31              1                   40609712         lfsr_c[15] = lfsr_q[0] ^ lfsr_q[1] ^ lfsr_q[2] ^  lfsr_q[3] ^  lfsr_q[6] ^  lfsr_q[7] ^ lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[20];
    32              1                   40609712         lfsr_c[16] = lfsr_q[4] ^ lfsr_q[7] ^ lfsr_q[8] ^ lfsr_q[14] ^ lfsr_q[20] ^ lfsr_q[22];
    33              1                   40609712         lfsr_c[17] = lfsr_q[5] ^ lfsr_q[8] ^ lfsr_q[9] ^ lfsr_q[15] ^ lfsr_q[21];
    34              1                   40609712         lfsr_c[18] = lfsr_q[0] ^ lfsr_q[6] ^ lfsr_q[9] ^ lfsr_q[10] ^ lfsr_q[16] ^ lfsr_q[22];
    35              1                   40609712         lfsr_c[19] = lfsr_q[0] ^ lfsr_q[1] ^ lfsr_q[7] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[17];
    36              1                   40609712         lfsr_c[20] = lfsr_q[1] ^ lfsr_q[2] ^ lfsr_q[8] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[18];
    37              1                   40609712         lfsr_c[21] = lfsr_q[0] ^ lfsr_q[1] ^ lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[21] ^ lfsr_q[22];
    38              1                   40609712         lfsr_c[22] = lfsr_q[0] ^ lfsr_q[1] ^ lfsr_q[2] ^ lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[21] ^ lfsr_q[22];
    39                                               
    40              1                   40609712         data_c[0] =  lfsr_q[22];
    41              1                   40609712         data_c[1] =  lfsr_q[21];
    42              1                   40609712         data_c[2] =  lfsr_q[20] ^ lfsr_q[22];
    43              1                   40609712         data_c[3] =  lfsr_q[19] ^ lfsr_q[21];
    44              1                   40609712         data_c[4] =  lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[22];
    45              1                   40609712         data_c[5] =  lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21];
    46              1                   40609712         data_c[6] =  lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[22];
    47              1                   40609712         data_c[7] =  lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    48              1                   40609712         data_c[8] =  lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[21] ^ lfsr_q[22];
    49              1                   40609712         data_c[9] =  lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[21];
    50              1                   40609712         data_c[10] = lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[22];
    51              1                   40609712         data_c[11] = lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    52              1                   40609712         data_c[12] = lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[21] ^ lfsr_q[22];
    53              1                   40609712         data_c[13] =  lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[21];
    54              1                   40609712         data_c[14] =  lfsr_q[8] ^ lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[20];
    55              1                   40609712         data_c[15] =  lfsr_q[7] ^  lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[19];
    56              1                   40609712         data_c[16] =  lfsr_q[6] ^  lfsr_q[8] ^ lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[18];
    57              1                   40609712         data_c[17] =  lfsr_q[5] ^  lfsr_q[7] ^  lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[17];
    58              1                   40609712         data_c[18] =  lfsr_q[4] ^  lfsr_q[6] ^  lfsr_q[8] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[16];
    59              1                   40609712         data_c[19] =  lfsr_q[3] ^  lfsr_q[5] ^  lfsr_q[7] ^  lfsr_q[9] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15];
    60              1                   40609712         data_c[20] =  lfsr_q[2] ^  lfsr_q[4] ^  lfsr_q[6] ^  lfsr_q[8] ^  lfsr_q[9] ^ lfsr_q[10] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[22];
    61              1                   40609712         data_c[21] =  lfsr_q[1] ^  lfsr_q[3] ^  lfsr_q[5] ^  lfsr_q[7] ^  lfsr_q[8] ^  lfsr_q[9] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[21];
    62              1                   40609712         data_c[22] =  lfsr_q[0] ^  lfsr_q[2] ^  lfsr_q[4] ^  lfsr_q[6] ^  lfsr_q[7] ^  lfsr_q[8] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[20] ^ lfsr_q[22];
    63              1                   40609712         data_c[23] =  lfsr_q[1] ^  lfsr_q[3] ^  lfsr_q[5] ^  lfsr_q[6] ^  lfsr_q[7] ^  lfsr_q[9] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    64              1                   40609712         data_c[24] =  lfsr_q[0] ^  lfsr_q[2] ^  lfsr_q[4] ^  lfsr_q[5] ^  lfsr_q[6] ^  lfsr_q[8] ^  lfsr_q[9] ^ lfsr_q[10] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[21];
    65              1                   40609712         data_c[25] =  lfsr_q[1] ^  lfsr_q[3] ^  lfsr_q[4] ^  lfsr_q[5] ^  lfsr_q[7] ^  lfsr_q[8] ^  lfsr_q[9] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[22];
    66              1                   40609712         data_c[26] =  lfsr_q[0] ^  lfsr_q[2] ^  lfsr_q[3] ^  lfsr_q[4] ^  lfsr_q[6] ^  lfsr_q[7] ^  lfsr_q[8] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[21];
    67              1                   40609712         data_c[27] =  lfsr_q[1] ^  lfsr_q[2] ^  lfsr_q[3] ^  lfsr_q[5] ^  lfsr_q[6] ^  lfsr_q[7] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[22];
    68              1                   40609712         data_c[28] =  lfsr_q[0] ^  lfsr_q[1] ^  lfsr_q[2] ^  lfsr_q[4] ^  lfsr_q[5] ^  lfsr_q[6] ^ lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21];
    69              1                   40609712         data_c[29] =  lfsr_q[0] ^  lfsr_q[1] ^  lfsr_q[3] ^  lfsr_q[4] ^  lfsr_q[5] ^ lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[22];
    70              1                   40609712         data_c[30] =  lfsr_q[0] ^  lfsr_q[2] ^  lfsr_q[3] ^  lfsr_q[4] ^ lfsr_q[12] ^ lfsr_q[14] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    71              1                   40609712         data_c[31] =  lfsr_q[1] ^  lfsr_q[2] ^  lfsr_q[3] ^ lfsr_q[11] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[21] ^ lfsr_q[22];
    72                                                 end
    73                                               
    74              1                   25499840       always @(negedge pclk or negedge reset_n) begin
    75                                               
    76                                                   if(~reset_n) 
    77              1                        640           lfsr_q <= seedValue; 
    78                                                   else
    79              1                   25499200           lfsr_q <= lfsr_c ;
    80                                               
    81                                                 end
    82                                               
    83                                                 assign data_out = data_c;
    84                                               
    85                                               endmodule


=================================================================================
=== File: RTL/LFSR_8.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           29        29         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/LFSR_8.v --

    1                                                module LFSR_8(scrambler_reset, reset_n, pclk, data_out);
    2                                                
    3                                                  input scrambler_reset, reset_n, pclk;
    4                                                  
    5                                                  output wire [7:0] data_out;
    6                                                
    7                                                  reg [15:0] lfsr_q, lfsr_c;
    8                                                  reg [7:0] data_c;
    9                                                
    10              1                   40467568       always @(*) begin
    11                                               
    12                                               	if(scrambler_reset)
    13              1                   28955936           lfsr_q <= 16'hFFFF;
    14                                               
    15              1                   40467568         lfsr_c[0] = lfsr_q[ 8];
    16              1                   40467568         lfsr_c[1] = lfsr_q[ 9];
    17              1                   40467568         lfsr_c[2] = lfsr_q[10];
    18              1                   40467568         lfsr_c[3] = lfsr_q[ 8] ^ lfsr_q[11];
    19              1                   40467568         lfsr_c[4] = lfsr_q[ 8] ^ lfsr_q[ 9] ^ lfsr_q[12];
    20              1                   40467568         lfsr_c[5] = lfsr_q[ 8] ^ lfsr_q[ 9] ^ lfsr_q[10] ^ lfsr_q[13];
    21              1                   40467568         lfsr_c[6] = lfsr_q[ 9] ^ lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[14];
    22              1                   40467568         lfsr_c[7] = lfsr_q[10] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[15];
    23              1                   40467568         lfsr_c[8] = lfsr_q[ 0] ^ lfsr_q[11] ^ lfsr_q[12] ^ lfsr_q[13];
    24              1                   40467568         lfsr_c[9] = lfsr_q[ 1] ^ lfsr_q[12] ^ lfsr_q[13] ^ lfsr_q[14];
    25              1                   40467568         lfsr_c[10] = lfsr_q[2] ^ lfsr_q[13] ^ lfsr_q[14] ^ lfsr_q[15];
    26              1                   40467568         lfsr_c[11] = lfsr_q[3] ^ lfsr_q[14] ^ lfsr_q[15];
    27              1                   40467568         lfsr_c[12] = lfsr_q[4] ^ lfsr_q[15];
    28              1                   40467568         lfsr_c[13] = lfsr_q[5];
    29              1                   40467568         lfsr_c[14] = lfsr_q[6];
    30              1                   40467568         lfsr_c[15] = lfsr_q[7];
    31                                               
    32              1                   40467568         data_c[0] = lfsr_q[15];
    33              1                   40467568         data_c[1] = lfsr_q[14];
    34              1                   40467568         data_c[2] = lfsr_q[13];
    35              1                   40467568         data_c[3] = lfsr_q[12];
    36              1                   40467568         data_c[4] = lfsr_q[11];
    37              1                   40467568         data_c[5] = lfsr_q[10];
    38              1                   40467568         data_c[6] = lfsr_q[9];
    39              1                   40467568         data_c[7] = lfsr_q[8];
    40                                               
    41                                                 end
    42                                               
    43              1                   25499840       always @(posedge pclk or negedge reset_n)
    44                                                   if(~reset_n) 
    45              1                        576           lfsr_q <= 16'hFFFF; 
    46                                                   else
    47              1                   25499264           lfsr_q <= lfsr_c ;
    48                                               
    49                                               	assign data_out = data_c;
    50                                               
    51                                               endmodule


=================================================================================
=== File: RTL/LFSR_8_gen3.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           36        36         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/LFSR_8_gen3.v --

    1                                                module LFSR_8_gen3(seedValue, scrambler_reset, reset_n, pclk, data_out);
    2                                                
    3                                                  input [23:0] seedValue;
    4                                                  input scrambler_reset, reset_n, pclk;
    5                                                
    6                                                  output wire [7:0] data_out;
    7                                                
    8                                                  reg [22:0] lfsr_q,lfsr_c;
    9                                                  reg [7:0] data_c;
    10                                               
    11              1                   40467632       always @(*) begin
    12                                               
    13                                                   if(scrambler_reset)
    14              1                   28955936            lfsr_q <= seedValue; 
    15                                               
    16              1                   40467632         lfsr_c[0] = lfsr_q[15] ^  lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    17              1                   40467632         lfsr_c[1] = lfsr_q[16] ^  lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[22];
    18              1                   40467632         lfsr_c[2] = lfsr_q[15] ^  lfsr_q[22];
    19              1                   40467632         lfsr_c[3] = lfsr_q[16];
    20              1                   40467632         lfsr_c[4] = lfsr_q[17];
    21              1                   40467632         lfsr_c[5] = lfsr_q[15] ^  lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    22              1                   40467632         lfsr_c[6] = lfsr_q[16] ^  lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[22];
    23              1                   40467632         lfsr_c[7] = lfsr_q[17] ^  lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[21];
    24              1                   40467632         lfsr_c[8] =  lfsr_q[0] ^  lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[20];
    25              1                   40467632         lfsr_c[9] =  lfsr_q[1] ^  lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[21];
    26              1                   40467632         lfsr_c[10] = lfsr_q[2] ^  lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[21] ^ lfsr_q[22];
    27              1                   40467632         lfsr_c[11] = lfsr_q[3] ^  lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[21] ^ lfsr_q[22];
    28              1                   40467632         lfsr_c[12] = lfsr_q[4] ^  lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    29              1                   40467632         lfsr_c[13] = lfsr_q[5] ^  lfsr_q[20] ^ lfsr_q[22];
    30              1                   40467632         lfsr_c[14] = lfsr_q[6] ^  lfsr_q[21];
    31              1                   40467632         lfsr_c[15] = lfsr_q[7] ^  lfsr_q[22];
    32              1                   40467632         lfsr_c[16] = lfsr_q[8] ^  lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    33              1                   40467632         lfsr_c[17] = lfsr_q[9] ^  lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[22];
    34              1                   40467632         lfsr_c[18] = lfsr_q[10] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21];
    35              1                   40467632         lfsr_c[19] = lfsr_q[11] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[22];
    36              1                   40467632         lfsr_c[20] = lfsr_q[12] ^ lfsr_q[19] ^ lfsr_q[21];
    37              1                   40467632         lfsr_c[21] = lfsr_q[13] ^ lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[20] ^ lfsr_q[21];
    38              1                   40467632         lfsr_c[22] = lfsr_q[14] ^ lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[21] ^ lfsr_q[22];
    39                                               
    40              1                   40467632         data_c[0] = lfsr_q[22];
    41              1                   40467632         data_c[1] = lfsr_q[21];
    42              1                   40467632         data_c[2] = lfsr_q[20] ^ lfsr_q[22];
    43              1                   40467632         data_c[3] = lfsr_q[19] ^ lfsr_q[21];
    44              1                   40467632         data_c[4] = lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[22];
    45              1                   40467632         data_c[5] = lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21];
    46              1                   40467632         data_c[6] = lfsr_q[16] ^ lfsr_q[18] ^ lfsr_q[20] ^ lfsr_q[22];
    47              1                   40467632         data_c[7] = lfsr_q[15] ^ lfsr_q[17] ^ lfsr_q[19] ^ lfsr_q[21] ^ lfsr_q[22];
    48                                                 end
    49                                               
    50              1                   25499840       always @(posedge pclk or negedge reset_n) begin
    51                                               
    52                                                   if(~reset_n) 
    53              1                        576           lfsr_q <= seedValue; 
    54                                                   else
    55              1                   25499264           lfsr_q <= lfsr_c ;
    56                                               
    57                                                 end
    58                                               
    59                                                 assign data_out = data_c;
    60                                               
    61                                               
    62                                               
    63                                               endmodule


=================================================================================
=== File: RTL/LMC.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          335       301        34      89.8

================================Statement Details================================

Statement Coverage for file RTL/LMC.v --

    1                                                module LMC #(parameter pipe_width_gen1 = 8,
    2                                                parameter pipe_width_gen2 = 16,
    3                                                parameter pipe_width_gen3 = 16,
    4                                                parameter pipe_width_gen4 = 32,
    5                                                parameter pipe_width_gen5 = 32,
    6                                                parameter number_of_lanes= 4
    7                                                ) (reset_n, pclk, generation, data_valid, data, d_k_in, MUXSyncHeader, PIPEWIDTH, data_valid_out_1, data_valid_out_2, data_valid_out_3, data_valid_out_4, data_valid_out_5, data_valid_out_6, data_valid_out_7, data_valid_out_8, data_valid_out_9, data_valid_out_10, data_valid_out_11, data_valid_out_12, data_valid_out_13, data_valid_out_14, data_valid_out_15, data_valid_out_16, d_k_out_1, d_k_out_2, d_k_out_3, d_k_out_4, d_k_out_5, d_k_out_6, d_k_out_7, d_k_out_8, d_k_out_9, d_k_out_10, d_k_out_11, d_k_out_12, d_k_out_13, d_k_out_14, d_k_out_15, d_k_out_16, dataout_1, dataout_2, dataout_3, dataout_4, dataout_5, dataout_6, dataout_7, dataout_8, dataout_9, dataout_10, dataout_11, dataout_12, dataout_13, dataout_14, dataout_15, dataout_16, LMCSyncHeader_1, LMCSyncHeader_2, LMCSyncHeader_3, LMCSyncHeader_4, LMCSyncHeader_5, LMCSyncHeader_6, LMCSyncHeader_7, LMCSyncHeader_8, LMCSyncHeader_9, LMCSyncHeader_10, LMCSyncHeader_11, LMCSyncHeader_12, LMCSyncHeader_13, LMCSyncHeader_14, LMCSyncHeader_15, LMCSyncHeader_16);
    8                                                
    9                                                
    10                                               
    11                                               input reset_n, pclk;
    12                                               input [2:0] generation;
    13                                               input [63:0] data_valid;
    14                                               input [511 : 0] data;
    15                                               input [63:0] d_k_in;
    16                                               input MUXSyncHeader;
    17                                               
    18                                               output reg data_valid_out_1, data_valid_out_2, data_valid_out_3, data_valid_out_4, data_valid_out_5, data_valid_out_6, data_valid_out_7, data_valid_out_8, data_valid_out_9, data_valid_out_10, data_valid_out_11, data_valid_out_12, data_valid_out_13, data_valid_out_14, data_valid_out_15, data_valid_out_16;
    19                                               output reg [31 : 0] dataout_1, dataout_2, dataout_3, dataout_4, dataout_5, dataout_6, dataout_7, dataout_8, dataout_9, dataout_10, dataout_11, dataout_12, dataout_13, dataout_14, dataout_15, dataout_16;
    20                                               output reg [3 : 0] d_k_out_1, d_k_out_2, d_k_out_3, d_k_out_4, d_k_out_5, d_k_out_6, d_k_out_7, d_k_out_8, d_k_out_9, d_k_out_10, d_k_out_11, d_k_out_12, d_k_out_13, d_k_out_14, d_k_out_15, d_k_out_16;
    21                                               output reg [5:0] PIPEWIDTH;
    22                                               output reg [1:0] LMCSyncHeader_1, LMCSyncHeader_2, LMCSyncHeader_3, LMCSyncHeader_4, LMCSyncHeader_5, LMCSyncHeader_6, LMCSyncHeader_7, LMCSyncHeader_8, LMCSyncHeader_9, LMCSyncHeader_10, LMCSyncHeader_11, LMCSyncHeader_12, LMCSyncHeader_13, LMCSyncHeader_14, LMCSyncHeader_15, LMCSyncHeader_16;
    23                                               
    24                                               reg [5:0] pipe_width;
    25              1                          2     reg [4:0] count= 0;
    26                                               
    27                                               
    28                                               
    29              1                         12     always@(generation) begin
    30                                                   if(generation==1)
    31              1                          6             pipe_width = pipe_width_gen1; 
    32                                                  /* else if (generation==2)
    33                                                       pipe_width = pipe_width_gen2; 
    34                                                   else if (generation==3)
    35                                                       pipe_width = pipe_width_gen3; 
    36                                                   else if (generation==4)
    37                                                       pipe_width = pipe_width_gen4;  */               
    38                                                   else if (generation==5)
    39              1                          6             pipe_width = pipe_width_gen5;
    40                                               
    41              1                         12         PIPEWIDTH= pipe_width; 
    42                                               end
    43                                               
    44              1                     774035     always @(negedge pclk or negedge reset_n) begin
    45                                               
    46                                                  
    47                                               
    48                                                 if(generation >= 3 && reset_n) begin
    49                                               
    50                                                   if(MUXSyncHeader==1 && count==0) begin  // when MUX = 1 --> Ordered Set
    51              1                      95434             LMCSyncHeader_1 =10;
    52              1                      95434             LMCSyncHeader_2 =10;
    53              1                      95434             LMCSyncHeader_3 =10;
    54              1                      95434             LMCSyncHeader_4 =10;
    55              1                      95434             LMCSyncHeader_5 =10;
    56              1                      95434             LMCSyncHeader_6 =10;
    57              1                      95434             LMCSyncHeader_7 =10;
    58              1                      95434             LMCSyncHeader_8 =10;
    59              1                      95434             LMCSyncHeader_9 =10;
    60              1                      95434             LMCSyncHeader_10 =10;
    61              1                      95434             LMCSyncHeader_11 =10;
    62              1                      95434             LMCSyncHeader_12 =10;
    63              1                      95434             LMCSyncHeader_13 =10;
    64              1                      95434             LMCSyncHeader_14 =10;
    65              1                      95434             LMCSyncHeader_15 =10;
    66              1                      95434             LMCSyncHeader_16 =10;
    67              1                      95434             count = count + 1;
    68                                                   end
    69                                                  /* else if(PIPEWIDTH==6'b001000 && MUXSyncHeader==1 && count>0) begin
    70                                               
    71                                                           if(MUXSyncHeader==1 && count==16) begin
    72                                                               LMCSyncHeader_1 =10;
    73                                                               LMCSyncHeader_2 =10;
    74                                                               LMCSyncHeader_3 =10;
    75                                                               LMCSyncHeader_4 =10;
    76                                                               LMCSyncHeader_5 =10;
    77                                                               LMCSyncHeader_6 =10;
    78                                                               LMCSyncHeader_7 =10;
    79                                                               LMCSyncHeader_8 =10;
    80                                                               LMCSyncHeader_9 =10;
    81                                                               LMCSyncHeader_10 =10;
    82                                                               LMCSyncHeader_11 =10;
    83                                                               LMCSyncHeader_12 =10;
    84                                                               LMCSyncHeader_13 =10;
    85                                                               LMCSyncHeader_14 =10;
    86                                                               LMCSyncHeader_15 =10;
    87                                                               LMCSyncHeader_16 =10;
    88                                                               count=1;
    89                                                           end
    90                                                           else begin
    91                                                               LMCSyncHeader_1 =0;
    92                                                               LMCSyncHeader_2 =0;
    93                                                               LMCSyncHeader_3 =0;
    94                                                               LMCSyncHeader_4 =0;
    95                                                               LMCSyncHeader_5 =0;
    96                                                               LMCSyncHeader_6 =0;
    97                                                               LMCSyncHeader_7 =0;
    98                                                               LMCSyncHeader_8 =0;
    99                                                               LMCSyncHeader_9 =0;
    100                                                              LMCSyncHeader_10 =0;
    101                                                              LMCSyncHeader_11 =0;
    102                                                              LMCSyncHeader_12 =0;
    103                                                              LMCSyncHeader_13 =0;
    104                                                              LMCSyncHeader_14 =0;
    105                                                              LMCSyncHeader_15 =0;
    106                                                              LMCSyncHeader_16 =0;
    107                                                              count = count + 1;
    108                                                          end
    109                                              
    110                                                      end
    111                                                  else if(PIPEWIDTH==6'b010000 && MUXSyncHeader==1 && count>0) begin
    112                                              
    113                                                          if(MUXSyncHeader==1 && count==8) begin
    114                                                              LMCSyncHeader_1 =10;
    115                                                              LMCSyncHeader_2 =10;
    116                                                              LMCSyncHeader_3 =10;
    117                                                              LMCSyncHeader_4 =10;
    118                                                              LMCSyncHeader_5 =10;
    119                                                              LMCSyncHeader_6 =10;
    120                                                              LMCSyncHeader_7 =10;
    121                                                              LMCSyncHeader_8 =10;
    122                                                              LMCSyncHeader_9 =10;
    123                                                              LMCSyncHeader_10 =10;
    124                                                              LMCSyncHeader_11 =10;
    125                                                              LMCSyncHeader_12 =10;
    126                                                              LMCSyncHeader_13 =10;
    127                                                              LMCSyncHeader_14 =10;
    128                                                              LMCSyncHeader_15 =10;
    129                                                              LMCSyncHeader_16 =10;
    130                                                              count=1;
    131                                                          end
    132                                                          else begin
    133                                                              LMCSyncHeader_1 =0;
    134                                                              LMCSyncHeader_2 =0;
    135                                                              LMCSyncHeader_3 =0;
    136                                                              LMCSyncHeader_4 =0;
    137                                                              LMCSyncHeader_5 =0;
    138                                                              LMCSyncHeader_6 =0;
    139                                                              LMCSyncHeader_7 =0;
    140                                                              LMCSyncHeader_8 =0;
    141                                                              LMCSyncHeader_9 =0;
    142                                                              LMCSyncHeader_10 =0;
    143                                                              LMCSyncHeader_11 =0;
    144                                                              LMCSyncHeader_12 =0;
    145                                                              LMCSyncHeader_13 =0;
    146                                                              LMCSyncHeader_14 =0;
    147                                                              LMCSyncHeader_15 =0;
    148                                                              LMCSyncHeader_16 =0;   
    149                                                              count = count + 1;
    150                                                          end
    151                                                      end*/
    152                                              
    153                                                  else if(PIPEWIDTH==6'b100000 && MUXSyncHeader==1 && count>0) begin
    154                                              
    155                                                          if(MUXSyncHeader==1 && count==4) begin
    156             1                      47203                     LMCSyncHeader_1 =10;
    157             1                      47203                     LMCSyncHeader_2 =10;
    158             1                      47203                     LMCSyncHeader_3 =10;
    159             1                      47203                     LMCSyncHeader_4 =10;
    160             1                      47203                     LMCSyncHeader_5 =10;
    161             1                      47203                     LMCSyncHeader_6 =10;
    162             1                      47203                     LMCSyncHeader_7 =10;
    163             1                      47203                     LMCSyncHeader_8 =10;
    164             1                      47203                     LMCSyncHeader_9 =10;
    165             1                      47203                     LMCSyncHeader_10 =10;
    166             1                      47203                     LMCSyncHeader_11 =10;
    167             1                      47203                     LMCSyncHeader_12 =10;
    168             1                      47203                     LMCSyncHeader_13 =10;
    169             1                      47203                     LMCSyncHeader_14 =10;
    170             1                      47203                     LMCSyncHeader_15 =10;
    171             1                      47203                     LMCSyncHeader_16 =10;
    172             1                      47203                     count=1;
    173                                                          end
    174                                                          else begin
    175             1                     141622                     LMCSyncHeader_1 =0;
    176             1                     141622                     LMCSyncHeader_2 =0;
    177             1                     141622                     LMCSyncHeader_3 =0;
    178             1                     141622                     LMCSyncHeader_4 =0;
    179             1                     141622                     LMCSyncHeader_5 =0;
    180             1                     141622                     LMCSyncHeader_6 =0;
    181             1                     141622                     LMCSyncHeader_7 =0;
    182             1                     141622                     LMCSyncHeader_8 =0;
    183             1                     141622                     LMCSyncHeader_9 =0;
    184             1                     141622                     LMCSyncHeader_10 =0;
    185             1                     141622                     LMCSyncHeader_11 =0;
    186             1                     141622                     LMCSyncHeader_12 =0;
    187             1                     141622                     LMCSyncHeader_13 =0;
    188             1                     141622                     LMCSyncHeader_14 =0;
    189             1                     141622                     LMCSyncHeader_15 =0;
    190             1                     141622                     LMCSyncHeader_16 =0;
    191             1                     141622                     count = count + 1;
    192                                                          end 
    193                                                  end
    194                                                
    195                                              
    196                                                  else if(MUXSyncHeader==0 && count==0) begin    ///////// Data Block
    197             1                      34580             LMCSyncHeader_1 =01;
    198             1                      34580             LMCSyncHeader_2 =01;
    199             1                      34580             LMCSyncHeader_3 =01;
    200             1                      34580             LMCSyncHeader_4 =01;
    201             1                      34580             LMCSyncHeader_5 =01;
    202             1                      34580             LMCSyncHeader_6 =01;
    203             1                      34580             LMCSyncHeader_7 =01;
    204             1                      34580             LMCSyncHeader_8 =01;
    205             1                      34580             LMCSyncHeader_9 =01;
    206             1                      34580             LMCSyncHeader_10 =01;
    207             1                      34580             LMCSyncHeader_11 =01;
    208             1                      34580             LMCSyncHeader_12 =01;
    209             1                      34580             LMCSyncHeader_13 =01;
    210             1                      34580             LMCSyncHeader_14 =01;
    211             1                      34580             LMCSyncHeader_15 =01;
    212             1                      34580             LMCSyncHeader_16 =01;
    213             1                      34580             count = count + 1;     
    214                                                  end 
    215                                              
    216                                                 /* else if(PIPEWIDTH==6'b001000 && MUXSyncHeader==0 && count>0) begin
    217                                              
    218                                                          if(MUXSyncHeader==0 && count==16) begin
    219                                                              LMCSyncHeader_1 =01;
    220                                                              LMCSyncHeader_2 =01;
    221                                                              LMCSyncHeader_3 =01;
    222                                                              LMCSyncHeader_4 =01;
    223                                                              LMCSyncHeader_5 =01;
    224                                                              LMCSyncHeader_6 =01;
    225                                                              LMCSyncHeader_7 =01;
    226                                                              LMCSyncHeader_8 =01;
    227                                                              LMCSyncHeader_9 =01;
    228                                                              LMCSyncHeader_10 =01;
    229                                                              LMCSyncHeader_11 =01;
    230                                                              LMCSyncHeader_12 =01;
    231                                                              LMCSyncHeader_13 =01;
    232                                                              LMCSyncHeader_14 =01;
    233                                                              LMCSyncHeader_15 =01;
    234                                                              LMCSyncHeader_16 =01;
    235                                                              count=1;
    236                                                          end
    237                                                          else begin
    238                                                              LMCSyncHeader_1 =0;
    239                                                              LMCSyncHeader_2 =0;
    240                                                              LMCSyncHeader_3 =0;
    241                                                              LMCSyncHeader_4 =0;
    242                                                              LMCSyncHeader_5 =0;
    243                                                              LMCSyncHeader_6 =0;
    244                                                              LMCSyncHeader_7 =0;
    245                                                              LMCSyncHeader_8 =0;
    246                                                              LMCSyncHeader_9 =0;
    247                                                              LMCSyncHeader_10 =0;
    248                                                              LMCSyncHeader_11 =0;
    249                                                              LMCSyncHeader_12 =0;
    250                                                              LMCSyncHeader_13 =0;
    251                                                              LMCSyncHeader_14 =0;
    252                                                              LMCSyncHeader_15 =0;
    253                                                              LMCSyncHeader_16 =0;
    254                                                              count = count + 1;
    255                                                          end
    256                                              
    257                                                      end
    258                                                      else if(PIPEWIDTH==6'b010000 && MUXSyncHeader==0 && count>0) begin
    259                                              
    260                                                          if(MUXSyncHeader==0 && count==8) begin
    261                                                              LMCSyncHeader_1 =01;
    262                                                              LMCSyncHeader_2 =01;
    263                                                              LMCSyncHeader_3 =01;
    264                                                              LMCSyncHeader_4 =01;
    265                                                              LMCSyncHeader_5 =01;
    266                                                              LMCSyncHeader_6 =01;
    267                                                              LMCSyncHeader_7 =01;
    268                                                              LMCSyncHeader_8 =01;
    269                                                              LMCSyncHeader_9 =01;
    270                                                              LMCSyncHeader_10 =01;
    271                                                              LMCSyncHeader_11 =01;
    272                                                              LMCSyncHeader_12 =01;
    273                                                              LMCSyncHeader_13 =01;
    274                                                              LMCSyncHeader_14 =01;
    275                                                              LMCSyncHeader_15 =01;
    276                                                              LMCSyncHeader_16 =01;
    277                                                              count=1;
    278                                                          end
    279                                                          else begin
    280                                                              LMCSyncHeader_1 =0;
    281                                                              LMCSyncHeader_2 =0;
    282                                                              LMCSyncHeader_3 =0;
    283                                                              LMCSyncHeader_4 =0;
    284                                                              LMCSyncHeader_5 =0;
    285                                                              LMCSyncHeader_6 =0;
    286                                                              LMCSyncHeader_7 =0;
    287                                                              LMCSyncHeader_8 =0;
    288                                                              LMCSyncHeader_9 =0;
    289                                                              LMCSyncHeader_10 =0;
    290                                                              LMCSyncHeader_11 =0;
    291                                                              LMCSyncHeader_12 =0;
    292                                                              LMCSyncHeader_13 =0;
    293                                                              LMCSyncHeader_14 =0;
    294                                                              LMCSyncHeader_15 =0;
    295                                                              LMCSyncHeader_16 =0;    
    296                                                              count = count + 1;
    297                                                          end
    298                                                      end*/   
    299                                              
    300                                                      else if(PIPEWIDTH==6'b100000 && MUXSyncHeader==0 && count>0) begin
    301                                              
    302                                                          if(MUXSyncHeader==1 && count==4) begin
    303             1                    ***0***                     LMCSyncHeader_1 =01;
    304             1                    ***0***                     LMCSyncHeader_2 =01;
    305             1                    ***0***                     LMCSyncHeader_3 =01;
    306             1                    ***0***                     LMCSyncHeader_4 =01;
    307             1                    ***0***                     LMCSyncHeader_5 =01;
    308             1                    ***0***                     LMCSyncHeader_6 =01;
    309             1                    ***0***                     LMCSyncHeader_7 =01;
    310             1                    ***0***                     LMCSyncHeader_8 =01;
    311             1                    ***0***                     LMCSyncHeader_9 =01;
    312             1                    ***0***                     LMCSyncHeader_10 =01;
    313             1                    ***0***                     LMCSyncHeader_11 =01;
    314             1                    ***0***                     LMCSyncHeader_12 =01;
    315             1                    ***0***                     LMCSyncHeader_13 =01;
    316             1                    ***0***                     LMCSyncHeader_14 =01;
    317             1                    ***0***                     LMCSyncHeader_15 =01;
    318             1                    ***0***                     LMCSyncHeader_16 =01;
    319             1                    ***0***                     count=1;
    320                                                          end
    321                                                          else begin
    322             1                       7036                     LMCSyncHeader_1 =0;
    323             1                       7036                     LMCSyncHeader_2 =0;
    324             1                       7036                     LMCSyncHeader_3 =0;
    325             1                       7036                     LMCSyncHeader_4 =0;
    326             1                       7036                     LMCSyncHeader_5 =0;
    327             1                       7036                     LMCSyncHeader_6 =0;
    328             1                       7036                     LMCSyncHeader_7 =0;
    329             1                       7036                     LMCSyncHeader_8 =0;
    330             1                       7036                     LMCSyncHeader_9 =0;
    331             1                       7036                     LMCSyncHeader_10 =0;
    332             1                       7036                     LMCSyncHeader_11 =0;
    333             1                       7036                     LMCSyncHeader_12 =0;
    334             1                       7036                     LMCSyncHeader_13 =0;
    335             1                       7036                     LMCSyncHeader_14 =0;
    336             1                       7036                     LMCSyncHeader_15 =0;
    337             1                       7036                     LMCSyncHeader_16 =0;
    338             1                       7036                     count = count + 1;
    339                                                          end  
    340                                                      end
    341                                              
    342                                                      else
    343             1                    ***0***                 count =0;
    344                                              
    345                                                end
    346                                              
    347                                                if (~reset_n) begin
    348             1                         20         dataout_1=0;
    349             1                         20         dataout_2=0; 
    350             1                         20         dataout_3=0;
    351             1                         20         dataout_4=0; 
    352             1                         20         dataout_5=0;
    353             1                         20         dataout_6=0;
    354             1                         20         dataout_7=0;
    355             1                         20         dataout_8=0;
    356             1                         20         dataout_9=0;
    357             1                         20         dataout_10=0;
    358             1                         20         dataout_11=0;
    359             1                         20         dataout_12=0;
    360             1                         20         dataout_13=0;
    361             1                         20         dataout_14=0;
    362             1                         20         dataout_15=0;
    363             1                         20         dataout_16=0;
    364                                              
    365             1                         20         d_k_out_1=0;
    366             1                         20         d_k_out_2=0;
    367             1                         20         d_k_out_3=0;
    368             1                         20         d_k_out_4=0;
    369             1                         20         d_k_out_5=0;
    370             1                         20         d_k_out_6=0;
    371             1                         20         d_k_out_7=0;
    372             1                         20         d_k_out_8=0;
    373             1                         20         d_k_out_9=0;
    374             1                         20         d_k_out_10=0;
    375             1                         20         d_k_out_11=0;
    376             1                         20         d_k_out_12=0;
    377             1                         20         d_k_out_13=0;
    378             1                         20         d_k_out_14=0;
    379             1                         20         d_k_out_15=0;
    380             1                         20         d_k_out_16=0;
    381                                              
    382             1                         20         data_valid_out_1=0;
    383             1                         20         data_valid_out_2=0;
    384             1                         20         data_valid_out_3=0;
    385             1                         20         data_valid_out_4=0;
    386             1                         20         data_valid_out_5=0;
    387             1                         20         data_valid_out_6=0;
    388             1                         20         data_valid_out_7=0;
    389             1                         20         data_valid_out_8=0;
    390             1                         20         data_valid_out_9=0;
    391             1                         20         data_valid_out_10=0;
    392             1                         20         data_valid_out_11=0;
    393             1                         20         data_valid_out_12=0;
    394             1                         20         data_valid_out_13=0;
    395             1                         20         data_valid_out_14=0;
    396             1                         20         data_valid_out_15=0;
    397             1                         20         data_valid_out_16=0;
    398                                              
    399             1                         20         LMCSyncHeader_1 =0;
    400             1                         20         LMCSyncHeader_2 =0;
    401             1                         20         LMCSyncHeader_3 =0;
    402             1                         20         LMCSyncHeader_4 =0;
    403             1                         20         LMCSyncHeader_5 =0;
    404             1                         20         LMCSyncHeader_6 =0;
    405             1                         20         LMCSyncHeader_7 =0;
    406             1                         20         LMCSyncHeader_8 =0;
    407             1                         20         LMCSyncHeader_9 =0;
    408             1                         20         LMCSyncHeader_10 =0;
    409             1                         20         LMCSyncHeader_11 =0;
    410             1                         20         LMCSyncHeader_12 =0;
    411             1                         20         LMCSyncHeader_13 =0;
    412             1                         20         LMCSyncHeader_14 =0;
    413             1                         20         LMCSyncHeader_15 =0;
    414             1                         20         LMCSyncHeader_16 =0;
    415                                              
    416             1                         20         count =0;
    417                                                end
    418                                              
    419                                                else if (data_valid[0] == 0) begin
    420             1                     299770         dataout_1=0;
    421             1                     299770         dataout_2=0; 
    422             1                     299770         dataout_3=0;
    423             1                     299770         dataout_4=0; 
    424             1                     299770         dataout_5=0;
    425             1                     299770         dataout_6=0;
    426             1                     299770         dataout_7=0;
    427             1                     299770         dataout_8=0;
    428             1                     299770         dataout_9=0;
    429             1                     299770         dataout_10=0;
    430             1                     299770         dataout_11=0;
    431             1                     299770         dataout_12=0;
    432             1                     299770         dataout_13=0;
    433             1                     299770         dataout_14=0;
    434             1                     299770         dataout_15=0;
    435             1                     299770         dataout_16=0;
    436                                              
    437             1                     299770         d_k_out_1=0;
    438             1                     299770         d_k_out_2=0;
    439             1                     299770         d_k_out_3=0;
    440             1                     299770         d_k_out_4=0;
    441             1                     299770         d_k_out_5=0;
    442             1                     299770         d_k_out_6=0;
    443             1                     299770         d_k_out_7=0;
    444             1                     299770         d_k_out_8=0;
    445             1                     299770         d_k_out_9=0;
    446             1                     299770         d_k_out_10=0;
    447             1                     299770         d_k_out_11=0;
    448             1                     299770         d_k_out_12=0;
    449             1                     299770         d_k_out_13=0;
    450             1                     299770         d_k_out_14=0;
    451             1                     299770         d_k_out_15=0;
    452             1                     299770         d_k_out_16=0;
    453                                              
    454             1                     299770         data_valid_out_1=0;
    455             1                     299770         data_valid_out_2=0;
    456             1                     299770         data_valid_out_3=0;
    457             1                     299770         data_valid_out_4=0;
    458             1                     299770         data_valid_out_5=0;
    459             1                     299770         data_valid_out_6=0;
    460             1                     299770         data_valid_out_7=0;
    461             1                     299770         data_valid_out_8=0;
    462             1                     299770         data_valid_out_9=0;
    463             1                     299770         data_valid_out_10=0;
    464             1                     299770         data_valid_out_11=0;
    465             1                     299770         data_valid_out_12=0;
    466             1                     299770         data_valid_out_13=0;
    467             1                     299770         data_valid_out_14=0;
    468             1                     299770         data_valid_out_15=0;
    469             1                     299770         data_valid_out_16=0;
    470                                              
    471             1                     299770         LMCSyncHeader_1 =0;
    472             1                     299770         LMCSyncHeader_2 =0;
    473             1                     299770         LMCSyncHeader_3 =0;
    474             1                     299770         LMCSyncHeader_4 =0;
    475             1                     299770         LMCSyncHeader_5 =0;
    476             1                     299770         LMCSyncHeader_6 =0;
    477             1                     299770         LMCSyncHeader_7 =0;
    478             1                     299770         LMCSyncHeader_8 =0;
    479             1                     299770         LMCSyncHeader_9 =0;
    480             1                     299770         LMCSyncHeader_10 =0;
    481             1                     299770         LMCSyncHeader_11 =0;
    482             1                     299770         LMCSyncHeader_12 =0;
    483             1                     299770         LMCSyncHeader_13 =0;
    484             1                     299770         LMCSyncHeader_14 =0;
    485             1                     299770         LMCSyncHeader_15 =0;
    486             1                     299770         LMCSyncHeader_16 =0;
    487                                              
    488             1                     299770         count =0;
    489                                                end
    490                                              
    491                                              /*  else if (pipe_width == 8 && number_of_lanes == 1) begin
    492                                                          if (data_valid[0] == 1) begin
    493                                                              dataout_1= data[7:0];
    494                                                              d_k_out_1= d_k_in;
    495                                                              data_valid_out_1= 1'b1;
    496                                                          end
    497                                                end
    498                                              
    499                                                else if (pipe_width == 16 && number_of_lanes == 1) begin
    500                                                          if (data_valid[1] == 1 && data_valid[0] == 1) begin
    501                                                              dataout_1= {data[7:0] , data[15:8]};
    502                                                              d_k_out_1= {d_k_in[0] , d_k_in[1]};
    503                                                              data_valid_out_1= 1'b1;                
    504                                                          end
    505                                                end*/
    506                                              
    507                                                else if (pipe_width == 32 && number_of_lanes == 1) begin
    508                                              
    509                                                          data_valid_out_1= 1'b1; 
    510                                              
    511                                                          if(data_valid[3] == 1 && data_valid[0] == 1) begin
    512                                                              dataout_1= {data[7:0] , data[15:8] , data[23:16] , data[31:24]};
    513                                                              d_k_out_1= {d_k_in[0] , d_k_in[1] , d_k_in[2] , d_k_in[3]};                               
    514                                                          end
    515                                                          else if (data_valid[1] == 0 && data_valid[0] == 1) begin
    516                                                               if(generation >= 3)
    517                                                                   dataout_1= {data[7:0] , 24'b0};
    518                                                               else
    519                                                                   dataout_1= {data[7:0] , 24'hf7f7f7};
    520                                               
    521                                                              d_k_out_1= {d_k_in[0] , 3'b111 };
    522                                                          end
    523                                                          else if (data_valid[2] == 0 && data_valid[0] == 1) begin
    524                                                                if(generation >= 3)
    525                                                                    dataout_1= {data[7:0] , data[15:8] , 16'b0};
    526                                                                else
    527                                                                    dataout_1= {data[7:0] , data[15:8] , 16'hf7f7};
    528                                              
    529                                                              d_k_out_1= {d_k_in[0] , d_k_in[1] , 2'b11};
    530                                                          end
    531                                                          else if (data_valid[3] == 0 && data_valid[0] == 1) begin
    532                                                                  if(generation >= 3)
    533                                                                    dataout_1= {data[7:0] , data[15:8] , data[23:16] , 8'b0};
    534                                                                  else 
    535                                                                    dataout_1= {data[7:0] , data[15:8] , data[23:16] , 8'hf7};
    536                                              
    537                                                              d_k_out_1= {d_k_in[0] , d_k_in[1] , d_k_in[2] , 1'b1};
    538                                                          end
    539                                                end    
    540                                              
    541                                               /* else if (pipe_width == 8 && number_of_lanes == 4) begin
    542                                              
    543                                                              data_valid_out_1= 1'b1;
    544                                                              data_valid_out_2= 1'b1;
    545                                                              data_valid_out_3= 1'b1;
    546                                                              data_valid_out_4= 1'b1;
    547                                              
    548                                                          if( data_valid[3] == 1 && data_valid[0] == 1) begin
    549                                                              dataout_1= data[7:0];
    550                                                              dataout_2= data[15:8]; 
    551                                                              dataout_3= data[23:16];
    552                                                              dataout_4= data[32:24];
    553                                              
    554                                                              d_k_out_1= d_k_in[0];
    555                                                              d_k_out_2= d_k_in[1];
    556                                                              d_k_out_3= d_k_in[2];
    557                                                              d_k_out_4= d_k_in[3];
    558                                                          end            
    559                                                end
    560                                              
    561                                                else if (pipe_width == 16 && number_of_lanes == 4) begin
    562                                              
    563                                                              data_valid_out_1= 1'b1;
    564                                                              data_valid_out_2= 1'b1;
    565                                                              data_valid_out_3= 1'b1;
    566                                                              data_valid_out_4= 1'b1;
    567                                              
    568                                                          if( data_valid[7] == 1 && data_valid[0] == 1) begin
    569                                                              dataout_1= {data[7:0] , data[39:32]};
    570                                                              dataout_2= {data[15:8] , data[47:40]}; 
    571                                                              dataout_3= {data[23:16] , data[55:48]};
    572                                                              dataout_4= {data[31:24] , data[63:56]};
    573                                              
    574                                                              d_k_out_1= {d_k_in[0] , d_k_in[4]};
    575                                                              d_k_out_2= {d_k_in[1] , d_k_in[5]};
    576                                                              d_k_out_3= {d_k_in[2] , d_k_in[6]};
    577                                                              d_k_out_4= {d_k_in[3] , d_k_in[7]};
    578                                                          end
    579                                                          else if( data_valid[4] == 0 && data_valid[0] == 1) begin
    580                                                              if (generation>=3) begin
    581                                                                      dataout_1= {data[7:0] , 8'b0};
    582                                                                      dataout_2= {data[15:8] , 8'b0}; 
    583                                                                      dataout_3= {data[23:16] , 8'b0};
    584                                                                      dataout_4= {data[31:24] , 8'b0};
    585                                                              end
    586                                                              else begin
    587                                                                      dataout_1= {data[7:0] , 8'hf7};
    588                                                                      dataout_2= {data[15:8] , 8'hf7}; 
    589                                                                      dataout_3= {data[23:16] , 8'hf7};
    590                                                                      dataout_4= {data[31:24] , 8'hf7};
    591                                                              end
    592                                              
    593                                                              d_k_out_1= {d_k_in[0] , 1'b1};
    594                                                              d_k_out_2= {d_k_in[1] , 1'b1};
    595                                                              d_k_out_3= {d_k_in[2] , 1'b1};
    596                                                              d_k_out_4= {d_k_in[3] , 1'b1};
    597                                                          end
    598                                                end*/
    599                                              
    600                                                else if (pipe_width == 32 && number_of_lanes == 4) begin
    601                                              
    602                                                              data_valid_out_1= 1'b1;
    603                                                              data_valid_out_2= 1'b1;
    604                                                              data_valid_out_3= 1'b1;
    605                                                              data_valid_out_4= 1'b1;
    606                                              
    607                                                          if( data_valid[15] == 1 && data_valid[0] == 1) begin
    608                                                              dataout_1= {data[7:0] , data[39:32] , data[71:64] , data[103:96]};
    609                                                              dataout_2= {data[15:8] , data[47:40] , data[79:72] , data[111:104]}; 
    610                                                              dataout_3= {data[23:16] , data[55:48] , data[87:80] , data[119:112]};
    611                                                              dataout_4= {data[31:24] , data[63:56] , data[95:88] , data[127:120]};
    612                                              
    613                                                              d_k_out_1= {d_k_in[0] , d_k_in[4] , d_k_in[8] , d_k_in[12]};
    614                                                              d_k_out_2= {d_k_in[1] , d_k_in[5] , d_k_in[9] , d_k_in[13]};
    615                                                              d_k_out_3= {d_k_in[2] , d_k_in[6] , d_k_in[10] , d_k_in[14]};
    616                                                              d_k_out_4= {d_k_in[3] , d_k_in[7] , d_k_in[11] , d_k_in[15]};
    617                                                          end      
    618                                                          else if( data_valid[4] == 0 && data_valid[0] == 1) begin
    619                                                                  if(generation>=3) begin
    620                                                                      dataout_1= {data[7:0] , 24'b0};
    621                                                                      dataout_2= {data[15:8] , 24'b0}; 
    622                                                                      dataout_3= {data[23:16] , 24'b0};
    623                                                                      dataout_4= {data[31:24] , 24'b0};                         
    624                                                                  end
    625                                                                  else begin
    626                                                                      dataout_1= {data[7:0] , 24'hf7f7f7};
    627                                                                      dataout_2= {data[15:8] , 24'hf7f7f7}; 
    628                                                                      dataout_3= {data[23:16] , 24'hf7f7f7};
    629                                                                      dataout_4= {data[31:24] , 24'hf7f7f7}; 
    630                                                                  end
    631                                              
    632                                              
    633                                                              d_k_out_1= {d_k_in[0] , 3'b111};
    634                                                              d_k_out_2= {d_k_in[1] , 3'b111};
    635                                                              d_k_out_3= {d_k_in[2] , 3'b111};
    636                                                              d_k_out_4= {d_k_in[3] , 3'b111};
    637                                                          end 
    638                                                          else if( data_valid[8] == 0 && data_valid[0] == 1) begin
    639                                                                  if(generation>=3) begin
    640                                                                      dataout_1= {data[7:0] , data[39:32] , 16'b0};
    641                                                                      dataout_2= {data[15:8] , data[47:40] , 16'b0}; 
    642                                                                      dataout_3= {data[23:16] , data[55:48] , 16'b0};
    643                                                                      dataout_4= {data[31:24] , data[63:56] , 16'b0};
    644                                                                  end
    645                                                                  else begin
    646                                                                      dataout_1= {data[7:0] , data[39:32] , 16'hf7f7};
    647                                                                      dataout_2= {data[15:8] , data[47:40] , 16'hf7f7}; 
    648                                                                      dataout_3= {data[23:16] , data[55:48] , 16'hf7f7};
    649                                                                      dataout_4= {data[31:24] , data[63:56] , 16'hf7f7};                        
    650                                                                  end
    651                                              
    652                                              
    653                                                              d_k_out_1= {d_k_in[0] , d_k_in[4] , 2'b11};
    654                                                              d_k_out_2= {d_k_in[1] , d_k_in[5] , 2'b11};
    655                                                              d_k_out_3= {d_k_in[2] , d_k_in[6] , 2'b11};
    656                                                              d_k_out_4= {d_k_in[3] , d_k_in[7] , 2'b11};
    657                                                          end 
    658                                                          else if( data_valid[12] == 0 && data_valid[0] == 1) begin
    659                                                                  if(generation>=3) begin
    660                                                                      dataout_1= {data[7:0] , data[39:32] , data[71:64] , 8'b0};
    661                                                                      dataout_2= {data[15:8] , data[47:40] , data[79:72] , 8'b0}; 
    662                                                                      dataout_3= {data[23:16] , data[55:48] , data[87:80] , 8'b0};
    663                                                                      dataout_4= {data[31:24] , data[63:56] , data[95:88] , 8'b0};
    664                                                                  end
    665                                                                  else begin
    666                                                                      dataout_1= {data[7:0] , data[39:32] , data[71:64] , 8'hf7};
    667                                                                      dataout_2= {data[15:8] , data[47:40] , data[79:72] , 8'hf7}; 
    668                                                                      dataout_3= {data[23:16] , data[55:48] , data[87:80] , 8'hf7};
    669                                                                      dataout_4= {data[31:24] , data[63:56] , data[95:88] , 8'hf7};                        
    670                                                                  end
    671                                              
    672                                              
    673                                                              d_k_out_1= {d_k_in[0] , d_k_in[4] , d_k_in[8] , 1'b1};
    674                                                              d_k_out_2= {d_k_in[1] , d_k_in[5] , d_k_in[9] , 1'b1};
    675                                                              d_k_out_3= {d_k_in[2] , d_k_in[6] , d_k_in[10] , 1'b1};
    676                                                              d_k_out_4= {d_k_in[3] , d_k_in[7] , d_k_in[11] , 1'b1};
    677                                                          end     
    678                                                end
    679                                              
    680                                               /* else if (pipe_width == 8 && number_of_lanes == 8) begin
    681                                              
    682                                                              data_valid_out_1= 1'b1;
    683                                                              data_valid_out_2= 1'b1;
    684                                                              data_valid_out_3= 1'b1;
    685                                                              data_valid_out_4= 1'b1;
    686                                                              data_valid_out_5= 1'b1;
    687                                                              data_valid_out_6= 1'b1;
    688                                                              data_valid_out_7= 1'b1;
    689                                                              data_valid_out_8= 1'b1;
    690                                              
    691                                                          if(data_valid[7] == 1 && data_valid[0] == 1) begin
    692                                                              dataout_1= data[7:0];
    693                                                              dataout_2= data[15:8]; 
    694                                                              dataout_3= data[23:16];
    695                                                              dataout_4= data[31:24];
    696                                                              dataout_5= data[39:32];
    697                                                              dataout_6= data[47:40]; 
    698                                                              dataout_7= data[55:48];
    699                                                              dataout_8= data[63:56];
    700                                              
    701                                                              d_k_out_1= d_k_in[0];
    702                                                              d_k_out_2= d_k_in[1];
    703                                                              d_k_out_3= d_k_in[2];
    704                                                              d_k_out_4= d_k_in[3];
    705                                                              d_k_out_5= d_k_in[4];
    706                                                              d_k_out_6= d_k_in[5];
    707                                                              d_k_out_7= d_k_in[6];
    708                                                              d_k_out_8= d_k_in[7]; 
    709                                                          end
    710                                                          else if(data_valid[4] == 0 && data_valid[0] == 1) begin
    711                                                                  if(generation>=3) begin
    712                                                                      dataout_1= data[7:0];
    713                                                                      dataout_2= data[15:8]; 
    714                                                                      dataout_3= data[23:16];
    715                                                                      dataout_4= data[31:24];
    716                                                                      dataout_5= 8'b0;
    717                                                                      dataout_6= 8'b0; 
    718                                                                      dataout_7= 8'b0;
    719                                                                      dataout_8= 8'b0;  
    720                                                                  end
    721                                                                  else begin
    722                                                                      dataout_1= data[7:0];
    723                                                                      dataout_2= data[15:8]; 
    724                                                                      dataout_3= data[23:16];
    725                                                                      dataout_4= data[31:24];
    726                                                                      dataout_5= 8'hf7;
    727                                                                      dataout_6= 8'hf7; 
    728                                                                      dataout_7= 8'hf7;
    729                                                                      dataout_8= 8'hf7;                        
    730                                                                  end
    731                                              
    732                                              
    733                                                              d_k_out_1= d_k_in[0];
    734                                                              d_k_out_2= d_k_in[1];
    735                                                              d_k_out_3= d_k_in[2];
    736                                                              d_k_out_4= d_k_in[3];
    737                                                              d_k_out_5= 1;
    738                                                              d_k_out_6= 1;
    739                                                              d_k_out_7= 1;
    740                                                              d_k_out_8= 1; 
    741                                                          end
    742                                                end
    743                                              
    744                                                else if (pipe_width == 16 && number_of_lanes == 8) begin
    745                                              
    746                                                              data_valid_out_1= 1'b1;
    747                                                              data_valid_out_2= 1'b1;
    748                                                              data_valid_out_3= 1'b1;
    749                                                              data_valid_out_4= 1'b1;
    750                                                              data_valid_out_5= 1'b1;
    751                                                              data_valid_out_6= 1'b1;
    752                                                              data_valid_out_7= 1'b1;
    753                                                              data_valid_out_8= 1'b1;  
    754                                              
    755                                                          if(data_valid[15] == 1 && data_valid[0] == 1) begin
    756                                                              dataout_1= {data[7:0] , data[71:64]};
    757                                                              dataout_2= {data[15:8] , data[79:72]}; 
    758                                                              dataout_3= {data[23:16] , data[87:80]};
    759                                                              dataout_4= {data[31:24] , data[95:88]};
    760                                                              dataout_5= {data[39:32] , data[103:96]};
    761                                                              dataout_6= {data[47:40] , data[111:104]}; 
    762                                                              dataout_7= {data[55:48] , data[119:112]};
    763                                                              dataout_8= {data[63:56] , data[127:120]};
    764                                              
    765                                                              d_k_out_1= {d_k_in[0] , d_k_in[8]};
    766                                                              d_k_out_2= {d_k_in[1] , d_k_in[9]};
    767                                                              d_k_out_3= {d_k_in[2] , d_k_in[10]};
    768                                                              d_k_out_4= {d_k_in[3] , d_k_in[11]};
    769                                                              d_k_out_5= {d_k_in[4] , d_k_in[12]};
    770                                                              d_k_out_6= {d_k_in[5] , d_k_in[13]};
    771                                                              d_k_out_7= {d_k_in[6] , d_k_in[14]};
    772                                                              d_k_out_8= {d_k_in[7] , d_k_in[15]};                
    773                                                          end
    774                                                          else if(data_valid[4] == 0 && data_valid[0] == 1) begin
    775                                                                  if(generation>=3) begin
    776                                                                      dataout_1= {data[7:0] , 8'b0};
    777                                                                      dataout_2= {data[15:8] , 8'b0}; 
    778                                                                      dataout_3= {data[23:16] , 8'b0};
    779                                                                      dataout_4= {data[31:24] , 8'b0};
    780                                                                      dataout_5= {16'b0};
    781                                                                      dataout_6= {16'b0}; 
    782                                                                      dataout_7= {16'b0};
    783                                                                      dataout_8= {16'b0};             
    784                                                                  end
    785                                                                  else begin
    786                                                                      dataout_1= {data[7:0] , 8'hf7};
    787                                                                      dataout_2= {data[15:8] , 8'hf7}; 
    788                                                                      dataout_3= {data[23:16] , 8'hf7};
    789                                                                      dataout_4= {data[31:24] , 8'hf7};
    790                                                                      dataout_5= {16'hf7f7};
    791                                                                      dataout_6= {16'hf7f7}; 
    792                                                                      dataout_7= {16'hf7f7};
    793                                                                      dataout_8= {16'hf7f7};                        
    794                                                                  end
    795                                              
    796                                              
    797                                                              d_k_out_1= {d_k_in[0] , 1'b1};
    798                                                              d_k_out_2= {d_k_in[1] , 1'b1};
    799                                                              d_k_out_3= {d_k_in[2] , 1'b1};
    800                                                              d_k_out_4= {d_k_in[3] , 1'b1};
    801                                                              d_k_out_5= 2'b11;
    802                                                              d_k_out_6= 2'b11;
    803                                                              d_k_out_7= 2'b11;
    804                                                              d_k_out_8= 2'b11;                
    805                                                          end
    806                                                          else if(data_valid[8] == 0 && data_valid[0] == 1) begin
    807                                                                  if(generation>=3) begin
    808                                                                      dataout_1= {data[7:0] , 8'b0};
    809                                                                      dataout_2= {data[15:8] , 8'b0}; 
    810                                                                      dataout_3= {data[23:16] , 8'b0};
    811                                                                      dataout_4= {data[31:24] , 8'b0};
    812                                                                      dataout_5= {data[39:32] , 8'b0};
    813                                                                      dataout_6= {data[47:40] , 8'b0}; 
    814                                                                      dataout_7= {data[55:48] , 8'b0};
    815                                                                      dataout_8= {data[63:56] , 8'b0};
    816                                                                  end
    817                                                                  else begin
    818                                                                      dataout_1= {data[7:0] , 8'hf7};
    819                                                                      dataout_2= {data[15:8] , 8'hf7}; 
    820                                                                      dataout_3= {data[23:16] , 8'hf7};
    821                                                                      dataout_4= {data[31:24] , 8'hf7};
    822                                                                      dataout_5= {data[39:32] , 8'hf7};
    823                                                                      dataout_6= {data[47:40] , 8'hf7}; 
    824                                                                      dataout_7= {data[55:48] , 8'hf7};
    825                                                                      dataout_8= {data[63:56] , 8'hf7};                        
    826                                                                  end
    827                                              
    828                                              
    829                                                              d_k_out_1= {d_k_in[0] , 1'b1};
    830                                                              d_k_out_2= {d_k_in[1] , 1'b1};
    831                                                              d_k_out_3= {d_k_in[2] , 1'b1};
    832                                                              d_k_out_4= {d_k_in[3] , 1'b1};
    833                                                              d_k_out_5= {d_k_in[4] , 1'b1};
    834                                                              d_k_out_6= {d_k_in[5] , 1'b1};
    835                                                              d_k_out_7= {d_k_in[6] , 1'b1};
    836                                                              d_k_out_8= {d_k_in[7] , 1'b1};                
    837                                                          end
    838                                                          else if(data_valid[12] == 0 && data_valid[0] == 1) begin
    839                                                                  if(generation>=3) begin
    840                                                                      dataout_1= {data[7:0] , data[71:64]};
    841                                                                      dataout_2= {data[15:8] , data[79:72]}; 
    842                                                                      dataout_3= {data[23:16] , data[87:80]};
    843                                                                      dataout_4= {data[31:24] , data[95:88]};
    844                                                                      dataout_5= {data[39:32] , 8'b0};
    845                                                                      dataout_6= {data[47:40] , 8'b0}; 
    846                                                                      dataout_7= {data[55:48] , 8'b0};
    847                                                                      dataout_8= {data[63:56] , 8'b0};
    848                                                                  end
    849                                                                  else begin
    850                                                                      dataout_1= {data[7:0] , data[71:64]};
    851                                                                      dataout_2= {data[15:8] , data[79:72]}; 
    852                                                                      dataout_3= {data[23:16] , data[87:80]};
    853                                                                      dataout_4= {data[31:24] , data[95:88]};
    854                                                                      dataout_5= {data[39:32] , 8'hf7};
    855                                                                      dataout_6= {data[47:40] , 8'hf7}; 
    856                                                                      dataout_7= {data[55:48] , 8'hf7};
    857                                                                      dataout_8= {data[63:56] , 8'hf7};                        
    858                                                                  end
    859                                              
    860                                              
    861                                                              d_k_out_1= {d_k_in[0] , d_k_in[8]};
    862                                                              d_k_out_2= {d_k_in[1] , d_k_in[9]};
    863                                                              d_k_out_3= {d_k_in[2] , d_k_in[10]};
    864                                                              d_k_out_4= {d_k_in[3] , d_k_in[11]};
    865                                                              d_k_out_5= {d_k_in[4] , 1'b1};
    866                                                              d_k_out_6= {d_k_in[5] , 1'b1};
    867                                                              d_k_out_7= {d_k_in[6] , 1'b1};
    868                                                              d_k_out_8= {d_k_in[7] , 1'b1};                
    869                                                          end            
    870                                                end*/
    871                                              
    872                                                else if (pipe_width == 32 && number_of_lanes == 8) begin
    873                                              
    874                                                              data_valid_out_1= 1'b1;
    875                                                              data_valid_out_2= 1'b1;
    876                                                              data_valid_out_3= 1'b1;
    877                                                              data_valid_out_4= 1'b1;
    878                                                              data_valid_out_5= 1'b1;
    879                                                              data_valid_out_6= 1'b1;
    880                                                              data_valid_out_7= 1'b1;
    881                                                              data_valid_out_8= 1'b1;   
    882                                              
    883                                                          if(data_valid[31] == 1 && data_valid[0] == 1) begin
    884                                                              dataout_1= {data[7:0], data[71:64], data[135:128], data[199:192]};
    885                                                              dataout_2= {data[15:8], data[79:72] , data[143:136] , data[207:200]}; 
    886                                                              dataout_3= {data[23:16] , data[87:80] , data[151:144] , data[215:208]};
    887                                                              dataout_4= {data[31:24] , data[95:88] , data[159:152] , data[223:216]};
    888                                                              dataout_5= {data[39:32] , data[103:96] , data[167:160] , data[231:224]};
    889                                                              dataout_6= {data[47:40] , data[111:104] , data[175:168] , data[239:232]}; 
    890                                                              dataout_7= {data[55:48] , data[119:112] , data[183:176] , data[247:240]};
    891                                                              dataout_8= {data[63:56] , data[127:120] , data[191:184] , data[255:248]};
    892                                              
    893                                                              d_k_out_1= {d_k_in[0] , d_k_in[8] , d_k_in[16] , d_k_in[24]};
    894                                                              d_k_out_2= {d_k_in[1] , d_k_in[9] , d_k_in[17] , d_k_in[25]};
    895                                                              d_k_out_3= {d_k_in[2] , d_k_in[10] , d_k_in[18] , d_k_in[26]};
    896                                                              d_k_out_4= {d_k_in[3] , d_k_in[11] , d_k_in[19] , d_k_in[27]};
    897                                                              d_k_out_5= {d_k_in[4] , d_k_in[12] , d_k_in[20] , d_k_in[28]};
    898                                                              d_k_out_6= {d_k_in[5] , d_k_in[13] , d_k_in[21] , d_k_in[29]};
    899                                                              d_k_out_7= {d_k_in[6] , d_k_in[14] , d_k_in[22] , d_k_in[30]};
    900                                                              d_k_out_8= {d_k_in[7] , d_k_in[15] , d_k_in[23] , d_k_in[31]};                 
    901                                                          end
    902                                                          else if(data_valid[4] == 0 && data_valid[0] == 1) begin
    903                                                                  if(generation>=3) begin
    904                                                                      dataout_1= {data[7:0] , 24'b0};
    905                                                                      dataout_2= {data[15:8] , 24'b0}; 
    906                                                                      dataout_3= {data[23:16] , 24'b0};
    907                                                                      dataout_4= {data[31:24] , 24'b0};
    908                                                                      dataout_5= {32'b0};
    909                                                                      dataout_6= {32'b0}; 
    910                                                                      dataout_7= {32'b0};
    911                                                                      dataout_8= {32'b0}; 
    912                                                                  end
    913                                                                  else begin
    914                                                                      dataout_1= {data[7:0] , 24'hf7f7f7};
    915                                                                      dataout_2= {data[15:8] , 24'hf7f7f7}; 
    916                                                                      dataout_3= {data[23:16] , 24'hf7f7f7};
    917                                                                      dataout_4= {data[31:24] , 24'hf7f7f7};
    918                                                                      dataout_5= {32'hf7f7f7f7};
    919                                                                      dataout_6= {32'hf7f7f7f7}; 
    920                                                                      dataout_7= {32'hf7f7f7f7};
    921                                                                      dataout_8= {32'hf7f7f7f7};                        
    922                                                                  end
    923                                              
    924                                              
    925                                                              d_k_out_1= {d_k_in[0] , 3'b111};
    926                                                              d_k_out_2= {d_k_in[1] , 3'b111};
    927                                                              d_k_out_3= {d_k_in[2] , 3'b111};
    928                                                              d_k_out_4= {d_k_in[3] , 3'b111};
    929                                                              d_k_out_5= 4'b1111; 
    930                                                              d_k_out_6= 4'b1111;
    931                                                              d_k_out_7= 4'b1111;
    932                                                              d_k_out_8= 4'b1111;                 
    933                                                          end             
    934                                                          else if(data_valid[8] == 0 && data_valid[0] == 1) begin
    935                                                                  if(generation>=3) begin
    936                                                                      dataout_1= {data[7:0] , 24'b0};
    937                                                                      dataout_2= {data[15:8] , 24'b0}; 
    938                                                                      dataout_3= {data[23:16] , 24'b0};
    939                                                                      dataout_4= {data[31:24] , 24'b0};
    940                                                                      dataout_5= {data[39:32] , 24'b0};
    941                                                                      dataout_6= {data[47:40] , 24'b0}; 
    942                                                                      dataout_7= {data[55:48] , 24'b0};
    943                                                                      dataout_8= {data[63:56] , 24'b0}; 
    944                                                                  end
    945                                                                  else begin
    946                                                                      dataout_1= {data[7:0] , 24'hf7f7f7};
    947                                                                      dataout_2= {data[15:8] , 24'hf7f7f7}; 
    948                                                                      dataout_3= {data[23:16] , 24'hf7f7f7};
    949                                                                      dataout_4= {data[31:24] , 24'hf7f7f7};
    950                                                                      dataout_5= {data[39:32] , 24'hf7f7f7};
    951                                                                      dataout_6= {data[47:40] , 24'hf7f7f7}; 
    952                                                                      dataout_7= {data[55:48] , 24'hf7f7f7};
    953                                                                      dataout_8= {data[63:56] , 24'hf7f7f7};                        
    954                                                                  end
    955                                              
    956                                              
    957                                                              d_k_out_1= {d_k_in[0] , 3'b111};
    958                                                              d_k_out_2= {d_k_in[1] , 3'b111};
    959                                                              d_k_out_3= {d_k_in[2] , 3'b111};
    960                                                              d_k_out_4= {d_k_in[3] , 3'b111};
    961                                                              d_k_out_5= {d_k_in[4] , 3'b111};
    962                                                              d_k_out_6= {d_k_in[5] , 3'b111};
    963                                                              d_k_out_7= {d_k_in[6] , 3'b111};
    964                                                              d_k_out_8= {d_k_in[7] , 3'b111};                 
    965                                                          end
    966                                                          else if(data_valid[12] == 0 && data_valid[0] == 1) begin
    967                                                                  if(generation>=3) begin
    968                                                                      dataout_1= {data[7:0] , data[71:64] , 16'b0};
    969                                                                      dataout_2= {data[15:8] , data[79:72] , 16'b0}; 
    970                                                                      dataout_3= {data[23:16] , data[87:80] , 16'b0};
    971                                                                      dataout_4= {data[31:24] , data[95:88] , 16'b0};
    972                                                                      dataout_5= {data[39:32] , 24'b0};
    973                                                                      dataout_6= {data[47:40] , 24'b0}; 
    974                                                                      dataout_7= {data[55:48] , 24'b0};
    975                                                                      dataout_8= {data[63:56] , 24'b0};       
    976                                                                  end
    977                                                                  else begin
    978                                                                      dataout_1= {data[7:0] , data[71:64] , 16'hf7f7};
    979                                                                      dataout_2= {data[15:8] , data[79:72] , 16'hf7f7}; 
    980                                                                      dataout_3= {data[23:16] , data[87:80] , 16'hf7f7};
    981                                                                      dataout_4= {data[31:24] , data[95:88] , 16'hf7f7};
    982                                                                      dataout_5= {data[39:32] , 24'hf7f7f7};
    983                                                                      dataout_6= {data[47:40] , 24'hf7f7f7}; 
    984                                                                      dataout_7= {data[55:48] , 24'hf7f7f7};
    985                                                                      dataout_8= {data[63:56] , 24'hf7f7f7};                        
    986                                                                  end
    987                                              
    988                                              
    989                                                              d_k_out_1= {d_k_in[0] , d_k_in[8] , 2'b11};
    990                                                              d_k_out_2= {d_k_in[1] , d_k_in[9] , 2'b11};
    991                                                              d_k_out_3= {d_k_in[2] , d_k_in[10] , 2'b11};
    992                                                              d_k_out_4= {d_k_in[3] , d_k_in[11] , 2'b11};
    993                                                              d_k_out_5= {d_k_in[4] , 3'b111};
    994                                                              d_k_out_6= {d_k_in[5] , 3'b111};
    995                                                              d_k_out_7= {d_k_in[6] , 3'b111};
    996                                                              d_k_out_8= {d_k_in[7] , 3'b111};                 
    997                                                          end              
    998                                                          else if(data_valid[16] == 0 && data_valid[0] == 1) begin
    999                                                                      if(generation>=3) begin
    1000                                                                         dataout_1= {data[7:0] , data[71:64] , 16'b0};
    1001                                                                         dataout_2= {data[15:8] , data[79:72] , 16'b0}; 
    1002                                                                         dataout_3= {data[23:16] , data[87:80] , 16'b0};
    1003                                                                         dataout_4= {data[31:24] , data[95:88] , 16'b0};
    1004                                                                         dataout_5= {data[39:32] , data[103:96] , 16'b0};
    1005                                                                         dataout_6= {data[47:40] , data[111:104] , 16'b0}; 
    1006                                                                         dataout_7= {data[55:48] , data[119:112] , 16'b0};
    1007                                                                         dataout_8= {data[63:56] , data[127:120] , 16'b0};
    1008                                                                     end
    1009                                                                     else begin
    1010                                                                         dataout_1= {data[7:0] , data[71:64] , 16'hf7f7};
    1011                                                                         dataout_2= {data[15:8] , data[79:72] , 16'hf7f7}; 
    1012                                                                         dataout_3= {data[23:16] , data[87:80] , 16'hf7f7};
    1013                                                                         dataout_4= {data[31:24] , data[95:88] , 16'hf7f7};
    1014                                                                         dataout_5= {data[39:32] , data[103:96] , 16'hf7f7};
    1015                                                                         dataout_6= {data[47:40] , data[111:104] , 16'hf7f7}; 
    1016                                                                         dataout_7= {data[55:48] , data[119:112] , 16'hf7f7};
    1017                                                                         dataout_8= {data[63:56] , data[127:120] , 16'hf7f7};                            
    1018                                                                     end
    1019                                             
    1020                                             
    1021                                                             d_k_out_1= {d_k_in[0] , d_k_in[8] , 2'b11};
    1022                                                             d_k_out_2= {d_k_in[1] , d_k_in[9] , 2'b11};
    1023                                                             d_k_out_3= {d_k_in[2] , d_k_in[10] , 2'b11};
    1024                                                             d_k_out_4= {d_k_in[3] , d_k_in[11] , 2'b11};
    1025                                                             d_k_out_5= {d_k_in[4] , d_k_in[12] , 2'b11};
    1026                                                             d_k_out_6= {d_k_in[5] , d_k_in[13] , 2'b11};
    1027                                                             d_k_out_7= {d_k_in[6] , d_k_in[14] , 2'b11};
    1028                                                             d_k_out_8= {d_k_in[7] , d_k_in[15] , 2'b11};                 
    1029                                                         end
    1030                                                         else if(data_valid[20] == 0 && data_valid[0] == 1) begin
    1031                                                                 if(generation>=3) begin
    1032                                                                     dataout_1= {data[7:0] , data[71:64] , data[135:128] , 8'b0};
    1033                                                                     dataout_2= {data[15:8] , data[79:72] , data[143:136] , 8'b0}; 
    1034                                                                     dataout_3= {data[23:16] , data[87:80] , data[151:144] , 8'b0};
    1035                                                                     dataout_4= {data[31:24] , data[95:88] , data[159:152] , 8'b0};
    1036                                                                     dataout_5= {data[39:32] , data[103:96] , 16'b0};
    1037                                                                     dataout_6= {data[47:40] , data[111:104] , 16'b0}; 
    1038                                                                     dataout_7= {data[55:48] , data[119:112] , 16'b0};
    1039                                                                     dataout_8= {data[63:56] , data[127:120] , 16'b0};        
    1040                                                                 end
    1041                                                                 else begin
    1042                                                                     dataout_1= {data[7:0] , data[71:64] , data[135:128] , 8'hf7};
    1043                                                                     dataout_2= {data[15:8] , data[79:72] , data[143:136] , 8'hf7}; 
    1044                                                                     dataout_3= {data[23:16] , data[87:80] , data[151:144] , 8'hf7};
    1045                                                                     dataout_4= {data[31:24] , data[95:88] , data[159:152] , 8'hf7};
    1046                                                                     dataout_5= {data[39:32] , data[103:96] , 16'hf7f7};
    1047                                                                     dataout_6= {data[47:40] , data[111:104] , 16'hf7f7}; 
    1048                                                                     dataout_7= {data[55:48] , data[119:112] , 16'hf7f7};
    1049                                                                     dataout_8= {data[63:56] , data[127:120] , 16'hf7f7};                        
    1050                                                                 end
    1051                                             
    1052                                             
    1053                                                             d_k_out_1= {d_k_in[0] , d_k_in[8] , d_k_in[16] , 1'b1};
    1054                                                             d_k_out_2= {d_k_in[1] , d_k_in[9] , d_k_in[17] , 1'b1};
    1055                                                             d_k_out_3= {d_k_in[2] , d_k_in[10] , d_k_in[18] , 1'b1};
    1056                                                             d_k_out_4= {d_k_in[3] , d_k_in[11] , d_k_in[19] , 1'b1};
    1057                                                             d_k_out_5= {d_k_in[4] , d_k_in[12] , 2'b11};
    1058                                                             d_k_out_6= {d_k_in[5] , d_k_in[13] , 2'b11};
    1059                                                             d_k_out_7= {d_k_in[6] , d_k_in[14] , 2'b11};
    1060                                                             d_k_out_8= {d_k_in[7] , d_k_in[15] , 2'b11};                 
    1061                                                         end               
    1062                                                         else if(data_valid[24] == 0 && data_valid[0] == 1) begin
    1063                                                                 if(generation>=3) begin
    1064                                                                     dataout_1= {data[7:0] , data[71:64] , data[135:128] , 8'b0};
    1065                                                                     dataout_2= {data[15:8] , data[79:72] , data[143:136] , 8'b0}; 
    1066                                                                     dataout_3= {data[23:16] , data[87:80] , data[151:144] , 8'b0};
    1067                                                                     dataout_4= {data[31:24] , data[95:88] , data[159:152] , 8'b0};
    1068                                                                     dataout_5= {data[39:32] , data[103:96] , data[167:160] , 8'b0};
    1069                                                                     dataout_6= {data[47:40] , data[111:104] , data[175:168] , 8'b0}; 
    1070                                                                     dataout_7= {data[55:48] , data[119:112] , data[183:176] , 8'b0};
    1071                                                                     dataout_8= {data[63:56] , data[127:120] , data[191:184] , 8'b0};                       
    1072                                                                 end
    1073                                                                 else begin
    1074                                                                     dataout_1= {data[7:0] , data[71:64] , data[135:128] , 8'hf7};
    1075                                                                     dataout_2= {data[15:8] , data[79:72] , data[143:136] , 8'hf7}; 
    1076                                                                     dataout_3= {data[23:16] , data[87:80] , data[151:144] , 8'hf7};
    1077                                                                     dataout_4= {data[31:24] , data[95:88] , data[159:152] , 8'hf7};
    1078                                                                     dataout_5= {data[39:32] , data[103:96] , data[167:160] , 8'hf7};
    1079                                                                     dataout_6= {data[47:40] , data[111:104] , data[175:168] , 8'hf7}; 
    1080                                                                     dataout_7= {data[55:48] , data[119:112] , data[183:176] , 8'hf7};
    1081                                                                     dataout_8= {data[63:56] , data[127:120] , data[191:184] , 8'hf7};                        
    1082                                                                 end
    1083                                             
    1084                                             
    1085                                                             d_k_out_1= {d_k_in[0] , d_k_in[8] , d_k_in[16] , 1'b1};
    1086                                                             d_k_out_2= {d_k_in[1] , d_k_in[9] , d_k_in[17] , 1'b1};
    1087                                                             d_k_out_3= {d_k_in[2] , d_k_in[10] , d_k_in[18] , 1'b1};
    1088                                                             d_k_out_4= {d_k_in[3] , d_k_in[11] , d_k_in[19] , 1'b1};
    1089                                                             d_k_out_5= {d_k_in[4] , d_k_in[12] , d_k_in[20] , 1'b1};
    1090                                                             d_k_out_6= {d_k_in[5] , d_k_in[13] , d_k_in[21] , 1'b1};
    1091                                                             d_k_out_7= {d_k_in[6] , d_k_in[14] , d_k_in[22] , 1'b1};
    1092                                                             d_k_out_8= {d_k_in[7] , d_k_in[15] , d_k_in[23] , 1'b1};                 
    1093                                                         end 
    1094                                                         else if(data_valid[28] == 0 && data_valid[0] == 1) begin
    1095                                                                 if(generation>=3) begin
    1096                                                                     dataout_1= {data[7:0] , data[71:64] , data[135:128] , data[199:192]};
    1097                                                                     dataout_2= {data[15:8] , data[79:72] , data[143:136] , data[207:200]}; 
    1098                                                                     dataout_3= {data[23:16] , data[87:80] , data[151:144] , data[215:208]};
    1099                                                                     dataout_4= {data[31:24] , data[95:88] , data[159:152] , data[223:216]};
    1100                                                                     dataout_5= {data[39:32] , data[103:96] , data[167:160] , 8'b0};
    1101                                                                     dataout_6= {data[47:40] , data[111:104] , data[175:168] , 8'b0}; 
    1102                                                                     dataout_7= {data[55:48] , data[119:112] , data[183:176] , 8'b0};
    1103                                                                     dataout_8= {data[63:56] , data[127:120] , data[191:184] , 8'b0};             
    1104                                                                 end
    1105                                                                 else begin
    1106                                                                     dataout_1= {data[7:0] , data[71:64] , data[135:128] , data[199:192]};
    1107                                                                     dataout_2= {data[15:8] , data[79:72] , data[143:136] , data[207:200]}; 
    1108                                                                     dataout_3= {data[23:16] , data[87:80] , data[151:144] , data[215:208]};
    1109                                                                     dataout_4= {data[31:24] , data[95:88] , data[159:152] , data[223:216]};
    1110                                                                     dataout_5= {data[39:32] , data[103:96] , data[167:160] , 8'hf7};
    1111                                                                     dataout_6= {data[47:40] , data[111:104] , data[175:168] , 8'hf7}; 
    1112                                                                     dataout_7= {data[55:48] , data[119:112] , data[183:176] , 8'hf7};
    1113                                                                     dataout_8= {data[63:56] , data[127:120] , data[191:184] , 8'hf7};                        
    1114                                                                 end
    1115                                             
    1116                                             
    1117                                                             d_k_out_1= {d_k_in[0] , d_k_in[8] , d_k_in[16] , d_k_in[24]};
    1118                                                             d_k_out_2= {d_k_in[1] , d_k_in[9] , d_k_in[17] , d_k_in[25]};
    1119                                                             d_k_out_3= {d_k_in[2] , d_k_in[10] , d_k_in[18] , d_k_in[26]};
    1120                                                             d_k_out_4= {d_k_in[3] , d_k_in[11] , d_k_in[19] , d_k_in[27]};
    1121                                                             d_k_out_5= {d_k_in[4] , d_k_in[12] , d_k_in[20] , 1'b1};
    1122                                                             d_k_out_6= {d_k_in[5] , d_k_in[13] , d_k_in[21] , 1'b1};
    1123                                                             d_k_out_7= {d_k_in[6] , d_k_in[14] , d_k_in[22] , 1'b1};
    1124                                                             d_k_out_8= {d_k_in[7] , d_k_in[15] , d_k_in[23] , 1'b1};                 
    1125                                                         end 
    1126                                               end
    1127                                             
    1128                                               /*else if (pipe_width == 8 && number_of_lanes == 16) begin
    1129                                             
    1130                                                             data_valid_out_1= 1'b1;
    1131                                                             data_valid_out_2= 1'b1;
    1132                                                             data_valid_out_3= 1'b1;
    1133                                                             data_valid_out_4= 1'b1;
    1134                                                             data_valid_out_5= 1'b1;
    1135                                                             data_valid_out_6= 1'b1;
    1136                                                             data_valid_out_7= 1'b1;
    1137                                                             data_valid_out_8= 1'b1;
    1138                                                             data_valid_out_9= 1'b1;
    1139                                                             data_valid_out_10= 1'b1;
    1140                                                             data_valid_out_11= 1'b1;
    1141                                                             data_valid_out_12= 1'b1;
    1142                                                             data_valid_out_13= 1'b1;
    1143                                                             data_valid_out_14= 1'b1;
    1144                                                             data_valid_out_15= 1'b1;
    1145                                                             data_valid_out_16= 1'b1;
    1146                                             
    1147                                                         if(data_valid[15] == 1 && data_valid[0] == 1) begin
    1148                                                             dataout_1= data[7:0];
    1149                                                             dataout_2= data[15:8]; 
    1150                                                             dataout_3= data[23:16];
    1151                                                             dataout_4= data[31:24];
    1152                                                             dataout_5= data[39:32];
    1153                                                             dataout_6= data[47:40]; 
    1154                                                             dataout_7= data[55:48];
    1155                                                             dataout_8= data[63:56];
    1156                                                             dataout_9= data[71:64];
    1157                                                             dataout_10= data[79:72]; 
    1158                                                             dataout_11= data[87:80];
    1159                                                             dataout_12= data[95:88];
    1160                                                             dataout_13= data[103:96];
    1161                                                             dataout_14= data[111:104]; 
    1162                                                             dataout_15= data[119:112];
    1163                                                             dataout_16= data[127:120];
    1164                                             
    1165                                                             d_k_out_1= d_k_in[0];
    1166                                                             d_k_out_2= d_k_in[1];
    1167                                                             d_k_out_3= d_k_in[2];
    1168                                                             d_k_out_4= d_k_in[3];
    1169                                                             d_k_out_5= d_k_in[4];
    1170                                                             d_k_out_6= d_k_in[5];
    1171                                                             d_k_out_7= d_k_in[6];
    1172                                                             d_k_out_8= d_k_in[7];
    1173                                                             d_k_out_9= d_k_in[8];
    1174                                                             d_k_out_10= d_k_in[9];
    1175                                                             d_k_out_11= d_k_in[10];
    1176                                                             d_k_out_12= d_k_in[11];
    1177                                                             d_k_out_13= d_k_in[12];
    1178                                                             d_k_out_14= d_k_in[13];
    1179                                                             d_k_out_15= d_k_in[14];
    1180                                                             d_k_out_16= d_k_in[15];   
    1181                                                         end
    1182                                                         else if(data_valid[4] == 0 && data_valid[0] == 1) begin
    1183                                                                 if(generation>=3) begin
    1184                                                                     dataout_1= data[7:0];
    1185                                                                     dataout_2= data[15:8]; 
    1186                                                                     dataout_3= data[23:16];
    1187                                                                     dataout_4= data[31:24];
    1188                                                                     dataout_5= 8'b0;
    1189                                                                     dataout_6= 8'b0; 
    1190                                                                     dataout_7= 8'b0;
    1191                                                                     dataout_8= 8'b0;
    1192                                                                     dataout_9= 8'b0;
    1193                                                                     dataout_10= 8'b0; 
    1194                                                                     dataout_11= 8'b0;
    1195                                                                     dataout_12= 8'b0;
    1196                                                                     dataout_13= 8'b0;
    1197                                                                     dataout_14= 8'b0; 
    1198                                                                     dataout_15= 8'b0;
    1199                                                                     dataout_16= 8'b0;     
    1200                                                                 end
    1201                                                                 else begin
    1202                                                                     dataout_1= data[7:0];
    1203                                                                     dataout_2= data[15:8]; 
    1204                                                                     dataout_3= data[23:16];
    1205                                                                     dataout_4= data[31:24];
    1206                                                                     dataout_5= 8'hf7;
    1207                                                                     dataout_6= 8'hf7; 
    1208                                                                     dataout_7= 8'hf7;
    1209                                                                     dataout_8= 8'hf7;
    1210                                                                     dataout_9= 8'hf7;
    1211                                                                     dataout_10= 8'hf7; 
    1212                                                                     dataout_11= 8'hf7;
    1213                                                                     dataout_12= 8'hf7;
    1214                                                                     dataout_13= 8'hf7;
    1215                                                                     dataout_14= 8'hf7; 
    1216                                                                     dataout_15= 8'hf7;
    1217                                                                     dataout_16= 8'hf7;                        
    1218                                                                 end
    1219                                             
    1220                                             
    1221                                                             d_k_out_1= d_k_in[0];
    1222                                                             d_k_out_2= d_k_in[1];
    1223                                                             d_k_out_3= d_k_in[2];
    1224                                                             d_k_out_4= d_k_in[3];
    1225                                                             d_k_out_5= 1;
    1226                                                             d_k_out_6= 1;
    1227                                                             d_k_out_7= 1;
    1228                                                             d_k_out_8= 1;
    1229                                                             d_k_out_9= 1;
    1230                                                             d_k_out_10= 1;
    1231                                                             d_k_out_11= 1;
    1232                                                             d_k_out_12= 1;
    1233                                                             d_k_out_13= 1;
    1234                                                             d_k_out_14= 1;
    1235                                                             d_k_out_15= 1;
    1236                                                             d_k_out_16= 1;   
    1237                                                         end            
    1238                                                         else if(data_valid[8] == 0 && data_valid[0] == 1) begin
    1239                                                                 if(generation>=3) begin
    1240                                                                     dataout_1= data[7:0];
    1241                                                                     dataout_2= data[15:8]; 
    1242                                                                     dataout_3= data[23:16];
    1243                                                                     dataout_4= data[31:24];
    1244                                                                     dataout_5= data[39:32];
    1245                                                                     dataout_6= data[47:40]; 
    1246                                                                     dataout_7= data[55:48];
    1247                                                                     dataout_8= data[63:56];
    1248                                                                     dataout_9= 8'b0;
    1249                                                                     dataout_10= 8'b0; 
    1250                                                                     dataout_11= 8'b0;
    1251                                                                     dataout_12= 8'b0;
    1252                                                                     dataout_13= 8'b0;
    1253                                                                     dataout_14= 8'b0; 
    1254                                                                     dataout_15= 8'b0;
    1255                                                                     dataout_16= 8'b0;          
    1256                                                                 end
    1257                                                                 else begin
    1258                                                                     dataout_1= data[7:0];
    1259                                                                     dataout_2= data[15:8]; 
    1260                                                                     dataout_3= data[23:16];
    1261                                                                     dataout_4= data[31:24];
    1262                                                                     dataout_5= data[39:32];
    1263                                                                     dataout_6= data[47:40]; 
    1264                                                                     dataout_7= data[55:48];
    1265                                                                     dataout_8= data[63:56];
    1266                                                                     dataout_9= 8'hf7;
    1267                                                                     dataout_10= 8'hf7; 
    1268                                                                     dataout_11= 8'hf7;
    1269                                                                     dataout_12= 8'hf7;
    1270                                                                     dataout_13= 8'hf7;
    1271                                                                     dataout_14= 8'hf7; 
    1272                                                                     dataout_15= 8'hf7;
    1273                                                                     dataout_16= 8'hf7;                        
    1274                                                                 end
    1275                                             
    1276                                             
    1277                                                             d_k_out_1= d_k_in[0];
    1278                                                             d_k_out_2= d_k_in[1];
    1279                                                             d_k_out_3= d_k_in[2];
    1280                                                             d_k_out_4= d_k_in[3];
    1281                                                             d_k_out_5= d_k_in[4];
    1282                                                             d_k_out_6= d_k_in[5];
    1283                                                             d_k_out_7= d_k_in[6];
    1284                                                             d_k_out_8= d_k_in[7];
    1285                                                             d_k_out_9= 1;
    1286                                                             d_k_out_10= 1;
    1287                                                             d_k_out_11= 1;
    1288                                                             d_k_out_12= 1;
    1289                                                             d_k_out_13= 1;
    1290                                                             d_k_out_14= 1;
    1291                                                             d_k_out_15= 1;
    1292                                                             d_k_out_16= 1;   
    1293                                                         end
    1294                                                         else if(data_valid[12] == 0 && data_valid[0] == 1) begin
    1295                                                                 if(generation>=3) begin
    1296                                                                     dataout_1= data[7:0];
    1297                                                                     dataout_2= data[15:8]; 
    1298                                                                     dataout_3= data[23:16];
    1299                                                                     dataout_4= data[31:24];
    1300                                                                     dataout_5= data[39:32];
    1301                                                                     dataout_6= data[47:40]; 
    1302                                                                     dataout_7= data[55:48];
    1303                                                                     dataout_8= data[63:56];
    1304                                                                     dataout_9= data[71:64];
    1305                                                                     dataout_10= data[79:72]; 
    1306                                                                     dataout_11= data[87:80];
    1307                                                                     dataout_12= data[95:88];
    1308                                                                     dataout_13= 8'b0;
    1309                                                                     dataout_14= 8'b0; 
    1310                                                                     dataout_15= 8'b0;
    1311                                                                     dataout_16= 8'b0;       
    1312                                                                 end
    1313                                                                 else begin
    1314                                                                     dataout_1= data[7:0];
    1315                                                                     dataout_2= data[15:8]; 
    1316                                                                     dataout_3= data[23:16];
    1317                                                                     dataout_4= data[31:24];
    1318                                                                     dataout_5= data[39:32];
    1319                                                                     dataout_6= data[47:40]; 
    1320                                                                     dataout_7= data[55:48];
    1321                                                                     dataout_8= data[63:56];
    1322                                                                     dataout_9= data[71:64];
    1323                                                                     dataout_10= data[79:72]; 
    1324                                                                     dataout_11= data[87:80];
    1325                                                                     dataout_12= data[95:88];
    1326                                                                     dataout_13= 8'hf7;
    1327                                                                     dataout_14= 8'hf7; 
    1328                                                                     dataout_15= 8'hf7;
    1329                                                                     dataout_16= 8'hf7;                        
    1330                                                                 end
    1331                                             
    1332                                             
    1333                                                             d_k_out_1= d_k_in[0];
    1334                                                             d_k_out_2= d_k_in[1];
    1335                                                             d_k_out_3= d_k_in[2];
    1336                                                             d_k_out_4= d_k_in[3];
    1337                                                             d_k_out_5= d_k_in[4];
    1338                                                             d_k_out_6= d_k_in[5];
    1339                                                             d_k_out_7= d_k_in[6];
    1340                                                             d_k_out_8= d_k_in[7];
    1341                                                             d_k_out_9= d_k_in[8];
    1342                                                             d_k_out_10= d_k_in[9];
    1343                                                             d_k_out_11= d_k_in[10];
    1344                                                             d_k_out_12= d_k_in[11];
    1345                                                             d_k_out_13= 1;
    1346                                                             d_k_out_14= 1;
    1347                                                             d_k_out_15= 1;
    1348                                                             d_k_out_16= 1;   
    1349                                                         end
    1350                                             
    1351                                               end
    1352                                             
    1353                                               else if (pipe_width == 16 && number_of_lanes == 16) begin
    1354                                             
    1355                                                             data_valid_out_1= 1'b1;
    1356                                                             data_valid_out_2= 1'b1;
    1357                                                             data_valid_out_3= 1'b1;
    1358                                                             data_valid_out_4= 1'b1;
    1359                                                             data_valid_out_5= 1'b1;
    1360                                                             data_valid_out_6= 1'b1;
    1361                                                             data_valid_out_7= 1'b1;
    1362                                                             data_valid_out_8= 1'b1;
    1363                                                             data_valid_out_9= 1'b1;
    1364                                                             data_valid_out_10= 1'b1;
    1365                                                             data_valid_out_11= 1'b1;
    1366                                                             data_valid_out_12= 1'b1;
    1367                                                             data_valid_out_13= 1'b1;
    1368                                                             data_valid_out_14= 1'b1;
    1369                                                             data_valid_out_15= 1'b1;
    1370                                                             data_valid_out_16= 1'b1; 
    1371                                             
    1372                                                         if(data_valid[31] == 1 && data_valid[0] == 1) begin
    1373                                                             dataout_1= {data[7:0] , data[135:128]};
    1374                                                             dataout_2= {data[15:8] , data[143:136]}; 
    1375                                                             dataout_3= {data[23:16] , data[151:144]};
    1376                                                             dataout_4= {data[31:24] , data[159:152]};
    1377                                                             dataout_5= {data[39:32] , data[167:160]};
    1378                                                             dataout_6= {data[47:40] , data[175:168]}; 
    1379                                                             dataout_7= {data[55:48] , data[183:176]};
    1380                                                             dataout_8= {data[63:56] , data[191:184]};
    1381                                                             dataout_9= {data[71:64] , data[199:192]};
    1382                                                             dataout_10= {data[79:72] , data[207:200]}; 
    1383                                                             dataout_11= {data[87:80] , data[215:208]};
    1384                                                             dataout_12= {data[95:88] , data[223:216]};
    1385                                                             dataout_13= {data[103:96] , data[231:224]};
    1386                                                             dataout_14= {data[111:104] , data[239:232]};
    1387                                                             dataout_15= {data[119:112] , data[247:240]};
    1388                                                             dataout_16= {data[127:120] , data[255:248]};
    1389                                             
    1390                                                             d_k_out_1= {d_k_in[0] , d_k_in[16]};
    1391                                                             d_k_out_2= {d_k_in[1] , d_k_in[17]};
    1392                                                             d_k_out_3= {d_k_in[2] , d_k_in[18]};
    1393                                                             d_k_out_4= {d_k_in[3] , d_k_in[19]};
    1394                                                             d_k_out_5= {d_k_in[4] , d_k_in[20]};
    1395                                                             d_k_out_6= {d_k_in[5] , d_k_in[21]};
    1396                                                             d_k_out_7= {d_k_in[6] , d_k_in[22]};
    1397                                                             d_k_out_8= {d_k_in[7] , d_k_in[23]};
    1398                                                             d_k_out_9= {d_k_in[8] , d_k_in[24]};
    1399                                                             d_k_out_10= {d_k_in[9] , d_k_in[25]};
    1400                                                             d_k_out_11= {d_k_in[10] , d_k_in[26]};
    1401                                                             d_k_out_12= {d_k_in[11] , d_k_in[27]};
    1402                                                             d_k_out_13= {d_k_in[12] , d_k_in[28]};
    1403                                                             d_k_out_14= {d_k_in[13] , d_k_in[29]};
    1404                                                             d_k_out_15= {d_k_in[14] , d_k_in[30]};
    1405                                                             d_k_out_16= {d_k_in[15] , d_k_in[31]};                
    1406                                                         end
    1407                                                        else if(data_valid[4] == 0 && data_valid[0] == 1) begin
    1408                                                             if(generation>=3) begin
    1409                                                                     dataout_1= {data[7:0] , 8'b0};
    1410                                                                     dataout_2= {data[15:8] , 8'b0}; 
    1411                                                                     dataout_3= {data[23:16] , 8'b0};
    1412                                                                     dataout_4= {data[31:24] , 8'b0};
    1413                                                                     dataout_5= {16'b0};
    1414                                                                     dataout_6= {16'b0}; 
    1415                                                                     dataout_7= {16'b0};
    1416                                                                     dataout_8= {16'b0};
    1417                                                                     dataout_9= {16'b0};
    1418                                                                     dataout_10= {16'b0}; 
    1419                                                                     dataout_11= {16'b0};
    1420                                                                     dataout_12= {16'b0};
    1421                                                                     dataout_13= {16'b0};
    1422                                                                     dataout_14= {16'b0};
    1423                                                                     dataout_15= {16'b0};
    1424                                                                     dataout_16= {16'b0};               
    1425                                                             end
    1426                                                             else begin
    1427                                                                     dataout_1= {data[7:0] , 8'hf7};
    1428                                                                     dataout_2= {data[15:8] , 8'hf7}; 
    1429                                                                     dataout_3= {data[23:16] , 8'hf7};
    1430                                                                     dataout_4= {data[31:24] , 8'hf7};
    1431                                                                     dataout_5= {16'hf7f7};
    1432                                                                     dataout_6= {16'hf7f7}; 
    1433                                                                     dataout_7= {16'hf7f7};
    1434                                                                     dataout_8= {16'hf7f7};
    1435                                                                     dataout_9= {16'hf7f7};
    1436                                                                     dataout_10= {16'hf7f7}; 
    1437                                                                     dataout_11= {16'hf7f7};
    1438                                                                     dataout_12= {16'hf7f7};
    1439                                                                     dataout_13= {16'hf7f7};
    1440                                                                     dataout_14= {16'hf7f7};
    1441                                                                     dataout_15= {16'hf7f7};
    1442                                                                     dataout_16= {16'hf7f7};                    
    1443                                                             end
    1444                                             
    1445                                             
    1446                                                             d_k_out_1= {d_k_in[0] , 1'b1};
    1447                                                             d_k_out_2= {d_k_in[1] , 1'b1};
    1448                                                             d_k_out_3= {d_k_in[2] , 1'b1};
    1449                                                             d_k_out_4= {d_k_in[3] , 1'b1};
    1450                                                             d_k_out_5= 2'b11;
    1451                                                             d_k_out_6= 2'b11;
    1452                                                             d_k_out_7= 2'b11;
    1453                                                             d_k_out_8= 2'b11;
    1454                                                             d_k_out_9= 2'b11;
    1455                                                             d_k_out_10= 2'b11;
    1456                                                             d_k_out_11= 2'b11;
    1457                                                             d_k_out_12= 2'b11;
    1458                                                             d_k_out_13= 2'b11;
    1459                                                             d_k_out_14= 2'b11;
    1460                                                             d_k_out_15= 2'b11;
    1461                                                             d_k_out_16= 2'b11;                
    1462                                                         end             
    1463                                                         else if(data_valid[8] == 0 && data_valid[0] == 1) begin
    1464                                                                 if(generation>=3) begin
    1465                                                                     dataout_1= {data[7:0] , 8'b0};
    1466                                                                     dataout_2= {data[15:8] , 8'b0}; 
    1467                                                                     dataout_3= {data[23:16] , 8'b0};
    1468                                                                     dataout_4= {data[31:24] , 8'b0};
    1469                                                                     dataout_5= {data[39:32] , 8'b0};
    1470                                                                     dataout_6= {data[47:40] , 8'b0}; 
    1471                                                                     dataout_7= {data[55:48] , 8'b0};
    1472                                                                     dataout_8= {data[63:56] , 8'b0};
    1473                                                                     dataout_9= {16'b0};
    1474                                                                     dataout_10=  {16'b0}; 
    1475                                                                     dataout_11=  {16'b0};
    1476                                                                     dataout_12=  {16'b0};
    1477                                                                     dataout_13=  {16'b0};
    1478                                                                     dataout_14=  {16'b0};
    1479                                                                     dataout_15=  {16'b0};
    1480                                                                     dataout_16=  {16'b0};     
    1481                                                                 end
    1482                                                                 else begin
    1483                                                                     dataout_1= {data[7:0] , 8'hf7};
    1484                                                                     dataout_2= {data[15:8] , 8'hf7}; 
    1485                                                                     dataout_3= {data[23:16] , 8'hf7};
    1486                                                                     dataout_4= {data[31:24] , 8'hf7};
    1487                                                                     dataout_5= {data[39:32] , 8'hf7};
    1488                                                                     dataout_6= {data[47:40] , 8'hf7}; 
    1489                                                                     dataout_7= {data[55:48] , 8'hf7};
    1490                                                                     dataout_8= {data[63:56] , 8'hf7};
    1491                                                                     dataout_9= {16'hf7f7};
    1492                                                                     dataout_10=  {16'hf7f7}; 
    1493                                                                     dataout_11=  {16'hf7f7};
    1494                                                                     dataout_12=  {16'hf7f7};
    1495                                                                     dataout_13=  {16'hf7f7};
    1496                                                                     dataout_14=  {16'hf7f7};
    1497                                                                     dataout_15=  {16'hf7f7};
    1498                                                                     dataout_16=  {16'hf7f7};                        
    1499                                                                 end
    1500                                             
    1501                                             
    1502                                                             d_k_out_1= {d_k_in[0] , 1'b1};
    1503                                                             d_k_out_2= {d_k_in[1] , 1'b1};
    1504                                                             d_k_out_3= {d_k_in[2] , 1'b1};
    1505                                                             d_k_out_4= {d_k_in[3] , 1'b1};
    1506                                                             d_k_out_5= {d_k_in[4] , 1'b1};
    1507                                                             d_k_out_6= {d_k_in[5] , 1'b1};
    1508                                                             d_k_out_7= {d_k_in[6] , 1'b1};
    1509                                                             d_k_out_8= {d_k_in[7] , 1'b1};
    1510                                                             d_k_out_9=  2'b11;
    1511                                                             d_k_out_10=  2'b11;
    1512                                                             d_k_out_11=  2'b11;
    1513                                                             d_k_out_12=  2'b11;
    1514                                                             d_k_out_13=  2'b11;
    1515                                                             d_k_out_14=  2'b11;
    1516                                                             d_k_out_15=  2'b11;
    1517                                                             d_k_out_16=  2'b11;                
    1518                                                         end             
    1519                                                         else if(data_valid[12] == 0 && data_valid[0] == 1) begin
    1520                                                                 if(generation>=3) begin
    1521                                                                     dataout_1= {data[7:0] , 8'b0};
    1522                                                                     dataout_2= {data[15:8] , 8'b0}; 
    1523                                                                     dataout_3= {data[23:16] , 8'b0};
    1524                                                                     dataout_4= {data[31:24] , 8'b0};
    1525                                                                     dataout_5= {data[39:32] , 8'b0};
    1526                                                                     dataout_6= {data[47:40] , 8'b0}; 
    1527                                                                     dataout_7= {data[55:48] , 8'b0};
    1528                                                                     dataout_8= {data[63:56] , 8'b0};
    1529                                                                     dataout_9= {data[71:64] , 8'b0};
    1530                                                                     dataout_10= {data[79:72] , 8'b0}; 
    1531                                                                     dataout_11= {data[87:80] , 8'b0};
    1532                                                                     dataout_12= {data[95:88] , 8'b0};
    1533                                                                     dataout_13=  {16'b0};
    1534                                                                     dataout_14=  {16'b0};
    1535                                                                     dataout_15=  {16'b0};
    1536                                                                     dataout_16=  {16'b0};   
    1537                                                                 end
    1538                                                                 else begin
    1539                                                                     dataout_1= {data[7:0] , 8'hf7};
    1540                                                                     dataout_2= {data[15:8] , 8'hf7}; 
    1541                                                                     dataout_3= {data[23:16] , 8'hf7};
    1542                                                                     dataout_4= {data[31:24] , 8'hf7};
    1543                                                                     dataout_5= {data[39:32] , 8'hf7};
    1544                                                                     dataout_6= {data[47:40] , 8'hf7}; 
    1545                                                                     dataout_7= {data[55:48] , 8'hf7};
    1546                                                                     dataout_8= {data[63:56] , 8'hf7};
    1547                                                                     dataout_9= {data[71:64] , 8'hf7};
    1548                                                                     dataout_10= {data[79:72] , 8'hf7}; 
    1549                                                                     dataout_11= {data[87:80] , 8'hf7};
    1550                                                                     dataout_12= {data[95:88] , 8'hf7};
    1551                                                                     dataout_13=  {16'hf7f7};
    1552                                                                     dataout_14=  {16'hf7f7};
    1553                                                                     dataout_15=  {16'hf7f7};
    1554                                                                     dataout_16=  {16'hf7f7};                        
    1555                                                                 end
    1556                                             
    1557                                             
    1558                                                             d_k_out_1= {d_k_in[0] , 1'b1};
    1559                                                             d_k_out_2= {d_k_in[1] , 1'b1};
    1560                                                             d_k_out_3= {d_k_in[2] , 1'b1};
    1561                                                             d_k_out_4= {d_k_in[3] , 1'b1};
    1562                                                             d_k_out_5= {d_k_in[4] , 1'b1};
    1563                                                             d_k_out_6= {d_k_in[5] , 1'b1};
    1564                                                             d_k_out_7= {d_k_in[6] , 1'b1};
    1565                                                             d_k_out_8= {d_k_in[7] , 1'b1};
    1566                                                             d_k_out_9= {d_k_in[8] , 1'b1};
    1567                                                             d_k_out_10= {d_k_in[9] , 1'b1};
    1568                                                             d_k_out_11= {d_k_in[10] , 1'b1};
    1569                                                             d_k_out_12= {d_k_in[11] , 1'b1};
    1570                                                             d_k_out_13=  2'b11;
    1571                                                             d_k_out_14=  2'b11;
    1572                                                             d_k_out_15=  2'b11;
    1573                                                             d_k_out_16=  2'b11;                
    1574                                                         end                        
    1575                                                         else if(data_valid[16] == 0 && data_valid[0] == 1) begin
    1576                                                                 if(generation>=3) begin
    1577                                                                     dataout_1= {data[7:0] , 8'b0};
    1578                                                                     dataout_2= {data[15:8] , 8'b0}; 
    1579                                                                     dataout_3= {data[23:16] ,8'b0};
    1580                                                                     dataout_4= {data[31:24] , 8'b0};
    1581                                                                     dataout_5= {data[39:32] , 8'b0};
    1582                                                                     dataout_6= {data[47:40] , 8'b0}; 
    1583                                                                     dataout_7= {data[55:48] , 8'b0};
    1584                                                                     dataout_8= {data[63:56] , 8'b0};
    1585                                                                     dataout_9= {data[71:64] , 8'b0};
    1586                                                                     dataout_10= {data[79:72] , 8'b0}; 
    1587                                                                     dataout_11= {data[87:80] , 8'b0};
    1588                                                                     dataout_12= {data[95:88] , 8'b0};
    1589                                                                     dataout_13= {data[103:96] , 8'b0};
    1590                                                                     dataout_14= {data[111:104] , 8'b0};
    1591                                                                     dataout_15= {data[119:112] , 8'b0};
    1592                                                                     dataout_16= {data[127:120] , 8'b0};
    1593                                                                 end
    1594                                                                 else begin
    1595                                                                     dataout_1= {data[7:0] , 8'hf7};
    1596                                                                     dataout_2= {data[15:8] , 8'hf7}; 
    1597                                                                     dataout_3= {data[23:16] ,8'hf7};
    1598                                                                     dataout_4= {data[31:24] , 8'hf7};
    1599                                                                     dataout_5= {data[39:32] , 8'hf7};
    1600                                                                     dataout_6= {data[47:40] , 8'hf7}; 
    1601                                                                     dataout_7= {data[55:48] , 8'hf7};
    1602                                                                     dataout_8= {data[63:56] , 8'hf7};
    1603                                                                     dataout_9= {data[71:64] , 8'hf7};
    1604                                                                     dataout_10= {data[79:72] , 8'hf7}; 
    1605                                                                     dataout_11= {data[87:80] , 8'hf7};
    1606                                                                     dataout_12= {data[95:88] , 8'hf7};
    1607                                                                     dataout_13= {data[103:96] , 8'hf7};
    1608                                                                     dataout_14= {data[111:104] , 8'hf7};
    1609                                                                     dataout_15= {data[119:112] , 8'hf7};
    1610                                                                     dataout_16= {data[127:120] , 8'hf7};                        
    1611                                                                 end
    1612                                             
    1613                                             
    1614                                                             d_k_out_1= {d_k_in[0] , 1'b1};
    1615                                                             d_k_out_2= {d_k_in[1] , 1'b1};
    1616                                                             d_k_out_3= {d_k_in[2] , 1'b1};
    1617                                                             d_k_out_4= {d_k_in[3] , 1'b1};
    1618                                                             d_k_out_5= {d_k_in[4] , 1'b1};
    1619                                                             d_k_out_6= {d_k_in[5] , 1'b1};
    1620                                                             d_k_out_7= {d_k_in[6] , 1'b1};
    1621                                                             d_k_out_8= {d_k_in[7] , 1'b1};
    1622                                                             d_k_out_9= {d_k_in[8] , 1'b1};
    1623                                                             d_k_out_10= {d_k_in[9] , 1'b1};
    1624                                                             d_k_out_11= {d_k_in[10] , 1'b1};
    1625                                                             d_k_out_12= {d_k_in[11] , 1'b1};
    1626                                                             d_k_out_13= {d_k_in[12] , 1'b1};
    1627                                                             d_k_out_14= {d_k_in[13] , 1'b1};
    1628                                                             d_k_out_15= {d_k_in[14] , 1'b1};
    1629                                                             d_k_out_16= {d_k_in[15] , 1'b1};                
    1630                                                         end            
    1631                                                         else if(data_valid[20] == 0 && data_valid[0] == 1) begin
    1632                                                                 if(generation>=3) begin
    1633                                                                     dataout_1= {data[7:0] , data[135:128]};
    1634                                                                     dataout_2= {data[15:8] , data[143:136]}; 
    1635                                                                     dataout_3= {data[23:16] , data[151:144]};
    1636                                                                     dataout_4= {data[31:24] , data[159:152]};
    1637                                                                     dataout_5= {data[39:32] , 8'b0};
    1638                                                                     dataout_6= {data[47:40] , 8'b0}; 
    1639                                                                     dataout_7= {data[55:48] , 8'b0};
    1640                                                                     dataout_8= {data[63:56] , 8'b0};
    1641                                                                     dataout_9= {data[71:64] , 8'b0};
    1642                                                                     dataout_10= {data[79:72] , 8'b0}; 
    1643                                                                     dataout_11= {data[87:80] , 8'b0};
    1644                                                                     dataout_12= {data[95:88] , 8'b0};
    1645                                                                     dataout_13= {data[103:96] , 8'b0};
    1646                                                                     dataout_14= {data[111:104] , 8'b0};
    1647                                                                     dataout_15= {data[119:112] , 8'b0};
    1648                                                                     dataout_16= {data[127:120] , 8'b0};         
    1649                                                                 end
    1650                                                                 else begin
    1651                                                                     dataout_1= {data[7:0] , data[135:128]};
    1652                                                                     dataout_2= {data[15:8] , data[143:136]}; 
    1653                                                                     dataout_3= {data[23:16] , data[151:144]};
    1654                                                                     dataout_4= {data[31:24] , data[159:152]};
    1655                                                                     dataout_5= {data[39:32] , 8'hf7};
    1656                                                                     dataout_6= {data[47:40] , 8'hf7}; 
    1657                                                                     dataout_7= {data[55:48] , 8'hf7};
    1658                                                                     dataout_8= {data[63:56] , 8'hf7};
    1659                                                                     dataout_9= {data[71:64] , 8'hf7};
    1660                                                                     dataout_10= {data[79:72] , 8'hf7}; 
    1661                                                                     dataout_11= {data[87:80] , 8'hf7};
    1662                                                                     dataout_12= {data[95:88] , 8'hf7};
    1663                                                                     dataout_13= {data[103:96] , 8'hf7};
    1664                                                                     dataout_14= {data[111:104] , 8'hf7};
    1665                                                                     dataout_15= {data[119:112] , 8'hf7};
    1666                                                                     dataout_16= {data[127:120] , 8'hf7};                        
    1667                                                                 end
    1668                                             
    1669                                             
    1670                                                             d_k_out_1= {d_k_in[0] , d_k_in[16]};
    1671                                                             d_k_out_2= {d_k_in[1] , d_k_in[17]};
    1672                                                             d_k_out_3= {d_k_in[2] , d_k_in[18]};
    1673                                                             d_k_out_4= {d_k_in[3] , d_k_in[19]};
    1674                                                             d_k_out_5= {d_k_in[4] , 1'b1};
    1675                                                             d_k_out_6= {d_k_in[5] , 1'b1};
    1676                                                             d_k_out_7= {d_k_in[6] , 1'b1};
    1677                                                             d_k_out_8= {d_k_in[7] , 1'b1};
    1678                                                             d_k_out_9= {d_k_in[8] , 1'b1};
    1679                                                             d_k_out_10= {d_k_in[9] , 1'b1};
    1680                                                             d_k_out_11= {d_k_in[10] , 1'b1};
    1681                                                             d_k_out_12= {d_k_in[11] , 1'b1};
    1682                                                             d_k_out_13= {d_k_in[12] , 1'b1};
    1683                                                             d_k_out_14= {d_k_in[13] , 1'b1};
    1684                                                             d_k_out_15= {d_k_in[14] , 1'b1};
    1685                                                             d_k_out_16= {d_k_in[15] , 1'b1};                
    1686                                                         end                        
    1687                                                         else if(data_valid[24] == 0 && data_valid[0] == 1) begin
    1688                                                                 if(generation>=3) begin
    1689                                                                     dataout_1= {data[7:0] , data[135:128]};
    1690                                                                     dataout_2= {data[15:8] , data[143:136]}; 
    1691                                                                     dataout_3= {data[23:16] , data[151:144]};
    1692                                                                     dataout_4= {data[31:24] , data[159:152]};
    1693                                                                     dataout_5= {data[39:32] , data[167:160]};
    1694                                                                     dataout_6= {data[47:40] , data[175:168]}; 
    1695                                                                     dataout_7= {data[55:48] , data[183:176]};
    1696                                                                     dataout_8= {data[63:56] , data[191:184]};
    1697                                                                     dataout_9= {data[71:64] , 8'b0};
    1698                                                                     dataout_10= {data[79:72] , 8'b0}; 
    1699                                                                     dataout_11= {data[87:80] , 8'b0};
    1700                                                                     dataout_12= {data[95:88] , 8'b0};
    1701                                                                     dataout_13= {data[103:96] , 8'b0};
    1702                                                                     dataout_14= {data[111:104] , 8'b0};
    1703                                                                     dataout_15= {data[119:112] , 8'b0};
    1704                                                                     dataout_16= {data[127:120] , 8'b0};
    1705                                                                 end
    1706                                                                 else begin
    1707                                                                     dataout_1= {data[7:0] , data[135:128]};
    1708                                                                     dataout_2= {data[15:8] , data[143:136]}; 
    1709                                                                     dataout_3= {data[23:16] , data[151:144]};
    1710                                                                     dataout_4= {data[31:24] , data[159:152]};
    1711                                                                     dataout_5= {data[39:32] , data[167:160]};
    1712                                                                     dataout_6= {data[47:40] , data[175:168]}; 
    1713                                                                     dataout_7= {data[55:48] , data[183:176]};
    1714                                                                     dataout_8= {data[63:56] , data[191:184]};
    1715                                                                     dataout_9= {data[71:64] , 8'hf7};
    1716                                                                     dataout_10= {data[79:72] , 8'hf7}; 
    1717                                                                     dataout_11= {data[87:80] , 8'hf7};
    1718                                                                     dataout_12= {data[95:88] , 8'hf7};
    1719                                                                     dataout_13= {data[103:96] , 8'hf7};
    1720                                                                     dataout_14= {data[111:104] , 8'hf7};
    1721                                                                     dataout_15= {data[119:112] , 8'hf7};
    1722                                                                     dataout_16= {data[127:120] , 8'hf7};                        
    1723                                                                 end
    1724                                             
    1725                                             
    1726                                                             d_k_out_1= {d_k_in[0] , d_k_in[16]};
    1727                                                             d_k_out_2= {d_k_in[1] , d_k_in[17]};
    1728                                                             d_k_out_3= {d_k_in[2] , d_k_in[18]};
    1729                                                             d_k_out_4= {d_k_in[3] , d_k_in[19]};
    1730                                                             d_k_out_5= {d_k_in[4] , d_k_in[20]};
    1731                                                             d_k_out_6= {d_k_in[5] , d_k_in[21]};
    1732                                                             d_k_out_7= {d_k_in[6] , d_k_in[22]};
    1733                                                             d_k_out_8= {d_k_in[7] , d_k_in[23]};
    1734                                                             d_k_out_9= {d_k_in[8] , 1'b1};
    1735                                                             d_k_out_10= {d_k_in[9] , 1'b1};
    1736                                                             d_k_out_11= {d_k_in[10] , 1'b1};
    1737                                                             d_k_out_12= {d_k_in[11] , 1'b1};
    1738                                                             d_k_out_13= {d_k_in[12] , 1'b1};
    1739                                                             d_k_out_14= {d_k_in[13] , 1'b1};
    1740                                                             d_k_out_15= {d_k_in[14] , 1'b1};
    1741                                                             d_k_out_16= {d_k_in[15] , 1'b1};                
    1742                                                         end            
    1743                                                         else if(data_valid[28] == 0 && data_valid[0] == 1) begin
    1744                                                                 if(generation>=3) begin
    1745                                                                     dataout_1= {data[7:0] , data[135:128]};
    1746                                                                     dataout_2= {data[15:8] , data[143:136]}; 
    1747                                                                     dataout_3= {data[23:16] , data[151:144]};
    1748                                                                     dataout_4= {data[31:24] , data[159:152]};
    1749                                                                     dataout_5= {data[39:32] , data[167:160]};
    1750                                                                     dataout_6= {data[47:40] , data[175:168]}; 
    1751                                                                     dataout_7= {data[55:48] , data[183:176]};
    1752                                                                     dataout_8= {data[63:56] , data[191:184]};
    1753                                                                     dataout_9= {data[71:64] , data[199:192]};
    1754                                                                     dataout_10= {data[79:72] , data[207:200]}; 
    1755                                                                     dataout_11= {data[87:80] , data[215:208]};
    1756                                                                     dataout_12= {data[95:88] , data[223:216]};
    1757                                                                     dataout_13= {data[103:96] , 8'b0};
    1758                                                                     dataout_14= {data[111:104] , 8'b0};
    1759                                                                     dataout_15= {data[119:112] , 8'b0};
    1760                                                                     dataout_16= {data[127:120] , 8'b0};
    1761                                                                 end
    1762                                                                 else begin
    1763                                                                     dataout_1= {data[7:0] , data[135:128]};
    1764                                                                     dataout_2= {data[15:8] , data[143:136]}; 
    1765                                                                     dataout_3= {data[23:16] , data[151:144]};
    1766                                                                     dataout_4= {data[31:24] , data[159:152]};
    1767                                                                     dataout_5= {data[39:32] , data[167:160]};
    1768                                                                     dataout_6= {data[47:40] , data[175:168]}; 
    1769                                                                     dataout_7= {data[55:48] , data[183:176]};
    1770                                                                     dataout_8= {data[63:56] , data[191:184]};
    1771                                                                     dataout_9= {data[71:64] , data[199:192]};
    1772                                                                     dataout_10= {data[79:72] , data[207:200]}; 
    1773                                                                     dataout_11= {data[87:80] , data[215:208]};
    1774                                                                     dataout_12= {data[95:88] , data[223:216]};
    1775                                                                     dataout_13= {data[103:96] , 8'hf7};
    1776                                                                     dataout_14= {data[111:104] , 8'hf7};
    1777                                                                     dataout_15= {data[119:112] , 8'hf7};
    1778                                                                     dataout_16= {data[127:120] , 8'hf7};                        
    1779                                                                 end
    1780                                             
    1781                                             
    1782                                                             d_k_out_1= {d_k_in[0] , d_k_in[16]};
    1783                                                             d_k_out_2= {d_k_in[1] , d_k_in[17]};
    1784                                                             d_k_out_3= {d_k_in[2] , d_k_in[18]};
    1785                                                             d_k_out_4= {d_k_in[3] , d_k_in[19]};
    1786                                                             d_k_out_5= {d_k_in[4] , d_k_in[20]};
    1787                                                             d_k_out_6= {d_k_in[5] , d_k_in[21]};
    1788                                                             d_k_out_7= {d_k_in[6] , d_k_in[22]};
    1789                                                             d_k_out_8= {d_k_in[7] , d_k_in[23]};
    1790                                                             d_k_out_9= {d_k_in[8] , d_k_in[24]};
    1791                                                             d_k_out_10= {d_k_in[9] , d_k_in[25]};
    1792                                                             d_k_out_11= {d_k_in[10] , d_k_in[26]};
    1793                                                             d_k_out_12= {d_k_in[11] , d_k_in[27]};
    1794                                                             d_k_out_13= {d_k_in[12] , 1'b1};
    1795                                                             d_k_out_14= {d_k_in[13] , 1'b1};
    1796                                                             d_k_out_15= {d_k_in[14] , 1'b1};
    1797                                                             d_k_out_16= {d_k_in[15] , 1'b1};                
    1798                                                         end
    1799                                               end*/
    1800                                             
    1801                                               else if (pipe_width == 32 && number_of_lanes == 16) begin
    1802                                             
    1803            1                     474243                     data_valid_out_1= 1'b1;
    1804            1                     474243                     data_valid_out_2= 1'b1;
    1805            1                     474243                     data_valid_out_3= 1'b1;
    1806            1                     474243                     data_valid_out_4= 1'b1;
    1807            1                     474243                     data_valid_out_5= 1'b1;
    1808            1                     474243                     data_valid_out_6= 1'b1;
    1809            1                     474243                     data_valid_out_7= 1'b1;
    1810            1                     474243                     data_valid_out_8= 1'b1;
    1811            1                     474243                     data_valid_out_9= 1'b1;
    1812            1                     474243                     data_valid_out_10= 1'b1;
    1813            1                     474243                     data_valid_out_11= 1'b1;
    1814            1                     474243                     data_valid_out_12= 1'b1;
    1815            1                     474243                     data_valid_out_13= 1'b1;
    1816            1                     474243                     data_valid_out_14= 1'b1;
    1817            1                     474243                     data_valid_out_15= 1'b1;
    1818            1                     474243                     data_valid_out_16= 1'b1;
    1819                                               
    1820                                                         if(data_valid[63] == 1 && data_valid[0] == 1) begin
    1821            1                     474241                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , data[391:384]};
    1822            1                     474241                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , data[399:392]}; 
    1823            1                     474241                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , data[407:400]};
    1824            1                     474241                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , data[415:408]};
    1825            1                     474241                     dataout_5= {data[39:32] , data[167:160] , data[295:288] , data[423:416]};
    1826            1                     474241                     dataout_6= {data[47:40] , data[175:168] , data[303:296] , data[431:424]}; 
    1827            1                     474241                     dataout_7= {data[55:48] , data[183:176] , data[311:304] , data[439:432]};
    1828            1                     474241                     dataout_8= {data[63:56] , data[191:184] , data[319:312] , data[447:440]};
    1829            1                     474241                     dataout_9= {data[71:64] , data[199:192] , data[327:320] , data[455:448]};
    1830            1                     474241                     dataout_10= {data[79:72] , data[207:200] , data[335:328] , data[463:456]}; 
    1831            1                     474241                     dataout_11= {data[87:80] , data[215:208] , data[343:336] , data[471:464]};
    1832            1                     474241                     dataout_12= {data[95:88] , data[223:216] , data[351:344] , data[479:472]};
    1833            1                     474241                     dataout_13= {data[103:96] , data[231:224] , data[359:352] , data[487:480]};
    1834            1                     474241                     dataout_14= {data[111:104] , data[239:232] , data[367:360] , data[495:488]}; 
    1835            1                     474241                     dataout_15= {data[119:112] , data[247:240] , data[375:368] , data[503:496]};
    1836            1                     474241                     dataout_16= {data[127:120] , data[255:248] , data[383:376] , data[511:504]};
    1837                                             
    1838            1                     474241                     d_k_out_1= {d_k_in[0] , d_k_in[16] , d_k_in[32] , d_k_in[48]};
    1839            1                     474241                     d_k_out_2= {d_k_in[1] , d_k_in[17] , d_k_in[33] , d_k_in[49]};
    1840            1                     474241                     d_k_out_3= {d_k_in[2] , d_k_in[18] , d_k_in[34] , d_k_in[50]};
    1841            1                     474241                     d_k_out_4= {d_k_in[3] , d_k_in[19] , d_k_in[35] , d_k_in[51]};
    1842            1                     474241                     d_k_out_5= {d_k_in[4] , d_k_in[20] , d_k_in[36] , d_k_in[52]};
    1843            1                     474241                     d_k_out_6= {d_k_in[5] , d_k_in[21] , d_k_in[37] , d_k_in[53]};
    1844            1                     474241                     d_k_out_7= {d_k_in[6] , d_k_in[22] , d_k_in[38] , d_k_in[54]};
    1845            1                     474241                     d_k_out_8= {d_k_in[7] , d_k_in[23] , d_k_in[39] , d_k_in[55]};
    1846            1                     474241                     d_k_out_9= {d_k_in[8] , d_k_in[24] , d_k_in[40] , d_k_in[56]};
    1847            1                     474241                     d_k_out_10= {d_k_in[9] , d_k_in[25] , d_k_in[41] , d_k_in[57]};
    1848            1                     474241                     d_k_out_11= {d_k_in[10] , d_k_in[26] , d_k_in[42] , d_k_in[58]};
    1849            1                     474241                     d_k_out_12= {d_k_in[11] , d_k_in[27] , d_k_in[43] , d_k_in[59]};
    1850            1                     474241                     d_k_out_13= {d_k_in[12] , d_k_in[28] , d_k_in[44] , d_k_in[60]};
    1851            1                     474241                     d_k_out_14= {d_k_in[13] , d_k_in[29] , d_k_in[45] , d_k_in[61]};
    1852            1                     474241                     d_k_out_15= {d_k_in[14] , d_k_in[30] , d_k_in[46] , d_k_in[62]};
    1853            1                     474241                     d_k_out_16= {d_k_in[15] , d_k_in[31] , d_k_in[47] , d_k_in[63]};
    1854                                                         end
    1855                                                        /* else if(data_valid[4] == 0 && data_valid[0] == 1) begin
    1856                                                                 if(generation>=3) begin
    1857                                                                     dataout_1= {data[7:0] , 24'b0};
    1858                                                                     dataout_2= {data[15:8] , 24'b0}; 
    1859                                                                     dataout_3= {data[23:16] , 24'b0};
    1860                                                                     dataout_4= {data[31:24] , 24'b0};
    1861                                                                     dataout_5= {32'b0};
    1862                                                                     dataout_6= {32'b0}; 
    1863                                                                     dataout_7= {32'b0};
    1864                                                                     dataout_8= {32'b0};
    1865                                                                     dataout_9= {32'b0};
    1866                                                                     dataout_10= {32'b0};
    1867                                                                     dataout_11= {32'b0};
    1868                                                                     dataout_12= {32'b0};
    1869                                                                     dataout_13= {32'b0};
    1870                                                                     dataout_14= {32'b0};
    1871                                                                     dataout_15= {32'b0};
    1872                                                                     dataout_16= {32'b0};
    1873                                                                 end
    1874                                                                 else begin
    1875                                                                     dataout_1= {data[7:0] , 24'hf7f7f7};
    1876                                                                     dataout_2= {data[15:8] , 24'hf7f7f7}; 
    1877                                                                     dataout_3= {data[23:16] , 24'hf7f7f7};
    1878                                                                     dataout_4= {data[31:24] , 24'hf7f7f7};
    1879                                                                     dataout_5= {32'hf7f7f7f7};
    1880                                                                     dataout_6= {32'hf7f7f7f7}; 
    1881                                                                     dataout_7= {32'hf7f7f7f7};
    1882                                                                     dataout_8= {32'hf7f7f7f7};
    1883                                                                     dataout_9= {32'hf7f7f7f7};
    1884                                                                     dataout_10= {32'hf7f7f7f7};
    1885                                                                     dataout_11= {32'hf7f7f7f7};
    1886                                                                     dataout_12= {32'hf7f7f7f7};
    1887                                                                     dataout_13= {32'hf7f7f7f7};
    1888                                                                     dataout_14= {32'hf7f7f7f7};
    1889                                                                     dataout_15= {32'hf7f7f7f7};
    1890                                                                     dataout_16= {32'hf7f7f7f7};                        
    1891                                                                 end
    1892                                             
    1893                                             
    1894                                                             d_k_out_1= {d_k_in[0] , 3'b111};
    1895                                                             d_k_out_2= {d_k_in[1] , 3'b111};
    1896                                                             d_k_out_3= {d_k_in[2] , 3'b111};
    1897                                                             d_k_out_4= {d_k_in[3] , 3'b111};
    1898                                                             d_k_out_5=  4'b1111;
    1899                                                             d_k_out_6=  4'b1111;
    1900                                                             d_k_out_7=  4'b1111;
    1901                                                             d_k_out_8=  4'b1111;
    1902                                                             d_k_out_9=  4'b1111;
    1903                                                             d_k_out_10=  4'b1111;
    1904                                                             d_k_out_11=  4'b1111;
    1905                                                             d_k_out_12=  4'b1111;
    1906                                                             d_k_out_13=  4'b1111;
    1907                                                             d_k_out_14=  4'b1111;
    1908                                                             d_k_out_15=  4'b1111;
    1909                                                             d_k_out_16=  4'b1111;
    1910                                                         end*/
    1911                                                        /* else if(data_valid[8] == 0 && data_valid[0] == 1) begin
    1912                                                                 if(generation>=3) begin
    1913                                                                     dataout_1= {data[7:0] , 24'b0};
    1914                                                                     dataout_2= {data[15:8] , 24'b0}; 
    1915                                                                     dataout_3= {data[23:16] , 24'b0};
    1916                                                                     dataout_4= {data[31:24] , 24'b0};
    1917                                                                     dataout_5= {data[39:32] , 24'b0};
    1918                                                                     dataout_6= {data[47:40] , 24'b0}; 
    1919                                                                     dataout_7= {data[55:48] , 24'b0};
    1920                                                                     dataout_8= {data[63:56] , 24'b0};
    1921                                                                     dataout_9= {32'b0};
    1922                                                                     dataout_10=  {32'b0}; 
    1923                                                                     dataout_11=  {32'b0};
    1924                                                                     dataout_12=  {32'b0};
    1925                                                                     dataout_13=  {32'b0};
    1926                                                                     dataout_14=  {32'b0}; 
    1927                                                                     dataout_15=  {32'b0};
    1928                                                                     dataout_16=  {32'b0};            
    1929                                                                 end
    1930                                                                 else begin
    1931                                                                     dataout_1= {data[7:0] , 24'hf7f7f7};
    1932                                                                     dataout_2= {data[15:8] , 24'hf7f7f7}; 
    1933                                                                     dataout_3= {data[23:16] , 24'hf7f7f7};
    1934                                                                     dataout_4= {data[31:24] , 24'hf7f7f7};
    1935                                                                     dataout_5= {data[39:32] , 24'hf7f7f7};
    1936                                                                     dataout_6= {data[47:40] , 24'hf7f7f7}; 
    1937                                                                     dataout_7= {data[55:48] , 24'hf7f7f7};
    1938                                                                     dataout_8= {data[63:56] , 24'hf7f7f7};
    1939                                                                     dataout_9= {32'hf7f7f7f7};
    1940                                                                     dataout_10=  {32'hf7f7f7f7}; 
    1941                                                                     dataout_11=  {32'hf7f7f7f7};
    1942                                                                     dataout_12=  {32'hf7f7f7f7};
    1943                                                                     dataout_13=  {32'hf7f7f7f7};
    1944                                                                     dataout_14=  {32'hf7f7f7f7}; 
    1945                                                                     dataout_15=  {32'hf7f7f7f7};
    1946                                                                     dataout_16=  {32'hf7f7f7f7};                        
    1947                                                                 end
    1948                                             
    1949                                             
    1950                                                             d_k_out_1= {d_k_in[0] , 3'b111};
    1951                                                             d_k_out_2= {d_k_in[1] , 3'b111};
    1952                                                             d_k_out_3= {d_k_in[2] , 3'b111};
    1953                                                             d_k_out_4= {d_k_in[3] , 3'b111};
    1954                                                             d_k_out_5= {d_k_in[4] , 3'b111};
    1955                                                             d_k_out_6= {d_k_in[5] , 3'b111};
    1956                                                             d_k_out_7= {d_k_in[6] , 3'b111};
    1957                                                             d_k_out_8= {d_k_in[7] , 3'b111};
    1958                                                             d_k_out_9=  4'b1111;
    1959                                                             d_k_out_10=  4'b1111;
    1960                                                             d_k_out_11=  4'b1111;
    1961                                                             d_k_out_12=  4'b1111;
    1962                                                             d_k_out_13=  4'b1111;
    1963                                                             d_k_out_14=  4'b1111;
    1964                                                             d_k_out_15=  4'b1111;
    1965                                                             d_k_out_16=  4'b1111;
    1966                                                         end
    1967                                                         else if(data_valid[12] == 0 && data_valid[0] == 1) begin
    1968                                                                 if(generation>=3) begin
    1969                                                                     dataout_1= {data[7:0] , 24'b0};
    1970                                                                     dataout_2= {data[15:8] , 24'b0}; 
    1971                                                                     dataout_3= {data[23:16] , 24'b0};
    1972                                                                     dataout_4= {data[31:24] , 24'b0};
    1973                                                                     dataout_5= {data[39:32] , 24'b0};
    1974                                                                     dataout_6= {data[47:40] , 24'b0}; 
    1975                                                                     dataout_7= {data[55:48] , 24'b0};
    1976                                                                     dataout_8= {data[63:56] , 24'b0};
    1977                                                                     dataout_9= {data[71:64] , 24'b0};
    1978                                                                     dataout_10= {data[79:72] , 24'b0}; 
    1979                                                                     dataout_11= {data[87:80] , 24'b0};
    1980                                                                     dataout_12= {data[95:88] , 24'b0};
    1981                                                                     dataout_13= {32'b0};
    1982                                                                     dataout_14= {32'b0}; 
    1983                                                                     dataout_15= {32'b0};
    1984                                                                     dataout_16= {32'b0}; 
    1985                                                                 end
    1986                                                                 else begin
    1987                                                                     dataout_1= {data[7:0] , 24'hf7f7f7};
    1988                                                                     dataout_2= {data[15:8] , 24'hf7f7f7}; 
    1989                                                                     dataout_3= {data[23:16] , 24'hf7f7f7};
    1990                                                                     dataout_4= {data[31:24] , 24'hf7f7f7};
    1991                                                                     dataout_5= {data[39:32] , 24'hf7f7f7};
    1992                                                                     dataout_6= {data[47:40] , 24'hf7f7f7}; 
    1993                                                                     dataout_7= {data[55:48] , 24'hf7f7f7};
    1994                                                                     dataout_8= {data[63:56] , 24'hf7f7f7};
    1995                                                                     dataout_9= {data[71:64] , 24'hf7f7f7};
    1996                                                                     dataout_10= {data[79:72] , 24'hf7f7f7}; 
    1997                                                                     dataout_11= {data[87:80] , 24'hf7f7f7};
    1998                                                                     dataout_12= {data[95:88] , 24'hf7f7f7};
    1999                                                                     dataout_13= {32'hf7f7f7f7};
    2000                                                                     dataout_14= {32'hf7f7f7f7}; 
    2001                                                                     dataout_15= {32'hf7f7f7f7};
    2002                                                                     dataout_16= {32'hf7f7f7f7};                        
    2003                                                                 end
    2004                                             
    2005                                             
    2006                                                             d_k_out_1= {d_k_in[0] , 3'b111};
    2007                                                             d_k_out_2= {d_k_in[1] , 3'b111};
    2008                                                             d_k_out_3= {d_k_in[2] , 3'b111};
    2009                                                             d_k_out_4= {d_k_in[3] , 3'b111};
    2010                                                             d_k_out_5= {d_k_in[4] , 3'b111};
    2011                                                             d_k_out_6= {d_k_in[5] , 3'b111};
    2012                                                             d_k_out_7= {d_k_in[6] , 3'b111};
    2013                                                             d_k_out_8= {d_k_in[7] , 3'b111};
    2014                                                             d_k_out_9= {d_k_in[8] , 3'b111};
    2015                                                             d_k_out_10= {d_k_in[9] , 3'b111};
    2016                                                             d_k_out_11= {d_k_in[10] , 3'b111};
    2017                                                             d_k_out_12= {d_k_in[11] , 3'b111};
    2018                                                             d_k_out_13=  4'b1111;
    2019                                                             d_k_out_14=  4'b1111;
    2020                                                             d_k_out_15=  4'b1111;
    2021                                                             d_k_out_16=  4'b1111;
    2022                                                         end
    2023                                                         else if(data_valid[16] == 0 && data_valid[0] == 1) begin
    2024                                                                 if(generation>=3) begin
    2025                                                                     dataout_1= {data[7:0] , 24'b0};
    2026                                                                     dataout_2= {data[15:8] , 24'b0}; 
    2027                                                                     dataout_3= {data[23:16] , 24'b0};
    2028                                                                     dataout_4= {data[31:24] , 24'b0};
    2029                                                                     dataout_5= {data[39:32] , 24'b0};
    2030                                                                     dataout_6= {data[47:40] , 24'b0}; 
    2031                                                                     dataout_7= {data[55:48] , 24'b0};
    2032                                                                     dataout_8= {data[63:56] , 24'b0};
    2033                                                                     dataout_9= {data[71:64] , 24'b0};
    2034                                                                     dataout_10= {data[79:72] , 24'b0}; 
    2035                                                                     dataout_11= {data[87:80] , 24'b0};
    2036                                                                     dataout_12= {data[95:88] , 24'b0};
    2037                                                                     dataout_13= {data[103:96] , 24'b0};
    2038                                                                     dataout_14= {data[111:104] ,24'b0}; 
    2039                                                                     dataout_15= {data[119:112] , 24'b0};
    2040                                                                     dataout_16= {data[127:120] , 24'b0};
    2041                                                                 end
    2042                                                                 else begin
    2043                                                                     dataout_1= {data[7:0] , 24'hf7f7f7};
    2044                                                                     dataout_2= {data[15:8] , 24'hf7f7f7}; 
    2045                                                                     dataout_3= {data[23:16] , 24'hf7f7f7};
    2046                                                                     dataout_4= {data[31:24] , 24'hf7f7f7};
    2047                                                                     dataout_5= {data[39:32] , 24'hf7f7f7};
    2048                                                                     dataout_6= {data[47:40] , 24'hf7f7f7}; 
    2049                                                                     dataout_7= {data[55:48] , 24'hf7f7f7};
    2050                                                                     dataout_8= {data[63:56] , 24'hf7f7f7};
    2051                                                                     dataout_9= {data[71:64] , 24'hf7f7f7};
    2052                                                                     dataout_10= {data[79:72] , 24'hf7f7f7}; 
    2053                                                                     dataout_11= {data[87:80] , 24'hf7f7f7};
    2054                                                                     dataout_12= {data[95:88] , 24'hf7f7f7};
    2055                                                                     dataout_13= {data[103:96] , 24'hf7f7f7};
    2056                                                                     dataout_14= {data[111:104] , 24'hf7f7f7}; 
    2057                                                                     dataout_15= {data[119:112] , 24'hf7f7f7};
    2058                                                                     dataout_16= {data[127:120] , 24'hf7f7f7};                        
    2059                                                                 end
    2060                                             
    2061                                             
    2062                                                             d_k_out_1= {d_k_in[0] , 3'b111};
    2063                                                             d_k_out_2= {d_k_in[1] , 3'b111};
    2064                                                             d_k_out_3= {d_k_in[2] , 3'b111};
    2065                                                             d_k_out_4= {d_k_in[3] , 3'b111};
    2066                                                             d_k_out_5= {d_k_in[4] , 3'b111};
    2067                                                             d_k_out_6= {d_k_in[5] , 3'b111};
    2068                                                             d_k_out_7= {d_k_in[6] , 3'b111};
    2069                                                             d_k_out_8= {d_k_in[7] , 3'b111};
    2070                                                             d_k_out_9= {d_k_in[8] , 3'b111};
    2071                                                             d_k_out_10= {d_k_in[9] , 3'b111};
    2072                                                             d_k_out_11= {d_k_in[10] , 3'b111};
    2073                                                             d_k_out_12= {d_k_in[11] , 3'b111};
    2074                                                             d_k_out_13= {d_k_in[12] , 3'b111};
    2075                                                             d_k_out_14= {d_k_in[13] , 3'b111};
    2076                                                             d_k_out_15= {d_k_in[14] , 3'b111};
    2077                                                             d_k_out_16= {d_k_in[15] , 3'b111};
    2078                                                         end
    2079                                                         else if(data_valid[20] == 0 && data_valid[0] == 1) begin
    2080                                                                 if(generation>=3) begin
    2081                                                                     dataout_1= {data[7:0] , data[135:128] , 16'b0};
    2082                                                                     dataout_2= {data[15:8] , data[143:136] ,16'b0}; 
    2083                                                                     dataout_3= {data[23:16] , data[151:144] , 16'b0};
    2084                                                                     dataout_4= {data[31:24] , data[159:152] , 16'b0};
    2085                                                                     dataout_5= {data[39:32] , 24'b0};
    2086                                                                     dataout_6= {data[47:40] , 24'b0}; 
    2087                                                                     dataout_7= {data[55:48] , 24'b0};
    2088                                                                     dataout_8= {data[63:56] , 24'b0};
    2089                                                                     dataout_9= {data[71:64] , 24'b0};
    2090                                                                     dataout_10= {data[79:72] , 24'b0}; 
    2091                                                                     dataout_11= {data[87:80] , 24'b0};
    2092                                                                     dataout_12= {data[95:88] , 24'b0};
    2093                                                                     dataout_13= {data[103:96] , 24'b0};
    2094                                                                     dataout_14= {data[111:104] , 24'b0}; 
    2095                                                                     dataout_15= {data[119:112] , 24'b0};
    2096                                                                     dataout_16= {data[127:120] , 24'b0};
    2097                                                                 end
    2098                                                                 else begin
    2099                                                                     dataout_1= {data[7:0] , data[135:128] , 16'hf7f7};
    2100                                                                     dataout_2= {data[15:8] , data[143:136] ,16'hf7f7}; 
    2101                                                                     dataout_3= {data[23:16] , data[151:144] , 16'hf7f7};
    2102                                                                     dataout_4= {data[31:24] , data[159:152] , 16'hf7f7};
    2103                                                                     dataout_5= {data[39:32] , 24'hf7f7f7};
    2104                                                                     dataout_6= {data[47:40] , 24'hf7f7f7}; 
    2105                                                                     dataout_7= {data[55:48] , 24'hf7f7f7};
    2106                                                                     dataout_8= {data[63:56] , 24'hf7f7f7};
    2107                                                                     dataout_9= {data[71:64] , 24'hf7f7f7};
    2108                                                                     dataout_10= {data[79:72] , 24'hf7f7f7}; 
    2109                                                                     dataout_11= {data[87:80] , 24'hf7f7f7};
    2110                                                                     dataout_12= {data[95:88] , 24'hf7f7f7};
    2111                                                                     dataout_13= {data[103:96] , 24'hf7f7f7};
    2112                                                                     dataout_14= {data[111:104] , 24'hf7f7f7}; 
    2113                                                                     dataout_15= {data[119:112] , 24'hf7f7f7};
    2114                                                                     dataout_16= {data[127:120] , 24'hf7f7f7};                        
    2115                                                                 end
    2116                                             
    2117                                             
    2118                                                             d_k_out_1= {d_k_in[0] , d_k_in[16] , 2'b11};
    2119                                                             d_k_out_2= {d_k_in[1] , d_k_in[17] , 2'b11};
    2120                                                             d_k_out_3= {d_k_in[2] , d_k_in[18] , 2'b11};
    2121                                                             d_k_out_4= {d_k_in[3] , d_k_in[19] , 2'b11};
    2122                                                             d_k_out_5= {d_k_in[4] , 3'b111};
    2123                                                             d_k_out_6= {d_k_in[5] , 3'b111};
    2124                                                             d_k_out_7= {d_k_in[6] , 3'b111};
    2125                                                             d_k_out_8= {d_k_in[7] , 3'b111};
    2126                                                             d_k_out_9= {d_k_in[8] , 3'b111};
    2127                                                             d_k_out_10= {d_k_in[9] , 3'b111};
    2128                                                             d_k_out_11= {d_k_in[10] , 3'b111};
    2129                                                             d_k_out_12= {d_k_in[11] , 3'b111};
    2130                                                             d_k_out_13= {d_k_in[12] , 3'b111};
    2131                                                             d_k_out_14= {d_k_in[13] , 3'b111};
    2132                                                             d_k_out_15= {d_k_in[14] , 3'b111};
    2133                                                             d_k_out_16= {d_k_in[15] , 3'b111};
    2134                                                         end
    2135                                                         else if(data_valid[24] == 0 && data_valid[0] == 1) begin
    2136                                                                 if(generation>=3) begin
    2137                                                                     dataout_1= {data[7:0] , data[135:128] , 16'b0};
    2138                                                                     dataout_2= {data[15:8] , data[143:136] , 16'b0}; 
    2139                                                                     dataout_3= {data[23:16] , data[151:144] , 16'b0};
    2140                                                                     dataout_4= {data[31:24] , data[159:152] , 16'b0};
    2141                                                                     dataout_5= {data[39:32] , data[167:160] , 16'b0};
    2142                                                                     dataout_6= {data[47:40] , data[175:168] , 16'b0}; 
    2143                                                                     dataout_7= {data[55:48] , data[183:176] , 16'b0};
    2144                                                                     dataout_8= {data[63:56] , data[191:184] , 16'b0};
    2145                                                                     dataout_9= {data[71:64] , 24'b0};
    2146                                                                     dataout_10= {data[79:72] , 24'b0}; 
    2147                                                                     dataout_11= {data[87:80] , 24'b0};
    2148                                                                     dataout_12= {data[95:88] , 24'b0};
    2149                                                                     dataout_13= {data[103:96] , 24'b0};
    2150                                                                     dataout_14= {data[111:104] , 24'b0}; 
    2151                                                                     dataout_15= {data[119:112] , 24'b0};
    2152                                                                     dataout_16= {data[127:120] , 24'b0};
    2153                                                                 end
    2154                                                                 else begin
    2155                                                                     dataout_1= {data[7:0] , data[135:128] , 16'hf7f7};
    2156                                                                     dataout_2= {data[15:8] , data[143:136] , 16'hf7f7}; 
    2157                                                                     dataout_3= {data[23:16] , data[151:144] , 16'hf7f7};
    2158                                                                     dataout_4= {data[31:24] , data[159:152] , 16'hf7f7};
    2159                                                                     dataout_5= {data[39:32] , data[167:160] , 16'hf7f7};
    2160                                                                     dataout_6= {data[47:40] , data[175:168] , 16'hf7f7}; 
    2161                                                                     dataout_7= {data[55:48] , data[183:176] , 16'hf7f7};
    2162                                                                     dataout_8= {data[63:56] , data[191:184] , 16'hf7f7};
    2163                                                                     dataout_9= {data[71:64] , 24'hf7f7f7};
    2164                                                                     dataout_10= {data[79:72] , 24'hf7f7f7}; 
    2165                                                                     dataout_11= {data[87:80] , 24'hf7f7f7};
    2166                                                                     dataout_12= {data[95:88] , 24'hf7f7f7};
    2167                                                                     dataout_13= {data[103:96] , 24'hf7f7f7};
    2168                                                                     dataout_14= {data[111:104] , 24'hf7f7f7}; 
    2169                                                                     dataout_15= {data[119:112] , 24'hf7f7f7};
    2170                                                                     dataout_16= {data[127:120] , 24'hf7f7f7};                        
    2171                                                                 end
    2172                                             
    2173                                             
    2174                                                             d_k_out_1= {d_k_in[0] , d_k_in[16] , 2'b11};
    2175                                                             d_k_out_2= {d_k_in[1] , d_k_in[17] , 2'b11};
    2176                                                             d_k_out_3= {d_k_in[2] , d_k_in[18] , 2'b11};
    2177                                                             d_k_out_4= {d_k_in[3] , d_k_in[19] , 2'b11};
    2178                                                             d_k_out_5= {d_k_in[4] , d_k_in[20] , 2'b11};
    2179                                                             d_k_out_6= {d_k_in[5] , d_k_in[21] , 2'b11};
    2180                                                             d_k_out_7= {d_k_in[6] , d_k_in[22] , 2'b11};
    2181                                                             d_k_out_8= {d_k_in[7] , d_k_in[23] , 2'b11};
    2182                                                             d_k_out_9= {d_k_in[8] , 3'b111};
    2183                                                             d_k_out_10= {d_k_in[9] , 3'b111};
    2184                                                             d_k_out_11= {d_k_in[10] , 3'b111};
    2185                                                             d_k_out_12= {d_k_in[11] , 3'b111};
    2186                                                             d_k_out_13= {d_k_in[12] , 3'b111};
    2187                                                             d_k_out_14= {d_k_in[13] , 3'b111};
    2188                                                             d_k_out_15= {d_k_in[14] , 3'b111};
    2189                                                             d_k_out_16= {d_k_in[15] , 3'b111};
    2190                                                         end
    2191                                                         else if(data_valid[28] == 0 && data_valid[0] == 1) begin
    2192                                                                 if(generation>=3) begin
    2193                                                                     dataout_1= {data[7:0] , data[135:128] , 16'b0};
    2194                                                                     dataout_2= {data[15:8] , data[143:136] , 16'b0}; 
    2195                                                                     dataout_3= {data[23:16] , data[151:144] , 16'b0};
    2196                                                                     dataout_4= {data[31:24] , data[159:152] , 16'b0};
    2197                                                                     dataout_5= {data[39:32] , data[167:160] , 16'b0};
    2198                                                                     dataout_6= {data[47:40] , data[175:168] , 16'b0}; 
    2199                                                                     dataout_7= {data[55:48] , data[183:176] , 16'b0};
    2200                                                                     dataout_8= {data[63:56] , data[191:184] , 16'b0};
    2201                                                                     dataout_9= {data[71:64] , data[199:192] , 16'b0};
    2202                                                                     dataout_10= {data[79:72] , data[207:200] , 16'b0}; 
    2203                                                                     dataout_11= {data[87:80] , data[215:208] , 16'b0};
    2204                                                                     dataout_12= {data[95:88] , data[223:216] , 16'b0};
    2205                                                                     dataout_13= {data[103:96] , 24'b0};
    2206                                                                     dataout_14= {data[111:104] , 24'b0}; 
    2207                                                                     dataout_15= {data[119:112] , 24'b0};
    2208                                                                     dataout_16= {data[127:120] , 24'b0};  
    2209                                                                 end
    2210                                                                 else begin
    2211                                                                     dataout_1= {data[7:0] , data[135:128] , 16'hf7f7};
    2212                                                                     dataout_2= {data[15:8] , data[143:136] , 16'hf7f7}; 
    2213                                                                     dataout_3= {data[23:16] , data[151:144] , 16'hf7f7};
    2214                                                                     dataout_4= {data[31:24] , data[159:152] , 16'hf7f7};
    2215                                                                     dataout_5= {data[39:32] , data[167:160] , 16'hf7f7};
    2216                                                                     dataout_6= {data[47:40] , data[175:168] , 16'hf7f7}; 
    2217                                                                     dataout_7= {data[55:48] , data[183:176] , 16'hf7f7};
    2218                                                                     dataout_8= {data[63:56] , data[191:184] , 16'hf7f7};
    2219                                                                     dataout_9= {data[71:64] , data[199:192] , 16'hf7f7};
    2220                                                                     dataout_10= {data[79:72] , data[207:200] , 16'hf7f7}; 
    2221                                                                     dataout_11= {data[87:80] , data[215:208] , 16'hf7f7};
    2222                                                                     dataout_12= {data[95:88] , data[223:216] , 16'hf7f7};
    2223                                                                     dataout_13= {data[103:96] , 24'hf7f7f7};
    2224                                                                     dataout_14= {data[111:104] , 24'hf7f7f7}; 
    2225                                                                     dataout_15= {data[119:112] , 24'hf7f7f7};
    2226                                                                     dataout_16= {data[127:120] , 24'hf7f7f7};                        
    2227                                                                 end
    2228                                             
    2229                                             
    2230                                                             d_k_out_1= {d_k_in[0] , d_k_in[16] , 2'b11};
    2231                                                             d_k_out_2= {d_k_in[1] , d_k_in[17] , 2'b11};
    2232                                                             d_k_out_3= {d_k_in[2] , d_k_in[18] , 2'b11};
    2233                                                             d_k_out_4= {d_k_in[3] , d_k_in[19] , 2'b11};
    2234                                                             d_k_out_5= {d_k_in[4] , d_k_in[20] , 2'b11};
    2235                                                             d_k_out_6= {d_k_in[5] , d_k_in[21] , 2'b11};
    2236                                                             d_k_out_7= {d_k_in[6] , d_k_in[22] , 2'b11};
    2237                                                             d_k_out_8= {d_k_in[7] , d_k_in[23] , 2'b11};
    2238                                                             d_k_out_9= {d_k_in[8] , d_k_in[24] , 2'b11};
    2239                                                             d_k_out_10= {d_k_in[9] , d_k_in[25] , 2'b11};
    2240                                                             d_k_out_11= {d_k_in[10] , d_k_in[26] , 2'b11};
    2241                                                             d_k_out_12= {d_k_in[11] , d_k_in[27] , 2'b11};
    2242                                                             d_k_out_13= {d_k_in[12] , 3'b111};
    2243                                                             d_k_out_14= {d_k_in[13] , 3'b111};
    2244                                                             d_k_out_15= {d_k_in[14] , 3'b111};
    2245                                                             d_k_out_16= {d_k_in[15] , 3'b111};
    2246                                                         end
    2247                                                         else if(data_valid[32] == 0 && data_valid[0] == 1) begin
    2248                                                                 if(generation>=3) begin
    2249                                                                     dataout_1= {data[7:0] , data[135:128] , 16'b0};
    2250                                                                     dataout_2= {data[15:8] , data[143:136] , 16'b0}; 
    2251                                                                     dataout_3= {data[23:16] , data[151:144] , 16'b0};
    2252                                                                     dataout_4= {data[31:24] , data[159:152] , 16'b0};
    2253                                                                     dataout_5= {data[39:32] , data[167:160] , 16'b0};
    2254                                                                     dataout_6= {data[47:40] , data[175:168] , 16'b0}; 
    2255                                                                     dataout_7= {data[55:48] , data[183:176] , 16'b0};
    2256                                                                     dataout_8= {data[63:56] , data[191:184] , 16'b0};
    2257                                                                     dataout_9= {data[71:64] , data[199:192] , 16'b0};
    2258                                                                     dataout_10= {data[79:72] , data[207:200] , 16'b0}; 
    2259                                                                     dataout_11= {data[87:80] , data[215:208] , 16'b0};
    2260                                                                     dataout_12= {data[95:88] , data[223:216] , 16'b0};
    2261                                                                     dataout_13= {data[103:96] , data[231:224] , 16'b0};
    2262                                                                     dataout_14= {data[111:104] , data[239:232] , 16'b0}; 
    2263                                                                     dataout_15= {data[119:112] , data[247:240] , 16'b0};
    2264                                                                     dataout_16= {data[127:120] , data[255:248] , 16'b0};
    2265                                                                 end
    2266                                                                 else begin
    2267                                                                     dataout_1= {data[7:0] , data[135:128] , 16'hf7f7};
    2268                                                                     dataout_2= {data[15:8] , data[143:136] , 16'hf7f7}; 
    2269                                                                     dataout_3= {data[23:16] , data[151:144] , 16'hf7f7};
    2270                                                                     dataout_4= {data[31:24] , data[159:152] , 16'hf7f7};
    2271                                                                     dataout_5= {data[39:32] , data[167:160] , 16'hf7f7};
    2272                                                                     dataout_6= {data[47:40] , data[175:168] , 16'hf7f7}; 
    2273                                                                     dataout_7= {data[55:48] , data[183:176] , 16'hf7f7};
    2274                                                                     dataout_8= {data[63:56] , data[191:184] , 16'hf7f7};
    2275                                                                     dataout_9= {data[71:64] , data[199:192] , 16'hf7f7};
    2276                                                                     dataout_10= {data[79:72] , data[207:200] , 16'hf7f7}; 
    2277                                                                     dataout_11= {data[87:80] , data[215:208] , 16'hf7f7};
    2278                                                                     dataout_12= {data[95:88] , data[223:216] , 16'hf7f7};
    2279                                                                     dataout_13= {data[103:96] , data[231:224] , 16'hf7f7};
    2280                                                                     dataout_14= {data[111:104] , data[239:232] , 16'hf7f7}; 
    2281                                                                     dataout_15= {data[119:112] , data[247:240] , 16'hf7f7};
    2282                                                                     dataout_16= {data[127:120] , data[255:248] , 16'hf7f7};                        
    2283                                                                 end
    2284                                             
    2285                                             
    2286                                                             d_k_out_1= {d_k_in[0] , d_k_in[16] , 2'b11};
    2287                                                             d_k_out_2= {d_k_in[1] , d_k_in[17] , 2'b11};
    2288                                                             d_k_out_3= {d_k_in[2] , d_k_in[18] , 2'b11};
    2289                                                             d_k_out_4= {d_k_in[3] , d_k_in[19] , 2'b11};
    2290                                                             d_k_out_5= {d_k_in[4] , d_k_in[20] , 2'b11};
    2291                                                             d_k_out_6= {d_k_in[5] , d_k_in[21] , 2'b11};
    2292                                                             d_k_out_7= {d_k_in[6] , d_k_in[22] , 2'b11};
    2293                                                             d_k_out_8= {d_k_in[7] , d_k_in[23] , 2'b11};
    2294                                                             d_k_out_9= {d_k_in[8] , d_k_in[24] , 2'b11};
    2295                                                             d_k_out_10= {d_k_in[9] , d_k_in[25] , 2'b11};
    2296                                                             d_k_out_11= {d_k_in[10] , d_k_in[26] , 2'b11};
    2297                                                             d_k_out_12= {d_k_in[11] , d_k_in[27] , 2'b11};
    2298                                                             d_k_out_13= {d_k_in[12] , d_k_in[28] , 2'b11};
    2299                                                             d_k_out_14= {d_k_in[13] , d_k_in[29] , 2'b11};
    2300                                                             d_k_out_15= {d_k_in[14] , d_k_in[30] , 2'b11};
    2301                                                             d_k_out_16= {d_k_in[15] , d_k_in[31] , 2'b11};
    2302                                                         end 
    2303                                                         else if(data_valid[36] == 0 && data_valid[0] == 1) begin
    2304                                                                 if(generation>=3) begin
    2305                                                                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , 8'b0};
    2306                                                                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , 8'b0}; 
    2307                                                                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , 8'b0};
    2308                                                                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , 8'b0};
    2309                                                                     dataout_5= {data[39:32] , data[167:160] , 16'b0};
    2310                                                                     dataout_6= {data[47:40] , data[175:168] , 16'b0}; 
    2311                                                                     dataout_7= {data[55:48] , data[183:176] , 16'b0};
    2312                                                                     dataout_8= {data[63:56] , data[191:184] , 16'b0};
    2313                                                                     dataout_9= {data[71:64] , data[199:192] , 16'b0};
    2314                                                                     dataout_10= {data[79:72] , data[207:200] , 16'b0}; 
    2315                                                                     dataout_11= {data[87:80] , data[215:208] , 16'b0};
    2316                                                                     dataout_12= {data[95:88] , data[223:216] , 16'b0};
    2317                                                                     dataout_13= {data[103:96] , data[231:224] , 16'b0};
    2318                                                                     dataout_14= {data[111:104] , data[239:232] , 16'b0}; 
    2319                                                                     dataout_15= {data[119:112] , data[247:240] , 16'b0};
    2320                                                                     dataout_16= {data[127:120] , data[255:248] , 16'b0};
    2321                                                                 end
    2322                                                                 else begin
    2323                                                                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , 8'hf7};
    2324                                                                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , 8'hf7}; 
    2325                                                                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , 8'hf7};
    2326                                                                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , 8'hf7};
    2327                                                                     dataout_5= {data[39:32] , data[167:160] , 16'hf7f7};
    2328                                                                     dataout_6= {data[47:40] , data[175:168] , 16'hf7f7}; 
    2329                                                                     dataout_7= {data[55:48] , data[183:176] , 16'hf7f7};
    2330                                                                     dataout_8= {data[63:56] , data[191:184] , 16'hf7f7};
    2331                                                                     dataout_9= {data[71:64] , data[199:192] , 16'hf7f7};
    2332                                                                     dataout_10= {data[79:72] , data[207:200] , 16'hf7f7}; 
    2333                                                                     dataout_11= {data[87:80] , data[215:208] , 16'hf7f7};
    2334                                                                     dataout_12= {data[95:88] , data[223:216] , 16'hf7f7};
    2335                                                                     dataout_13= {data[103:96] , data[231:224] , 16'hf7f7};
    2336                                                                     dataout_14= {data[111:104] , data[239:232] , 16'hf7f7}; 
    2337                                                                     dataout_15= {data[119:112] , data[247:240] , 16'hf7f7};
    2338                                                                     dataout_16= {data[127:120] , data[255:248] , 16'hf7f7};                        
    2339                                                                 end
    2340                                             
    2341                                             
    2342                                                             d_k_out_1= {d_k_in[0] , d_k_in[16] , d_k_in[32] , 1'b1};
    2343                                                             d_k_out_2= {d_k_in[1] , d_k_in[17] , d_k_in[33] , 1'b1};
    2344                                                             d_k_out_3= {d_k_in[2] , d_k_in[18] , d_k_in[34] , 1'b1};
    2345                                                             d_k_out_4= {d_k_in[3] , d_k_in[19] , d_k_in[35] , 1'b1};
    2346                                                             d_k_out_5= {d_k_in[4] , d_k_in[20] , 2'b11};
    2347                                                             d_k_out_6= {d_k_in[5] , d_k_in[21] , 2'b11};
    2348                                                             d_k_out_7= {d_k_in[6] , d_k_in[22] , 2'b11};
    2349                                                             d_k_out_8= {d_k_in[7] , d_k_in[23] , 2'b11};
    2350                                                             d_k_out_9= {d_k_in[8] , d_k_in[24] , 2'b11};
    2351                                                             d_k_out_10= {d_k_in[9] , d_k_in[25] , 2'b11};
    2352                                                             d_k_out_11= {d_k_in[10] , d_k_in[26] , 2'b11};
    2353                                                             d_k_out_12= {d_k_in[11] , d_k_in[27] , 2'b11};
    2354                                                             d_k_out_13= {d_k_in[12] , d_k_in[28] , 2'b11};
    2355                                                             d_k_out_14= {d_k_in[13] , d_k_in[29] , 2'b11};
    2356                                                             d_k_out_15= {d_k_in[14] , d_k_in[30] , 2'b11};
    2357                                                             d_k_out_16= {d_k_in[15] , d_k_in[31] , 2'b11};
    2358                                                         end            
    2359                                                         else if(data_valid[40] == 0 && data_valid[0] == 1) begin
    2360                                                                 if(generation>=3) begin
    2361                                                                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , 8'b0};
    2362                                                                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , 8'b0}; 
    2363                                                                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , 8'b0};
    2364                                                                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , 8'b0};
    2365                                                                     dataout_5= {data[39:32] , data[167:160] , data[295:288] , 8'b0};
    2366                                                                     dataout_6= {data[47:40] , data[175:168] , data[303:296] , 8'b0}; 
    2367                                                                     dataout_7= {data[55:48] , data[183:176] , data[311:304] , 8'b0};
    2368                                                                     dataout_8= {data[63:56] , data[191:184] , data[319:312] , 8'b0};
    2369                                                                     dataout_9= {data[71:64] , data[199:192] , 16'b0};
    2370                                                                     dataout_10= {data[79:72] , data[207:200] , 16'b0}; 
    2371                                                                     dataout_11= {data[87:80] , data[215:208] , 16'b0};
    2372                                                                     dataout_12= {data[95:88] , data[223:216] , 16'b0};
    2373                                                                     dataout_13= {data[103:96] , data[231:224] , 16'b0};
    2374                                                                     dataout_14= {data[111:104] , data[239:232] , 16'b0}; 
    2375                                                                     dataout_15= {data[119:112] , data[247:240] , 16'b0};
    2376                                                                     dataout_16= {data[127:120] , data[255:248] , 16'b0};
    2377                                                                 end
    2378                                                                 else begin
    2379                                                                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , 8'hf7};
    2380                                                                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , 8'hf7}; 
    2381                                                                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , 8'hf7};
    2382                                                                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , 8'hf7};
    2383                                                                     dataout_5= {data[39:32] , data[167:160] , data[295:288] , 8'hf7};
    2384                                                                     dataout_6= {data[47:40] , data[175:168] , data[303:296] , 8'hf7}; 
    2385                                                                     dataout_7= {data[55:48] , data[183:176] , data[311:304] , 8'hf7};
    2386                                                                     dataout_8= {data[63:56] , data[191:184] , data[319:312] , 8'hf7};
    2387                                                                     dataout_9= {data[71:64] , data[199:192] , 16'hf7f7};
    2388                                                                     dataout_10= {data[79:72] , data[207:200] , 16'hf7f7}; 
    2389                                                                     dataout_11= {data[87:80] , data[215:208] , 16'hf7f7};
    2390                                                                     dataout_12= {data[95:88] , data[223:216] , 16'hf7f7};
    2391                                                                     dataout_13= {data[103:96] , data[231:224] , 16'hf7f7};
    2392                                                                     dataout_14= {data[111:104] , data[239:232] , 16'hf7f7}; 
    2393                                                                     dataout_15= {data[119:112] , data[247:240] , 16'hf7f7};
    2394                                                                     dataout_16= {data[127:120] , data[255:248] , 16'hf7f7};                        
    2395                                                                 end
    2396                                             
    2397                                             
    2398                                                             d_k_out_1= {d_k_in[0] , d_k_in[16] , d_k_in[32] , 1'b1};
    2399                                                             d_k_out_2= {d_k_in[1] , d_k_in[17] , d_k_in[33] , 1'b1};
    2400                                                             d_k_out_3= {d_k_in[2] , d_k_in[18] , d_k_in[34] , 1'b1};
    2401                                                             d_k_out_4= {d_k_in[3] , d_k_in[19] , d_k_in[35] , 1'b1};
    2402                                                             d_k_out_5= {d_k_in[4] , d_k_in[20] , d_k_in[36] , 1'b1};
    2403                                                             d_k_out_6= {d_k_in[5] , d_k_in[21] , d_k_in[37] , 1'b1};
    2404                                                             d_k_out_7= {d_k_in[6] , d_k_in[22] , d_k_in[38] , 1'b1};
    2405                                                             d_k_out_8= {d_k_in[7] , d_k_in[23] , d_k_in[39] , 1'b1};
    2406                                                             d_k_out_9= {d_k_in[8] , d_k_in[24] , 2'b11};
    2407                                                             d_k_out_10= {d_k_in[9] , d_k_in[25] , 2'b11};
    2408                                                             d_k_out_11= {d_k_in[10] , d_k_in[26] , 2'b11};
    2409                                                             d_k_out_12= {d_k_in[11] , d_k_in[27] , 2'b11};
    2410                                                             d_k_out_13= {d_k_in[12] , d_k_in[28] , 2'b11};
    2411                                                             d_k_out_14= {d_k_in[13] , d_k_in[29] , 2'b11};
    2412                                                             d_k_out_15= {d_k_in[14] , d_k_in[30] , 2'b11};
    2413                                                             d_k_out_16= {d_k_in[15] , d_k_in[31] , 2'b11};
    2414                                                         end
    2415                                                         else if(data_valid[44] == 0 && data_valid[0] == 1) begin
    2416                                                                 if(generation>=3) begin
    2417                                                                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , 8'b0};
    2418                                                                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , 8'b0}; 
    2419                                                                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , 8'b0};
    2420                                                                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , 8'b0};
    2421                                                                     dataout_5= {data[39:32] , data[167:160] , data[295:288] , 8'b0};
    2422                                                                     dataout_6= {data[47:40] , data[175:168] , data[303:296] , 8'b0}; 
    2423                                                                     dataout_7= {data[55:48] , data[183:176] , data[311:304] , 8'b0};
    2424                                                                     dataout_8= {data[63:56] , data[191:184] , data[319:312] , 8'b0};
    2425                                                                     dataout_9= {data[71:64] , data[199:192] , data[327:320] , 8'b0};
    2426                                                                     dataout_10= {data[79:72] , data[207:200] , data[335:328] , 8'b0}; 
    2427                                                                     dataout_11= {data[87:80] , data[215:208] , data[343:336] , 8'b0};
    2428                                                                     dataout_12= {data[95:88] , data[223:216] , data[351:344] , 8'b0};
    2429                                                                     dataout_13= {data[103:96] , data[231:224] , 16'b0};
    2430                                                                     dataout_14= {data[111:104] , data[239:232] , 16'b0}; 
    2431                                                                     dataout_15= {data[119:112] , data[247:240] , 16'b0};
    2432                                                                     dataout_16= {data[127:120] , data[255:248] , 16'b0};
    2433                                                                 end
    2434                                                                 else begin
    2435                                                                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , 8'hf7};
    2436                                                                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , 8'hf7}; 
    2437                                                                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , 8'hf7};
    2438                                                                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , 8'hf7};
    2439                                                                     dataout_5= {data[39:32] , data[167:160] , data[295:288] , 8'hf7};
    2440                                                                     dataout_6= {data[47:40] , data[175:168] , data[303:296] , 8'hf7}; 
    2441                                                                     dataout_7= {data[55:48] , data[183:176] , data[311:304] , 8'hf7};
    2442                                                                     dataout_8= {data[63:56] , data[191:184] , data[319:312] , 8'hf7};
    2443                                                                     dataout_9= {data[71:64] , data[199:192] , data[327:320] , 8'hf7};
    2444                                                                     dataout_10= {data[79:72] , data[207:200] , data[335:328] , 8'hf7}; 
    2445                                                                     dataout_11= {data[87:80] , data[215:208] , data[343:336] , 8'hf7};
    2446                                                                     dataout_12= {data[95:88] , data[223:216] , data[351:344] , 8'hf7};
    2447                                                                     dataout_13= {data[103:96] , data[231:224] , 16'hf7f7};
    2448                                                                     dataout_14= {data[111:104] , data[239:232] , 16'hf7f7}; 
    2449                                                                     dataout_15= {data[119:112] , data[247:240] , 16'hf7f7};
    2450                                                                     dataout_16= {data[127:120] , data[255:248] , 16'hf7f7};                        
    2451                                                                 end
    2452                                             
    2453                                             
    2454                                                             d_k_out_1= {d_k_in[0] , d_k_in[16] , d_k_in[32] , 1'b1};
    2455                                                             d_k_out_2= {d_k_in[1] , d_k_in[17] , d_k_in[33] , 1'b1};
    2456                                                             d_k_out_3= {d_k_in[2] , d_k_in[18] , d_k_in[34] , 1'b1};
    2457                                                             d_k_out_4= {d_k_in[3] , d_k_in[19] , d_k_in[35] , 1'b1};
    2458                                                             d_k_out_5= {d_k_in[4] , d_k_in[20] , d_k_in[36] , 1'b1};
    2459                                                             d_k_out_6= {d_k_in[5] , d_k_in[21] , d_k_in[37] , 1'b1};
    2460                                                             d_k_out_7= {d_k_in[6] , d_k_in[22] , d_k_in[38] , 1'b1};
    2461                                                             d_k_out_8= {d_k_in[7] , d_k_in[23] , d_k_in[39] , 1'b1};
    2462                                                             d_k_out_9= {d_k_in[8] , d_k_in[24] , d_k_in[40] , 1'b1};
    2463                                                             d_k_out_10= {d_k_in[9] , d_k_in[25] , d_k_in[41] , 1'b1};
    2464                                                             d_k_out_11= {d_k_in[10] , d_k_in[26] , d_k_in[42] , 1'b1};
    2465                                                             d_k_out_12= {d_k_in[11] , d_k_in[27] , d_k_in[43] , 1'b1};
    2466                                                             d_k_out_13= {d_k_in[12] , d_k_in[28] , 2'b11};
    2467                                                             d_k_out_14= {d_k_in[13] , d_k_in[29] , 2'b11};
    2468                                                             d_k_out_15= {d_k_in[14] , d_k_in[30] , 2'b11};
    2469                                                             d_k_out_16= {d_k_in[15] , d_k_in[31] , 2'b11};
    2470                                                         end*/
    2471                                                         else if(data_valid[48] == 0 && data_valid[0] == 1) begin
    2472                                                                 if(generation>=3) begin
    2473            1                          1                             dataout_1= {data[7:0] , data[135:128] , data[263:256] , 8'b0};
    2474            1                          1                             dataout_2= {data[15:8] , data[143:136] , data[271:264] , 8'b0}; 
    2475            1                          1                             dataout_3= {data[23:16] , data[151:144] , data[279:272] , 8'b0};
    2476            1                          1                             dataout_4= {data[31:24] , data[159:152] , data[287:280] , 8'b0};
    2477            1                          1                             dataout_5= {data[39:32] , data[167:160] , data[295:288] , 8'b0};
    2478            1                          1                             dataout_6= {data[47:40] , data[175:168] , data[303:296] , 8'b0}; 
    2479            1                          1                             dataout_7= {data[55:48] , data[183:176] , data[311:304] , 8'b0};
    2480            1                          1                             dataout_8= {data[63:56] , data[191:184] , data[319:312] , 8'b0};
    2481            1                          1                             dataout_9= {data[71:64] , data[199:192] , data[327:320] , 8'b0};
    2482            1                          1                             dataout_10= {data[79:72] , data[207:200] , data[335:328] , 8'b0}; 
    2483            1                          1                             dataout_11= {data[87:80] , data[215:208] , data[343:336] , 8'b0};
    2484            1                          1                             dataout_12= {data[95:88] , data[223:216] , data[351:344] , 8'b0};
    2485            1                          1                             dataout_13= {data[103:96] , data[231:224] , data[359:352] , 8'b0};
    2486            1                          1                             dataout_14= {data[111:104] , data[239:232] , data[367:360] , 8'b0}; 
    2487            1                          1                             dataout_15= {data[119:112] , data[247:240] , data[375:368] , 8'b0};
    2488            1                          1                             dataout_16= {data[127:120] , data[255:248] , data[383:376] , 8'b0};   
    2489                                                                 end
    2490                                                                 else begin
    2491            1                    ***0***                             dataout_1= {data[7:0] , data[135:128] , data[263:256] , 8'hf7};
    2492            1                    ***0***                             dataout_2= {data[15:8] , data[143:136] , data[271:264] , 8'hf7}; 
    2493            1                    ***0***                             dataout_3= {data[23:16] , data[151:144] , data[279:272] , 8'hf7};
    2494            1                    ***0***                             dataout_4= {data[31:24] , data[159:152] , data[287:280] , 8'hf7};
    2495            1                    ***0***                             dataout_5= {data[39:32] , data[167:160] , data[295:288] , 8'hf7};
    2496            1                    ***0***                             dataout_6= {data[47:40] , data[175:168] , data[303:296] , 8'hf7}; 
    2497            1                    ***0***                             dataout_7= {data[55:48] , data[183:176] , data[311:304] , 8'hf7};
    2498            1                    ***0***                             dataout_8= {data[63:56] , data[191:184] , data[319:312] , 8'hf7};
    2499            1                    ***0***                             dataout_9= {data[71:64] , data[199:192] , data[327:320] , 8'hf7};
    2500            1                    ***0***                             dataout_10= {data[79:72] , data[207:200] , data[335:328] , 8'hf7}; 
    2501            1                    ***0***                             dataout_11= {data[87:80] , data[215:208] , data[343:336] , 8'hf7};
    2502            1                    ***0***                             dataout_12= {data[95:88] , data[223:216] , data[351:344] , 8'hf7};
    2503            1                    ***0***                             dataout_13= {data[103:96] , data[231:224] , data[359:352] , 8'hf7};
    2504            1                    ***0***                             dataout_14= {data[111:104] , data[239:232] , data[367:360] , 8'hf7}; 
    2505            1                    ***0***                             dataout_15= {data[119:112] , data[247:240] , data[375:368] , 8'hf7};
    2506            1                    ***0***                             dataout_16= {data[127:120] , data[255:248] , data[383:376] , 8'hf7};                        
    2507                                                                 end
    2508                                             
    2509                                             
    2510            1                          1                     d_k_out_1= {d_k_in[0] , d_k_in[16] , d_k_in[32] , 1'b1};
    2511            1                          1                     d_k_out_2= {d_k_in[1] , d_k_in[17] , d_k_in[33] , 1'b1};
    2512            1                          1                     d_k_out_3= {d_k_in[2] , d_k_in[18] , d_k_in[34] , 1'b1};
    2513            1                          1                     d_k_out_4= {d_k_in[3] , d_k_in[19] , d_k_in[35] , 1'b1};
    2514            1                          1                     d_k_out_5= {d_k_in[4] , d_k_in[20] , d_k_in[36] , 1'b1};
    2515            1                          1                     d_k_out_6= {d_k_in[5] , d_k_in[21] , d_k_in[37] , 1'b1};
    2516            1                          1                     d_k_out_7= {d_k_in[6] , d_k_in[22] , d_k_in[38] , 1'b1};
    2517            1                          1                     d_k_out_8= {d_k_in[7] , d_k_in[23] , d_k_in[39] , 1'b1};
    2518            1                          1                     d_k_out_9= {d_k_in[8] , d_k_in[24] , d_k_in[40] , 1'b1};
    2519            1                          1                     d_k_out_10= {d_k_in[9] , d_k_in[25] , d_k_in[41] , 1'b1};
    2520            1                          1                     d_k_out_11= {d_k_in[10] , d_k_in[26] , d_k_in[42] , 1'b1};
    2521            1                          1                     d_k_out_12= {d_k_in[11] , d_k_in[27] , d_k_in[43] , 1'b1};
    2522            1                          1                     d_k_out_13= {d_k_in[12] , d_k_in[28] , d_k_in[44] , 1'b1};
    2523            1                          1                     d_k_out_14= {d_k_in[13] , d_k_in[29] , d_k_in[45] , 1'b1};
    2524            1                          1                     d_k_out_15= {d_k_in[14] , d_k_in[30] , d_k_in[46] , 1'b1};
    2525            1                          1                     d_k_out_16= {d_k_in[15] , d_k_in[31] , d_k_in[47] , 1'b1};
    2526                                                         end            
    2527                                                        /* else if(data_valid[52] == 0 && data_valid[0] == 1) begin
    2528                                                                 if(generation>=3) begin
    2529                                                                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , data[391:384]};
    2530                                                                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , data[399:392]}; 
    2531                                                                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , data[407:400]};
    2532                                                                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , data[415:408]};
    2533                                                                     dataout_5= {data[39:32] , data[167:160] , data[295:288] , 8'b0};
    2534                                                                     dataout_6= {data[47:40] , data[175:168] , data[303:296] , 8'b0}; 
    2535                                                                     dataout_7= {data[55:48] , data[183:176] , data[311:304] , 8'b0};
    2536                                                                     dataout_8= {data[63:56] , data[191:184] , data[319:312] , 8'b0};
    2537                                                                     dataout_9= {data[71:64] , data[199:192] , data[327:320] , 8'b0};
    2538                                                                     dataout_10= {data[79:72] , data[207:200] , data[335:328] , 8'b0}; 
    2539                                                                     dataout_11= {data[87:80] , data[215:208] , data[343:336] , 8'b0};
    2540                                                                     dataout_12= {data[95:88] , data[223:216] , data[351:344] , 8'b0};
    2541                                                                     dataout_13= {data[103:96] , data[231:224] , data[359:352] , 8'b0};
    2542                                                                     dataout_14= {data[111:104] , data[239:232] , data[367:360] , 8'b0}; 
    2543                                                                     dataout_15= {data[119:112] , data[247:240] , data[375:368] , 8'b0};
    2544                                                                     dataout_16= {data[127:120] , data[255:248] , data[383:376] , 8'b0};
    2545                                                                 end
    2546                                                                 else begin
    2547                                                                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , data[391:384]};
    2548                                                                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , data[399:392]}; 
    2549                                                                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , data[407:400]};
    2550                                                                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , data[415:408]};
    2551                                                                     dataout_5= {data[39:32] , data[167:160] , data[295:288] , 8'hf7};
    2552                                                                     dataout_6= {data[47:40] , data[175:168] , data[303:296] , 8'hf7}; 
    2553                                                                     dataout_7= {data[55:48] , data[183:176] , data[311:304] , 8'hf7};
    2554                                                                     dataout_8= {data[63:56] , data[191:184] , data[319:312] , 8'hf7};
    2555                                                                     dataout_9= {data[71:64] , data[199:192] , data[327:320] , 8'hf7};
    2556                                                                     dataout_10= {data[79:72] , data[207:200] , data[335:328] , 8'hf7}; 
    2557                                                                     dataout_11= {data[87:80] , data[215:208] , data[343:336] , 8'hf7};
    2558                                                                     dataout_12= {data[95:88] , data[223:216] , data[351:344] , 8'hf7};
    2559                                                                     dataout_13= {data[103:96] , data[231:224] , data[359:352] , 8'hf7};
    2560                                                                     dataout_14= {data[111:104] , data[239:232] , data[367:360] , 8'hf7}; 
    2561                                                                     dataout_15= {data[119:112] , data[247:240] , data[375:368] , 8'hf7};
    2562                                                                     dataout_16= {data[127:120] , data[255:248] , data[383:376] , 8'hf7};                        
    2563                                                                 end
    2564                                             
    2565                                             
    2566                                                             d_k_out_1= {d_k_in[0] , d_k_in[16] , d_k_in[32] , d_k_in[48]};
    2567                                                             d_k_out_2= {d_k_in[1] , d_k_in[17] , d_k_in[33] , d_k_in[49]};
    2568                                                             d_k_out_3= {d_k_in[2] , d_k_in[18] , d_k_in[34] , d_k_in[50]};
    2569                                                             d_k_out_4= {d_k_in[3] , d_k_in[19] , d_k_in[35] , d_k_in[51]};
    2570                                                             d_k_out_5= {d_k_in[4] , d_k_in[20] , d_k_in[36] , 1'b1};
    2571                                                             d_k_out_6= {d_k_in[5] , d_k_in[21] , d_k_in[37] , 1'b1};
    2572                                                             d_k_out_7= {d_k_in[6] , d_k_in[22] , d_k_in[38] , 1'b1};
    2573                                                             d_k_out_8= {d_k_in[7] , d_k_in[23] , d_k_in[39] , 1'b1};
    2574                                                             d_k_out_9= {d_k_in[8] , d_k_in[24] , d_k_in[40] , 1'b1};
    2575                                                             d_k_out_10= {d_k_in[9] , d_k_in[25] , d_k_in[41] , 1'b1};
    2576                                                             d_k_out_11= {d_k_in[10] , d_k_in[26] , d_k_in[42] , 1'b1};
    2577                                                             d_k_out_12= {d_k_in[11] , d_k_in[27] , d_k_in[43] , 1'b1};
    2578                                                             d_k_out_13= {d_k_in[12] , d_k_in[28] , d_k_in[44] , 1'b1};
    2579                                                             d_k_out_14= {d_k_in[13] , d_k_in[29] , d_k_in[45] , 1'b1};
    2580                                                             d_k_out_15= {d_k_in[14] , d_k_in[30] , d_k_in[46] , 1'b1};
    2581                                                             d_k_out_16= {d_k_in[15] , d_k_in[31] , d_k_in[47] , 1'b1};
    2582                                                         end                          
    2583                                                         else if(data_valid[56] == 0 && data_valid[0] == 1) begin
    2584                                                                 if(generation>=3) begin
    2585                                                                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , data[391:384]};
    2586                                                                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , data[399:392]}; 
    2587                                                                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , data[407:400]};
    2588                                                                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , data[415:408]};
    2589                                                                     dataout_5= {data[39:32] , data[167:160] , data[295:288] , data[423:416]};
    2590                                                                     dataout_6= {data[47:40] , data[175:168] , data[303:296] , data[431:424]}; 
    2591                                                                     dataout_7= {data[55:48] , data[183:176] , data[311:304] , data[439:432]};
    2592                                                                     dataout_8= {data[63:56] , data[191:184] , data[319:312] , data[447:440]};
    2593                                                                     dataout_9= {data[71:64] , data[199:192] , data[327:320] , 8'b0};
    2594                                                                     dataout_10= {data[79:72] , data[207:200] , data[335:328] , 8'b0}; 
    2595                                                                     dataout_11= {data[87:80] , data[215:208] , data[343:336] , 8'b0};
    2596                                                                     dataout_12= {data[95:88] , data[223:216] , data[351:344] , 8'b0};
    2597                                                                     dataout_13= {data[103:96] , data[231:224] , data[359:352] , 8'b0};
    2598                                                                     dataout_14= {data[111:104] , data[239:232] , data[367:360] , 8'b0}; 
    2599                                                                     dataout_15= {data[119:112] , data[247:240] , data[375:368] , 8'b0};
    2600                                                                     dataout_16= {data[127:120] , data[255:248] , data[383:376] , 8'b0}; 
    2601                                                                 end
    2602                                                                 else begin
    2603                                                                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , data[391:384]};
    2604                                                                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , data[399:392]}; 
    2605                                                                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , data[407:400]};
    2606                                                                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , data[415:408]};
    2607                                                                     dataout_5= {data[39:32] , data[167:160] , data[295:288] , data[423:416]};
    2608                                                                     dataout_6= {data[47:40] , data[175:168] , data[303:296] , data[431:424]}; 
    2609                                                                     dataout_7= {data[55:48] , data[183:176] , data[311:304] , data[439:432]};
    2610                                                                     dataout_8= {data[63:56] , data[191:184] , data[319:312] , data[447:440]};
    2611                                                                     dataout_9= {data[71:64] , data[199:192] , data[327:320] , 8'hf7};
    2612                                                                     dataout_10= {data[79:72] , data[207:200] , data[335:328] , 8'hf7}; 
    2613                                                                     dataout_11= {data[87:80] , data[215:208] , data[343:336] , 8'hf7};
    2614                                                                     dataout_12= {data[95:88] , data[223:216] , data[351:344] , 8'hf7};
    2615                                                                     dataout_13= {data[103:96] , data[231:224] , data[359:352] , 8'hf7};
    2616                                                                     dataout_14= {data[111:104] , data[239:232] , data[367:360] , 8'hf7}; 
    2617                                                                     dataout_15= {data[119:112] , data[247:240] , data[375:368] , 8'hf7};
    2618                                                                     dataout_16= {data[127:120] , data[255:248] , data[383:376] , 8'hf7};                        
    2619                                                                 end
    2620                                             
    2621                                             
    2622                                                             d_k_out_1= {d_k_in[0] , d_k_in[16] , d_k_in[32] , d_k_in[48]};
    2623                                                             d_k_out_2= {d_k_in[1] , d_k_in[17] , d_k_in[33] , d_k_in[49]};
    2624                                                             d_k_out_3= {d_k_in[2] , d_k_in[18] , d_k_in[34] , d_k_in[50]};
    2625                                                             d_k_out_4= {d_k_in[3] , d_k_in[19] , d_k_in[35] , d_k_in[51]};
    2626                                                             d_k_out_5= {d_k_in[4] , d_k_in[20] , d_k_in[36] , d_k_in[52]};
    2627                                                             d_k_out_6= {d_k_in[5] , d_k_in[21] , d_k_in[37] , d_k_in[53]};
    2628                                                             d_k_out_7= {d_k_in[6] , d_k_in[22] , d_k_in[38] , d_k_in[54]};
    2629                                                             d_k_out_8= {d_k_in[7] , d_k_in[23] , d_k_in[39] , d_k_in[55]};
    2630                                                             d_k_out_9= {d_k_in[8] , d_k_in[24] , d_k_in[40] , 1'b1};
    2631                                                             d_k_out_10= {d_k_in[9] , d_k_in[25] , d_k_in[41] , 1'b1};
    2632                                                             d_k_out_11= {d_k_in[10] , d_k_in[26] , d_k_in[42] , 1'b1};
    2633                                                             d_k_out_12= {d_k_in[11] , d_k_in[27] , d_k_in[43] , 1'b1};
    2634                                                             d_k_out_13= {d_k_in[12] , d_k_in[28] , d_k_in[44] , 1'b1};
    2635                                                             d_k_out_14= {d_k_in[13] , d_k_in[29] , d_k_in[45] , 1'b1};
    2636                                                             d_k_out_15= {d_k_in[14] , d_k_in[30] , d_k_in[46] , 1'b1};
    2637                                                             d_k_out_16= {d_k_in[15] , d_k_in[31] , d_k_in[47] , 1'b1};
    2638                                                         end              */
    2639                                                        /* else if(data_valid[60] == 0 && data_valid[0] == 1) begin
    2640                                                                 if(generation>=3) begin
    2641                                                                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , data[391:384]};
    2642                                                                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , data[399:392]}; 
    2643                                                                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , data[407:400]};
    2644                                                                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , data[415:408]};
    2645                                                                     dataout_5= {data[39:32] , data[167:160] , data[295:288] , data[423:416]};
    2646                                                                     dataout_6= {data[47:40] , data[175:168] , data[303:296] , data[431:424]}; 
    2647                                                                     dataout_7= {data[55:48] , data[183:176] , data[311:304] , data[439:432]};
    2648                                                                     dataout_8= {data[63:56] , data[191:184] , data[319:312] , data[447:440]};
    2649                                                                     dataout_9= {data[71:64] , data[199:192] , data[327:320] , data[455:448]};
    2650                                                                     dataout_10= {data[79:72] , data[207:200] , data[335:328] , data[463:456]}; 
    2651                                                                     dataout_11= {data[87:80] , data[215:208] , data[343:336] , data[471:464]};
    2652                                                                     dataout_12= {data[95:88] , data[223:216] , data[351:344] , data[479:472]};
    2653                                                                     dataout_13= {data[103:96] , data[231:224] , data[359:352] , 8'b0};
    2654                                                                     dataout_14= {data[111:104] , data[239:232] , data[367:360] , 8'b0}; 
    2655                                                                     dataout_15= {data[119:112] , data[247:240] , data[375:368] , 8'b0};
    2656                                                                     dataout_16= {data[127:120] , data[255:248] , data[383:376] , 8'b0};
    2657                                                                 end
    2658                                                                 else begin
    2659                                                                     dataout_1= {data[7:0] , data[135:128] , data[263:256] , data[391:384]};
    2660                                                                     dataout_2= {data[15:8] , data[143:136] , data[271:264] , data[399:392]}; 
    2661                                                                     dataout_3= {data[23:16] , data[151:144] , data[279:272] , data[407:400]};
    2662                                                                     dataout_4= {data[31:24] , data[159:152] , data[287:280] , data[415:408]};
    2663                                                                     dataout_5= {data[39:32] , data[167:160] , data[295:288] , data[423:416]};
    2664                                                                     dataout_6= {data[47:40] , data[175:168] , data[303:296] , data[431:424]}; 
    2665                                                                     dataout_7= {data[55:48] , data[183:176] , data[311:304] , data[439:432]};
    2666                                                                     dataout_8= {data[63:56] , data[191:184] , data[319:312] , data[447:440]};
    2667                                                                     dataout_9= {data[71:64] , data[199:192] , data[327:320] , data[455:448]};
    2668                                                                     dataout_10= {data[79:72] , data[207:200] , data[335:328] , data[463:456]}; 
    2669                                                                     dataout_11= {data[87:80] , data[215:208] , data[343:336] , data[471:464]};
    2670                                                                     dataout_12= {data[95:88] , data[223:216] , data[351:344] , data[479:472]};
    2671                                                                     dataout_13= {data[103:96] , data[231:224] , data[359:352] , 8'hf7};
    2672                                                                     dataout_14= {data[111:104] , data[239:232] , data[367:360] , 8'hf7}; 
    2673                                                                     dataout_15= {data[119:112] , data[247:240] , data[375:368] , 8'hf7};
    2674                                                                     dataout_16= {data[127:120] , data[255:248] , data[383:376] , 8'hf7};                        
    2675                                                                 end
    2676                                             
    2677                                             
    2678                                                             d_k_out_1= {d_k_in[0] , d_k_in[16] , d_k_in[32] , d_k_in[48]};
    2679                                                             d_k_out_2= {d_k_in[1] , d_k_in[17] , d_k_in[33] , d_k_in[49]};
    2680                                                             d_k_out_3= {d_k_in[2] , d_k_in[18] , d_k_in[34] , d_k_in[50]};
    2681                                                             d_k_out_4= {d_k_in[3] , d_k_in[19] , d_k_in[35] , d_k_in[51]};
    2682                                                             d_k_out_5= {d_k_in[4] , d_k_in[20] , d_k_in[36] , d_k_in[52]};
    2683                                                             d_k_out_6= {d_k_in[5] , d_k_in[21] , d_k_in[37] , d_k_in[53]};
    2684                                                             d_k_out_7= {d_k_in[6] , d_k_in[22] , d_k_in[38] , d_k_in[54]};
    2685                                                             d_k_out_8= {d_k_in[7] , d_k_in[23] , d_k_in[39] , d_k_in[55]};
    2686                                                             d_k_out_9= {d_k_in[8] , d_k_in[24] , d_k_in[40] , d_k_in[56]};
    2687                                                             d_k_out_10= {d_k_in[9] , d_k_in[25] , d_k_in[41] , d_k_in[57]};
    2688                                                             d_k_out_11= {d_k_in[10] , d_k_in[26] , d_k_in[42] , d_k_in[58]};
    2689                                                             d_k_out_12= {d_k_in[11] , d_k_in[27] , d_k_in[43] , d_k_in[59]};
    2690                                                             d_k_out_13= {d_k_in[12] , d_k_in[28] , d_k_in[44] , 1'b1};
    2691                                                             d_k_out_14= {d_k_in[13] , d_k_in[29] , d_k_in[45] , 1'b1};
    2692                                                             d_k_out_15= {d_k_in[14] , d_k_in[30] , d_k_in[46] , 1'b1};
    2693                                                             d_k_out_16= {d_k_in[15] , d_k_in[31] , d_k_in[47] , 1'b1};
    2694                                                         end           */ 
    2695                                               end
    2696                                             end
    2697                                             
    2698                                             endmodule
    2699                                             


=================================================================================
=== File: RTL/LPIF RX Control & Data Flow.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          105       104         1      99.0

================================Statement Details================================

Statement Coverage for file RTL/LPIF RX Control & Data Flow.v --

    1                                                module LPIF_RX_Control_DataFlow(input clk, input reset, input [63:0]tlpstart, input [63:0]dllpstart, input [63:0]tlpend, input [63:0]dllpend, 
    2                                                								input [63:0]edb, input [63:0]packetValid, input [511:0]packetData, input [2:0]GEN, 
    3                                                								output [63:0]pl_tlpstart, output [63:0]pl_dllpstart, output [63:0]pl_tlpend,
    4                                                								output [63:0]pl_dllpend, output [63:0]pl_tlpedb, output reg [63:0]pl_valid, output reg [511:0]pl_data,
    5                                                								output reg [2:0]pl_speedmode);
    6                                                			
    7                                                
    8                                                	integer i;
    9                                                	reg [2:0]pl_speedmode_next;
    10                                               	reg [511:0]data, pl_data_next;
    11                                               	reg [63:0]register[0:5];
    12                                               	reg [63:0]tlpStartReg, dllpStartReg, tlpEndReg, dllpEndReg, tlpEdbReg, 
    13                                               			pl_valid_next, pl_tlpedb_next, pl_tlpend_next, pl_dllpend_next, pl_tlpstart_next, pl_dllpstart_next;
    14                                               	
    15              1                     730340     	always@(posedge clk or negedge reset)
    16                                               		if(!reset)
    17                                               			begin
    18              1                         18     			pl_data <= 0;
    19              1                         18     			pl_valid <= 0;
    20              1                         18     			tlpEdbReg <= 0;
    21              1                         18     			tlpEndReg <= 0;
    22              1                         18     			dllpEndReg <= 0;
    23              1                         18     			dllpStartReg <= 0;
    24              1                         18     			tlpStartReg <= 0;
    25              1                         18     			pl_speedmode <= 0;
    26                                               			end
    27                                               		else
    28                                               			begin
    29              1                     730322     			pl_data <= pl_data_next;
    30              1                     730322     			pl_valid <= pl_valid_next;
    31              1                     730322     			tlpEdbReg <= {pl_tlpedb_next[63:1]>>1, pl_tlpedb_next[0]}; //pl_tlpedb_next[0] to keep first bit while shifting. important if pipewidth = 8 and lanes number = 1
    32              1                     730322     			tlpEndReg <= {pl_tlpend_next[63:1]>>1, pl_tlpend_next[0]};
    33              1                     730322     			dllpEndReg <= {pl_dllpend_next[63:1]>>1, pl_dllpend_next[0]};
    34              1                     730322     			tlpStartReg <= {pl_tlpstart_next[63:1], pl_tlpstart_next[0] | tlpStartReg[63]};
    35              1                     730322     			dllpStartReg <= {pl_dllpstart_next[63:1], pl_dllpstart_next[0] | dllpStartReg[63]};
    36              1                     730322     			pl_speedmode <= pl_speedmode_next;
    37                                               			end
    38                                               			
    39              1                     827600     	always@*
    40                                               		begin
    41              1                     827600     		register[0] = packetValid; register[1]=tlpstart; register[2]=tlpend; register[3]=edb; register[4]=dllpstart; register[5]=dllpend;
    41              2                     827600     
    41              3                     827600     
    41              4                     827600     
    41              5                     827600     
    41              6                     827600     
    42              1                     827600     		pl_tlpstart_next = 0; pl_tlpend_next = 0; pl_tlpedb_next = 0; pl_dllpstart_next = 0; pl_dllpend_next = 0; pl_valid_next = 0;
    42              2                     827600     
    42              3                     827600     
    42              4                     827600     
    42              5                     827600     
    42              6                     827600     
    43              1                     827600     		data = packetData;
    44              1                     827600     		pl_data_next = 0;
    45                                               		
    46              1                     827600     		for(i=0; i<=504; i = i+8)
    46              2                   52966400     
    47                                               			begin
    48              1                   52966400     			pl_tlpstart_next[i/8] = register[1][i/8];
    49              1                   52966400     			pl_tlpend_next[i/8] = register[2][i/8];
    50              1                   52966400     			pl_tlpedb_next[i/8] = register[3][i/8];
    51              1                   52966400     			pl_dllpstart_next[i/8] = register[4][i/8];
    52              1                   52966400     			pl_dllpend_next[i/8] = register[5][i/8];
    53                                               			
    54                                               			if(register[0][i/8] == 0)
    55                                               				begin
    56              1                   24267637     				data = data>>8;
    57              1                   24267637     				register[0] = register[0]>>1;	//valid
    58              1                   24267637     				register[1] = register[1]>>1;	//tlpstart
    59              1                   24267637     				register[2] = register[2]>>1;	//tlpend
    60              1                   24267637     				register[3] = register[3]>>1;	//edb
    61              1                   24267637     				register[4] = register[4]>>1;	//dllpstart
    62              1                   24267637     				register[5] = register[5]>>1;	//dllpend
    63                                               				end
    64                                               			
    65                                               			if(register[0][i/8] == 0)
    66                                               				begin
    67              1                   24175320     				data = data>>8;
    68              1                   24175320     				register[0] = register[0]>>1;	//valid
    69              1                   24175320     				pl_tlpstart_next[i/8] = register[1][i/8] | pl_tlpstart_next[i/8];
    70              1                   24175320     				pl_tlpend_next[i/8] = register[2][i/8] | pl_tlpend_next[i/8];
    71              1                   24175320     				pl_tlpedb_next[i/8] = register[3][i/8] | pl_tlpedb_next[i/8];
    72              1                   24175320     				pl_dllpstart_next[i/8] = register[4][i/8] | pl_dllpstart_next[i/8];
    73              1                   24175320     				pl_dllpend_next[i/8] = register[5][i/8] | pl_dllpend_next[i/8];
    74              1                   24175320     				register[1] = register[1]>>1;	//tlpstart
    75              1                   24175320     				register[2] = register[2]>>1;	//tlpend
    76              1                   24175320     				register[3] = register[3]>>1;	//edb
    77              1                   24175320     				register[4] = register[4]>>1;	//dllpstart
    78              1                   24175320     				register[5] = register[5]>>1;	//dllpend
    79                                               				end
    80                                               				
    81                                               			if(register[0][i/8] == 0)
    82                                               				begin
    83              1                   23751451     				data = data>>8;
    84              1                   23751451     				register[0] = register[0]>>1;	//valid
    85              1                   23751451     				pl_tlpstart_next[i/8] = register[1][i/8] | pl_tlpstart_next[i/8];
    86              1                   23751451     				pl_tlpend_next[i/8] = register[2][i/8] | pl_tlpend_next[i/8];
    87              1                   23751451     				pl_tlpedb_next[i/8] = register[3][i/8] | pl_tlpedb_next[i/8];
    88              1                   23751451     				pl_dllpstart_next[i/8] = register[4][i/8] | pl_dllpstart_next[i/8];
    89              1                   23751451     				pl_dllpend_next[i/8] = register[5][i/8] | pl_dllpend_next[i/8];
    90              1                   23751451     				register[1] = register[1]>>1;	//tlpstart
    91              1                   23751451     				register[2] = register[2]>>1;	//tlpend
    92              1                   23751451     				register[3] = register[3]>>1;	//edb
    93              1                   23751451     				register[4] = register[4]>>1;	//dllpstart
    94              1                   23751451     				register[5] = register[5]>>1;	//dllpend
    95                                               				end
    96                                               				
    97                                               			if(register[0][i/8] == 0)
    98                                               				begin
    99              1                   23701154     				data = data>>8;
    100             1                   23701154     				register[0] = register[0]>>1;	//valid
    101             1                   23701154     				pl_tlpstart_next[i/8] = register[1][i/8] | pl_tlpstart_next[i/8];
    102             1                   23701154     				pl_tlpend_next[i/8] = register[2][i/8] | pl_tlpend_next[i/8];
    103             1                   23701154     				pl_tlpedb_next[i/8] = register[3][i/8] | pl_tlpedb_next[i/8];
    104             1                   23701154     				pl_dllpstart_next[i/8] = register[4][i/8] | pl_dllpstart_next[i/8];
    105             1                   23701154     				pl_dllpend_next[i/8] = register[5][i/8] | pl_dllpend_next[i/8];
    106             1                   23701154     				register[1] = register[1]>>1;	//tlpstart
    107             1                   23701154     				register[2] = register[2]>>1;	//tlpend
    108             1                   23701154     				register[3] = register[3]>>1;	//edb
    109             1                   23701154     				register[4] = register[4]>>1;	//dllpstart
    110             1                   23701154     				register[5] = register[5]>>1;	//dllpend
    111                                              				end
    112                                              				
    113                                              			if(register[0][i/8] == 0)
    114                                              				begin
    115             1                   23475453     				data = data>>8;
    116             1                   23475453     				register[0] = register[0]>>1;	//valid
    117             1                   23475453     				pl_tlpstart_next[i/8] = register[1][i/8] | pl_tlpstart_next[i/8];
    118             1                   23475453     				pl_tlpend_next[i/8] = register[2][i/8] | pl_tlpend_next[i/8];
    119             1                   23475453     				pl_tlpedb_next[i/8] = register[3][i/8] | pl_tlpedb_next[i/8];
    120             1                   23475453     				pl_dllpstart_next[i/8] = register[4][i/8] | pl_dllpstart_next[i/8];
    121             1                   23475453     				pl_dllpend_next[i/8] = register[5][i/8] | pl_dllpend_next[i/8];
    122             1                   23475453     				register[1] = register[1]>>1;	//tlpstart
    123             1                   23475453     				register[2] = register[2]>>1;	//tlpend
    124             1                   23475453     				register[3] = register[3]>>1;	//edb
    125             1                   23475453     				register[4] = register[4]>>1;	//dllpstart
    126             1                   23475453     				register[5] = register[5]>>1;	//dllpend
    127                                              				end
    128                                              
    129             1                   52966400     			pl_data_next[i+:8] = data[i+:8];
    130             1                   52966400     			pl_valid_next[i/8] = register[0][i/8];
    131                                              			end
    132                                              		if(packetValid == 0)
    133                                              			begin
    134             1                     297460     			pl_tlpstart_next[63] = pl_tlpstart_next[0];
    135             1                     297460     			pl_dllpstart_next[63] = pl_dllpstart_next[0];
    136                                              			end
    137                                              		end
    138                                              		
    139             1                         12     	always@*
    140                                              		begin
    141                                              		if(GEN == 1)
    142             1                          6     			pl_speedmode_next <= 3'b1;
    143                                              		/*else if(GEN == 2)
    144                                              			pl_speedmode_next <= 3'b010;
    145                                              		else if(GEN == 3)
    146                                              			pl_speedmode_next <= 3'b011;
    147                                              		else if(GEN == 4)
    148                                              			pl_speedmode_next <= 3'b100;*/
    149                                              		else if(GEN == 5)
    150             1                          6     			pl_speedmode_next <= 3'b101;
    151                                              		else
    152             1                    ***0***     			pl_speedmode_next <= 3'b111;
    153                                              		end
    154                                              		
    155                                              	assign pl_tlpstart = tlpStartReg;
    156                                              	assign pl_dllpstart = dllpStartReg;
    157             1                     199049     	assign pl_tlpedb = (packetValid == 64'b0)? edb | tlpEdbReg: tlpEdbReg;
    158             1                     220053     	assign pl_tlpend = (packetValid == 64'b0)? tlpend | tlpEndReg: tlpEndReg;
    159             1                     221219     	assign pl_dllpend = (packetValid == 64'b0)? dllpend | dllpEndReg: dllpEndReg;
    160                                              		
    161                                              		
    162                                              endmodule


=================================================================================
=== File: RTL/Lane_Management_Control.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            9         9         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/Lane_Management_Control.v --

    1                                                module LMC_RX #(parameter GEN1_PIPEWIDTH = 8, parameter GEN2_PIPEWIDTH = 16, parameter GEN3_PIPEWIDTH = 32, parameter GEN4_PIPEWIDTH = 8,
    2                                                			parameter GEN5_PIPEWIDTH = 8)(input wire clk, input wire reset, input wire [2:0]GEN, 
    3                                                				input wire [31:0]descramblerSyncHeader, input wire [15:0]descramblerDataValid, input wire [4:0]LANESNUMBER,
    4                                                						      input wire [511: 0]LMCIn , input wire [63:0]descramblerDataK, output wire LMCValid, output [31:0]LMCSyncHeader,
    5                                                				output wire [63:0]LMCDataK, output wire [511:0]LMCData);
    6                                                
    7                                                	wire [511:0]unstripedData, stripedData;
    8                                                	wire [63:0]unstripedDataK, stripedDataK;
    9                                                	wire [5:0]PIPEWIDTH;
    10                                               	reg valid , valid_next;
    11                                               	reg [31:0]syncHeader, syncHeader_next;
    12                                               	
    13                                               	DataHandling #(.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH), .GEN2_PIPEWIDTH(GEN2_PIPEWIDTH), .GEN3_PIPEWIDTH(GEN3_PIPEWIDTH), .GEN4_PIPEWIDTH(GEN4_PIPEWIDTH), .GEN5_PIPEWIDTH(GEN5_PIPEWIDTH)) 
    14                                               					dataHandling(.LMCIn(LMCIn), .GEN(GEN), .LANESNUMBER(LANESNUMBER), .descramblerDataK(descramblerDataK), .stripedDataK(stripedDataK), .stripedData(stripedData), .PIPEWIDTH(PIPEWIDTH));
    15                                               	
    16                                               	UnStriping ustriping(.clk(clk), .reset(reset), .LANESNUMBER(LANESNUMBER), .PIPEWIDTH(PIPEWIDTH), .strippedDataK(stripedDataK), .strippedData(stripedData), .unstripedData(unstripedData), .unstripedDataK(unstripedDataK));
    17                                               	
    18              1                     555898     	always@(posedge clk or negedge reset)
    19                                               		if(!reset)
    20                                               			begin
    21              1                         18     			valid <= 0;
    22              1                         18     			syncHeader <= 0;
    23                                               			end
    24                                               		else 
    25                                               			begin
    26              1                     555880     			valid <= valid_next;
    27              1                     555880     			syncHeader <= syncHeader_next;
    28                                               			end
    29                                               
    30              1                     315082     	always@*
    31                                               		begin
    32                                               		if(descramblerDataValid != 0)
    33              1                     181328     			valid_next = 1;
    34                                               		else 
    35              1                     133754     			valid_next = 0;
    36              1                     315082     		syncHeader_next = descramblerSyncHeader;
    37                                               		end
    38                                               	
    39                                               	assign LMCValid = valid;
    40                                               	assign LMCData = unstripedData;
    41                                               	assign LMCDataK = unstripedDataK;
    42                                               	assign LMCSyncHeader = syncHeader;
    43                                               
    44                                               endmodule
    45                                               


=================================================================================
=== File: RTL/MUX.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            9         9         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/MUX.v --

    1                                                module MUX (sel,data_valid, os_valid, data_in, os_in, data_datak, os_datak, out, datak_out, valid_out,MuxSyncHeader);
    2                                                input sel;//selector signal coming from Tx LTSSM in order to tell MUX to forward either order sets coming from os generator or TLPs or DLLPs coming from LPIF Tx control and dataflow
    3                                                input [63:0]data_valid;// valid data coming from LPIF Tx control and dataflow
    4                                                input [63:0]os_valid;// valid data comimg from os generator
    5                                                input [63:0]data_datak; // K or D characters coming coming from LPIF Tx control and dataflow
    6                                                input [63:0]os_datak;// K or D characters coming coming from OS GENERATOR
    7                                                input [511:0] data_in;// TLPS or DLLPS coming from LPIF Tx control and dataflow
    8                                                input [511:0] os_in;// order sets coming from os generator
    9                                                output reg MuxSyncHeader;
    10                                               output reg [63:0]valid_out; 
    11                                               output reg [63:0]datak_out;
    12                                               output reg [511:0] out;
    13              1                     527979     always@(*)begin
    14                                                if(sel)begin  // if Tx LTSSM choose to forward TLPs or DLLPs coming from LPIF Tx control and dataflow
    15              1                      13722        out=data_in;
    16              1                      13722        valid_out=data_valid;
    17              1                      13722        datak_out=data_datak;
    18              1                      13722        MuxSyncHeader=0;
    19                                                  end
    20                                                else begin // if Tx LTSSM choose to forward order sets coming from os generator
    21              1                     514257       out=os_in;
    22              1                     514257       valid_out=os_valid;
    23              1                     514257       datak_out=os_datak;
    24              1                     514257       MuxSyncHeader=1;
    25                                                 end
    26                                                end
    27                                                endmodule
    28                                                      
    29                                               
    30                                               


=================================================================================
=== File: RTL/Master.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           36        36         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/Master.v --

    1                                                
    2                                                module Master(input wire turnOff,masterDataValid, input wire [1:0]syncHeader, input wire [5:0]PIPEWIDTH, input wire [31:0]masterData,input wire [3:0]masterDataK,input[4:0] RX_State, input [2:0]GEN,
    3                                                		output wire patternReset, output wire [1:0]LFSRSel, output wire [3:0]advance, output reg [3:0]descramblingEnable);
    4                                                
    5                                                		
    6                                                	localparam SKP = 28, COM = 8'hBC, SKPGEN3 = 8'hAA, EIEOS = 8'h00, TS1 = 8'h1E, TS2 = 8'h2D;
    7                                                	localparam os = 2'b00, osInside = 2'b01, data = 2'b10;
    8                                                	reg [1:0]state;
    9                                                	reg ptrnReset, ptrnResetGEN3, EIEOSFlag, dataFlag;
    10                                               	reg [3:0]write, writeGEN3;
    11                                               	
    12              1                   10121712     	always@* begin
    13                                               		if(turnOff)	//must be turned off by LTSSM to make sure that TS1&TS2 data doesn't get scrambled
    14                                               			begin
    15              1                    8888416     			ptrnReset = 1;
    16              1                    8888416     			write = 4'hF;
    17                                               			end
    18                                               		else
    19                                               			begin	
    20              1                    1233296     			write = 4'hF;
    21              1                    1233296     			ptrnReset = 0;
    22                                               			if(  (masterData[7:0] == COM && masterDataK[0] )|| (masterData[15:8] == COM && masterDataK[1]) || (masterData[23:16] == COM && masterDataK[2]) || (masterData[31:24] == COM && masterDataK[3])  )begin
    23              1                     138512     				ptrnReset = 1;
    24                                               			end
    25                                               			if(masterData[7:0] == SKP)
    26              1                       2028     				write[0] = 0; 
    27                                               			if(masterData[15:8] == SKP)
    28              1                       1832     				write[1] = 0;
    29                                               			if(masterData[23:16] == SKP)
    30              1                       1800     				write[2] = 0;
    31                                               			if(masterData[31:24] == SKP)
    32              1                      28861     				write[3] = 0;
    33                                               			end
    34                                               		end
    35                                               			
    36              1                    9715888     	always@*
    37                                               		begin
    38                                               		if(syncHeader == 2'b10)
    39                                               			begin
    40              1                     755456     			state = os;
    41              1                     755456     			dataFlag = 0;
    42                                               			end
    43                                               		else if(syncHeader == 2'b01)
    44                                               			begin
    45              1                     106624     			state = data;
    46              1                     106624     			dataFlag = 1;
    47                                               			end
    48                                               		else
    49                                               			begin
    50              1                    8853808     			dataFlag = dataFlag;
    51              1                    8853808     			state = (dataFlag)? data:osInside;
    52                                               			end
    53                                               			
    54                                               		case(state)
    55                                               			os: 
    56                                               				begin
    57              1                     755456     				writeGEN3 = 4'hF;
    58              1                     755456     				ptrnResetGEN3 = 0;
    59              1                     755456     				descramblingEnable = 0;
    60              1                     755456     				EIEOSFlag = 0;
    61                                               				if (masterData[7:0]==TS1 || masterData[15:8]==TS1 || masterData[23:16]==TS1 || masterData[31:24]==TS1)
    62              1                     489184     					descramblingEnable = ~{masterData[31:24]==TS1, masterData[23:16]==TS1, masterData[15:8]==TS1, masterData[7:0]==TS1};
    63                                               				else if (masterData[7:0]==TS2 || masterData[15:8]==TS2 || masterData[23:16]==TS2 || masterData[31:24]==TS2)
    64              1                       3878     					descramblingEnable = ~{masterData[31:24]==TS2, masterData[23:16]==TS2, masterData[15:8]==TS2, masterData[7:0]==TS2};
    65                                               				else if(masterDataValid && (RX_State == 5'd18))
    66              1                     105544     				  descramblingEnable =4'hF;
    67                                               				else if((masterData[7:0] == EIEOS || ((masterData[15:8] == EIEOS)&&PIPEWIDTH>=16) || ((masterData[23:16] == EIEOS || masterData[31:24] == EIEOS)&&PIPEWIDTH==32))&&(RX_State !=10))
    68              1                       2384     					EIEOSFlag = 1;
    69                                               				else if(masterData[7:0] == SKPGEN3)
    70              1                        588     					writeGEN3 = ~{masterData[31:24]==SKPGEN3, masterData[23:16]==SKPGEN3, masterData[15:8]==SKPGEN3, masterData[7:0]==SKPGEN3};
    71                                               				end
    72                                               			osInside:
    73                                               				begin
    74              1                    3841968     				ptrnResetGEN3 = (EIEOSFlag)? 1:0;
    75              1                    3841968     				writeGEN3 = (writeGEN3 == 4'hF)? writeGEN3 : 4'b0;
    76              1                    3841968     				descramblingEnable = (descramblingEnable == 0)? 0 : 4'hF;
    77                                               				end
    78                                               			data: 
    79                                               				begin
    80              1                    4971696     				EIEOSFlag = 0;
    81              1                    4971696     				ptrnResetGEN3 = 0;
    82              1                    4971696     				writeGEN3 = 4'hF;
    83              1                    4971696     				descramblingEnable = 4'b1111;
    84                                               				end
    85                                               		endcase
    86                                               		end
    87                                               
    88              1                         64     	assign LFSRSel = (PIPEWIDTH == 8)?	0 : 
    89                                               					 (PIPEWIDTH == 16)?	1 : 2;
    90              1                      70821     	assign advance = (GEN < 3)? write:writeGEN3;
    91              1                     702464     	assign patternReset = (GEN < 3)? ptrnReset:ptrnResetGEN3;
    92                                               
    93                                               endmodule


=================================================================================
=== File: RTL/Master_RX_LTSSM.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          149       144         5      96.6

================================Statement Details================================

Statement Coverage for file RTL/Master_RX_LTSSM.v --

    1                                                module  masterRxLTSSM #(parameter MAXLANES = 16 , DEVICETYPE = 0,
    2                                                    parameter GEN1_PIPEWIDTH = 8, parameter GEN2_PIPEWIDTH = 8, parameter GEN3_PIPEWIDTH = 8,
    3                                                    parameter GEN4_PIPEWIDTH = 8,parameter GEN5_PIPEWIDTH = 8)
    4                                                 (
    5                                                    input clk,
    6                                                    input [4:0]numberOfDetectedLanes,
    7                                                    input [4:0]substate,
    8                                                    input [15:0]countersComparators,
    9                                                    input rxElectricalIdle,
    10                                                   input timeOut,
    11                                                   input reset,
    12                                                   input [15:0]RcvrCfgToidle,
    13                                                   input [2:0] trainToGen,
    14                                                   input [15:0]detailedRecoverySubstates,
    15                                                   input [2:0] gen,
    16                                                   output reg finish,
    17                                                   output reg [4:0]exitTo,
    18                                                   output reg [15:0]resetOsCheckers,
    19                                                   output [3:0]lpifStatus,
    20                                                   output reg [2:0]timeToWait,
    21                                                   output reg enableTimer,
    22                                                   output reg startTimer,
    23                                                   output reg resetTimer,
    24                                                   output reg[4:0]comparatorsCount,
    25                                                   input PAD_TS);
    26                                                   
    27                                                   reg[4:0] lastState,lastState_next;
    28                                                   reg[1:0] currentState,nextState;
    29                                                   reg[15:0]comparatorsCondition;
    30                                               
    31                                               
    32                                               //timer parameters
    33                                               parameter t0ms = 3'd0,t12ms= 3'd1,t24ms = 3'd2,t48ms = 3'd3,t2ms = 3'd4,t8ms = 3'd5,t1ms=3'd6;
    34                                               //input substates from main ltssm
    35                                                   localparam [4:0]
    36                                               	    detectQuiet =  5'd0,
    37                                                       detectActive = 5'd1,
    38                                                       pollingActive= 5'd2,
    39                                                       pollingConfiguration= 5'd3,
    40                                                       configurationLinkWidthStart = 5'd4,
    41                                                       configurationLinkWidthAccept = 5'd5,
    42                                                       configurationLanenumWait = 5'd6,
    43                                                       configurationLanenumAccept = 5'd7,
    44                                                       configurationComplete = 5'd8,
    45                                                       configurationIdle = 5'd9,
    46                                                       L0 = 5'd10,
    47                                                       recoveryRcvrLock = 5'd11,
    48                                                       recoveryRcvrCfg = 5'd12,
    49                                                       recoverySpeed = 5'd13,
    50                                                       phase0 = 5'd14,
    51                                                       phase1 = 5'd15,
    52                                                       phase2 = 5'd16,
    53                                                       phase3 =5'd17,
    54                                                       recoveryIdle = 5'd18,
    55                                                       recoverySpeedeieos = 5'd19,
    56                                                       recoverywait = 5'd20;
    57                                               
    58                                                   
    59                                               
    60                                               //local states
    61                                                   localparam [1:0]
    62                                                   start = 2'b00,
    63                                                   counting = 2'b01,
    64                                                   success = 2'b10,
    65                                                   failed = 2'b11;
    66                                               
    67                                                   //CURRENT STATE FF
    68              1                      23885         always @(posedge clk or negedge reset)
    69                                                   begin
    70                                                       if(!reset)
    71                                                       begin
    72              1                         18                 currentState <= start;
    73              1                         18     	        finish <= 1'b0;
    74              1                         18     		    lastState<=4'hF;
    75              1                         18                 lastState_next<=4'hF;
    76              1                         18                 finish<= 0;
    77              1                         18                 exitTo<= 0;
    78              1                         18                 resetOsCheckers<= 0;
    79                                                           
    80              1                         18                 timeToWait<= 0;
    81              1                         18                 enableTimer<= 0;
    82              1                         18                 startTimer<= 0;
    83              1                         18                 resetTimer<= 0;
    84              1                         18                 nextState<=0;
    85              1                         18                 comparatorsCondition<= 0;
    86              1                         18                 comparatorsCount<=0;
    87                                               
    88                                               		    //forcedetectflag<=1'b0;
    89                                                       end
    90                                                       else
    91                                                       begin
    92              1                      23867                 currentState <= nextState;
    93                                               
    94                                                           if( !(( substate == 1 ) && ( lastState == 1 )))
    95              1                      12540                     lastState<=lastState_next;
    96                                                       end    
    97                                               
    98                                               
    99                                                       if((substate ==1 )&& (lastState ==1 ))
    100             1                      11330                     lastState<=0;
    101                                                  
    102                                                  end
    103                                              
    104             1                      36025         always @(*)
    105                                                  begin
    106                                                      case(currentState)
    107                                                      start:
    108                                                      begin
    109                                              
    110                                                          
    111                                                        if(substate != lastState) //ensure that this is a new request
    112                                                          begin
    113             1                      11845                 lastState_next = substate;
    114             1                      11845                 resetOsCheckers = {16{1'b1}};
    115                                                          if(substate == detectQuiet)
    116                                                          begin
    117             1                         66                     comparatorsCount = 5'd0;
    118             1                         66                     timeToWait = t0ms;
    119             1                         66                     nextState = counting;
    120             1                         66                     startTimer = 1'b1;
    121             1                         66                     enableTimer = 1'b1;
    122                                              		 
    123                                                          end
    124                                                          else if(substate == detectActive)
    125                                                          begin
    126             1                      11389                     comparatorsCount = 5'd0;
    127             1                      11389                     timeToWait = t0ms; 
    128             1                      11389                     nextState = counting;
    129             1                      11389                     startTimer = 1'b1;
    130             1                      11389                     enableTimer = 1'b1;
    131                                              		
    132                                                          end
    133                                                          //---marwan-----/
    134                                                          else if(substate==configurationComplete)
    135                                                          begin
    136             1                         17                     comparatorsCount = 5'd8;
    137             1                         17                     timeToWait = t2ms;
    138             1                         17                     nextState = counting;
    139             1                         17                     startTimer = 1'b1;
    140             1                         17                     enableTimer = 1'b1;
    141                                              		
    142                                                          end
    143                                                          //---marwan-----/
    144                                                          else if(substate==pollingActive)
    145                                                          begin
    146             1                         62                     comparatorsCount = 5'd8;
    147             1                         62                     timeToWait = t24ms;
    148             1                         62                     nextState = counting;
    149             1                         62                     startTimer = 1'b1;
    150             1                         62                     enableTimer = 1'b1;
    151                                              		
    152                                                          end
    153                                                          else if (substate==configurationLinkWidthStart||substate==configurationLinkWidthAccept||
    154                                                                  substate==configurationLanenumAccept||substate==phase0||substate==phase1||substate==phase2||substate==phase3)
    155                                                          begin
    156                                                            if(DEVICETYPE == 0 && substate==phase1)
    157             1                          4                     comparatorsCount = 5'd0;                
    158                                                            else
    159             1                        104                     comparatorsCount = 5'd2;
    160                                                              
    161                                                              //------------marwan-----------//
    162                                                              if((substate==phase1) || ( substate==phase0))begin
    163             1                         20                         timeToWait = t12ms;// for now
    164             1                         20                         nextState = counting;
    165             1                         20                         startTimer = 1'b1;
    166             1                         20                         enableTimer = 1'b1;
    167                                              
    168                                                              end
    169                                                              else if(substate==configurationLinkWidthStart )begin
    170             1                         48                         timeToWait = t24ms;
    171             1                         48                         nextState = counting;
    172             1                         48                         startTimer = 1'b1;
    173             1                         48                         enableTimer = 1'b1;
    174             1                         48                         comparatorsCount = 5'd1;
    175                                              
    176                                                              end 
    177                                                              else if(substate==configurationLinkWidthAccept && DEVICETYPE)begin
    178             1                         11                         timeToWait = t2ms;
    179             1                         11                         nextState = counting;
    180             1                         11                         startTimer = 1'b1;
    181             1                         11                         enableTimer = 1'b1;
    182             1                         11                         comparatorsCount = 5'd1;
    183                                              
    184                                                              end 
    185                                                              else if(substate==configurationLinkWidthAccept &&  !DEVICETYPE)begin
    186             1                         11                         timeToWait = t2ms;
    187             1                         11                         nextState = counting;
    188             1                         11                         startTimer = 1'b1;
    189             1                         11                         enableTimer = 1'b1;
    190             1                         11                         comparatorsCount = 5'd1;
    191                                              
    192                                                              end
    193                                                              else begin
    194             1                         18                         timeToWait = t24ms;
    195             1                         18                         nextState = counting;
    196             1                         18                         startTimer = 1'b1;
    197             1                         18                         enableTimer = 1'b1;
    198                                              
    199                                              
    200                                                              end
    201                                                              //------------marwan-----------//
    202                                              
    203                                              		                
    204                                                          end
    205                                                          else if (substate==configurationLanenumWait)
    206                                                          begin
    207             1                         12                     comparatorsCount=5'd2;
    208             1                         12                     timeToWait = t2ms;
    209             1                         12                     nextState = counting;
    210             1                         12                     startTimer = 1'b1;
    211             1                         12                     enableTimer = 1'b1;
    212                                              		
    213                                                          end
    214                                                          else if (substate==pollingConfiguration||substate==recoveryRcvrCfg)
    215                                                          begin
    216             1                         66                     comparatorsCount=5'd8;
    217             1                         66                     timeToWait = t48ms;
    218             1                         66                     nextState = counting;
    219             1                         66                     startTimer = 1'b1;
    220             1                         66                     enableTimer = 1'b1;
    221                                              		
    222                                                          end //----marwan-----//
    223                                                          else if (substate==recoveryRcvrLock)begin
    224             1                         24                     comparatorsCount=5'd8;
    225             1                         24                     timeToWait = t24ms;
    226             1                         24                     nextState = counting;
    227             1                         24                     startTimer = 1'b1;
    228             1                         24                     enableTimer = 1'b1;
    229                                              
    230                                              
    231                                                          end//----marwan-----//
    232                                               	    else if (substate==configurationIdle || substate==recoveryIdle)
    233                                                          begin
    234             1                         28                     if(gen == 3'd1)     comparatorsCount = 64/GEN1_PIPEWIDTH;
    235             1                          8                     else if(gen == 3'd5)comparatorsCount = 64/GEN5_PIPEWIDTH;
    236             1                         36                     timeToWait = t2ms;
    237             1                         36                     nextState = counting;
    238             1                         36                     startTimer = 1'b1;
    239             1                         36                     enableTimer = 1'b1;
    240                                              		
    241                                                          end
    242                                              
    243                                                      else if ((substate == L0 && DEVICETYPE) || substate==recoverySpeed || substate==recoverySpeedeieos) 
    244                                                          begin
    245             1                         50                     comparatorsCount=5'd1;
    246             1                         50                     timeToWait = t48ms;
    247             1                         50                     nextState = counting;
    248             1                         50                     startTimer = 1'b1;
    249             1                         50                     enableTimer = 1'b1;
    250                                              			end
    251                                              		
    252                                                     end
    253                                                      
    254                                                     else 
    255                                                      begin
    256             1                       6003                 comparatorsCount=5'd0;
    257             1                       6003                 timeToWait = t0ms;
    258             1                       6003                 enableTimer = 1'b0;
    259             1                       6003                 startTimer = 1'b0;
    260             1                       6003                 resetTimer = 1'b0;
    261             1                       6003                 resetOsCheckers = 16'b0;
    262             1                       6003                 nextState = start;
    263                                                      end
    264                                              
    265                                                  end
    266                                                      
    267                                                       
    268                                                  counting:
    269                                                  begin
    270             1                      12007             enableTimer = 1'b1;
    271             1                      12007             resetTimer  = 1'b1;
    272             1                      12007             resetOsCheckers = {16{1'b1}};
    273             1                      12007             startTimer = 1'b0;
    274             1                      12007     	    finish = 1'b0;
    275                                                    //  timeOut=0;
    276                                                      if((!timeOut && (countersComparators >= comparatorsCondition)) || (substate == detectQuiet && rxElectricalIdle) || (substate == detectQuiet && timeOut)|| (substate == detectActive && timeOut)
    277                                                     || (substate == pollingActive && /*marwan*/(countersComparators >= comparatorsCondition) ) || (substate == pollingConfiguration &&  /*marwan*/(countersComparators >= comparatorsCondition) )|| (substate == configurationLinkWidthStart &&/*marwan*/ (countersComparators >= comparatorsCondition))
    278                                                     || (substate == configurationLinkWidthAccept && (countersComparators >= comparatorsCondition) ) || (substate == configurationComplete && (countersComparators >= comparatorsCondition))|| (substate == configurationLanenumAccept && timeOut) || (substate == configurationLanenumWait && (countersComparators >= comparatorsCondition))|| (substate == configurationIdle && (countersComparators >= comparatorsCondition)) ||(substate==recoverySpeed && (countersComparators >= comparatorsCondition))
    279                                                     || (substate == recoveryIdle && (countersComparators >= comparatorsCondition) ))
    280                                                      begin
    281                                                          //**marwan**//
    282                                                          if((substate==recoverySpeed && countersComparators >= comparatorsCondition) || substate==recoverySpeedeieos )begin
    283                                              
    284             1                         16                     nextState = success;
    285                                              
    286                                                          end
    287                                                          else if( ( ( (substate == configurationLanenumAccept) ||(substate == configurationLanenumWait) ) && (PAD_TS == 1) ))begin
    288                                              
    289             1                          2                     nextState = failed;
    290             1                          2                     enableTimer = 1'b0;
    291             1                          2                     resetTimer  = 1'b0;
    292             1                          2                     startTimer = 1'b0;
    293                                              
    294                                                          end
    295                                                          else begin
    296             1                      11626                     enableTimer = 1'b0;
    297             1                      11626                     resetTimer  = 1'b0;
    298             1                      11626                     startTimer = 1'b0;
    299             1                      11626                     nextState = success;
    300                                              
    301                                                          end
    302                                              
    303                                              
    304                                                          //**marwan**//
    305                                              
    306                                                
    307                                                               
    308                                                      end
    309                                                      else if(timeOut)
    310                                                          begin
    311             1                         30                 nextState = failed;
    312                                                          end	
    313             1                        333             else nextState = counting;
    314                                                  end
    315                                                  success:
    316                                                  begin
    317             1                          8             if(RcvrCfgToidle[0])exitTo = recoveryIdle;
    318             1                          6             else if(substate == phase1 && detailedRecoverySubstates[0])exitTo = recoveryRcvrLock;
    319             1                          6             else if(substate == recoveryIdle)exitTo = L0;
    320             1                         16             else if(substate==recoverySpeed)exitTo = recoverywait;
    321             1                    ***0***             else if(substate==recoverySpeedeieos && trainToGen<3'd3)exitTo=recoveryRcvrLock;
    322             1                         16             else if(substate==recoverySpeedeieos && trainToGen>=3'd3)exitTo=phase0;
    323             1                       6080             else exitTo = substate+1'b1;
    324                                              
    325                                                      //*************marwan********************//
    326                                                      if(substate==recoverySpeed || substate==recoverySpeedeieos )begin
    327                                              
    328             1                         32                 resetOsCheckers = 16'b0;
    329                                                          //enableTimer = 1'b0;
    330                                                          //resetTimer = 1'b0;
    331             1                         32                 startTimer = 0 ;
    332             1                         32                 finish = 1'b1;
    333             1                         32                 nextState = start;
    334                                              
    335                                                      end 
    336                                                     /* else if( ( ( (substate == configurationLanenumAccept) ||(substate == configurationLanenumWait) ) && (PAD_TS == 1) ))begin
    337                                              
    338                                                              nextState = failed;
    339                                                              enableTimer = 1'b0;
    340                                                              resetTimer  = 1'b0;
    341                                                              startTimer = 1'b0;
    342                                              
    343                                                      end*/
    344                                                      else begin
    345             1                       6100                 resetOsCheckers = 16'b0;
    346             1                       6100                 enableTimer = 1'b0;
    347             1                       6100                 resetTimer = 1'b0;
    348             1                       6100                 finish = 1'b1;
    349             1                       6100                 nextState = start;
    350                                                      end
    351                                              
    352                                                      //****************marwan**********//
    353                                              
    354                                              
    355                                                  end
    356                                                  failed:
    357                                                  begin
    358                                                      //lastState_next = substate;
    359             1                         37             resetOsCheckers = 16'b0;
    360             1                         37             enableTimer = 1'b0;
    361             1                         37             resetTimer = 1'b0;
    362             1                         37             finish = 1'b1;
    363                                                      //-------------marwan------------//
    364                                                      if((substate == phase1  ) || (substate == phase0  ))begin
    365                                              
    366             1                          2                 exitTo = recoverySpeed;
    367                                                      end
    368                                                      else begin
    369                                              
    370             1                         35                 exitTo = detectQuiet;
    371                                                          
    372                                              
    373                                                      end
    374                                                      //-------------marwan------------//
    375             1                         37             nextState = start;
    376                                                  end
    377                                                  default:
    378                                                  begin
    379             1                          1             nextState = start;
    380             1                          1             enableTimer = 1'b0;
    381             1                          1             resetTimer = 1'b0;
    382             1                          1             resetOsCheckers = 16'b0;
    383                                                  end
    384                                                  
    385                                              
    386                                              
    387                                                  endcase
    388                                                  end
    389                                                  
    390                                              
    391                                              
    392             1                         24     always@(*)
    393                                              begin
    394             1                    ***0***         if(numberOfDetectedLanes==5'd1)       comparatorsCondition = 16'd1;
    395             1                    ***0***         else if(numberOfDetectedLanes == 5'd2)comparatorsCondition = {{14{1'b0}},{2{1'b1}}};
    396             1                    ***0***         else if(numberOfDetectedLanes == 5'd4)comparatorsCondition = {{12{1'b0}},{4{1'b1}}};
    397             1                    ***0***         else if(numberOfDetectedLanes == 5'd8)comparatorsCondition = {{8{1'b0}},{8{1'b1}}};
    398             1                         12         else if(numberOfDetectedLanes == 5'd16)comparatorsCondition= {16{1'b1}};
    399             1                         12         else comparatorsCondition = 16'd0;
    400                                              end
    401                                              
    402                                              endmodule


=================================================================================
=== File: RTL/Master_Tx.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           36        34         2      94.4

================================Statement Details================================

Statement Coverage for file RTL/Master_Tx.v --

    1                                                module Master_Tx(input wire turnOff, input wire [1:0]syncHeader, input wire [5:0]PIPEWIDTH, input wire [31:0]masterData,input masterDataValid,input[4:0] TX_State,input wire [3:0]masterDataK, input [2:0]GEN,
    2                                                		output wire patternReset, output wire [1:0]LFSRSel, output wire [3:0]advance, output reg [3:0]scramblingEnable);
    3                                                
    4                                                		
    5                                                	localparam SKP = 28, COM = 188, SKPGEN3 = 8'hAA, EIEOS = 8'h00, TS1 = 8'h1E, TS2 = 8'h2D;
    6                                                	localparam os = 2'b00, osInside = 2'b01, data = 2'b10;
    7                                                	reg [1:0]state;
    8                                                	reg ptrnReset, ptrnResetGEN3, EIEOSFlag, dataFlag;
    9                                                	reg [3:0]write, writeGEN3;
    10                                               	
    11              1                    8217016     	always@*
    12                                               		if(turnOff)	//must be turned off by LTSSM to make sure that TS1&TS2 data doesn't get scrambled
    13                                               			begin
    14              1                    7996960     			ptrnReset = 1;
    15              1                    7996960     			write = 4'hF;
    16                                               			end
    17                                               		else
    18                                               			begin	
    19              1                     220056     			write = 4'hF;
    20              1                     220056     			ptrnReset = 0;
    21                                               		  if(  (masterData[7:0] == COM && masterDataK[0] )|| (masterData[15:8] == COM && masterDataK[1]) || (masterData[23:16] == COM && masterDataK[2]) || (masterData[31:24] == COM && masterDataK[3])  )
    22              1                    ***0***     				ptrnReset = 1;
    23                                               			if(masterData[7:0] == SKP)
    24              1                        317     				write[0] = 0; 
    25                                               			if(masterData[15:8] == SKP)
    26              1                        355     				write[1] = 0;
    27                                               			if(masterData[23:16] == SKP)
    28              1                        330     				write[2] = 0;
    29                                               			if(masterData[31:24] == SKP)
    30              1                        340     				write[3] = 0;
    31                                               			end
    32                                               			
    33              1                    8560192     	always@*
    34                                               		begin
    35                                               		if(syncHeader == 2'b10)
    36                                               			begin
    37              1                     755424     			state = os;
    38              1                     755424     			dataFlag = 0;
    39                                               			end
    40                                               		else if(syncHeader == 2'b01)
    41                                               			begin
    42              1                     106624     			state = data;
    43              1                     106624     			dataFlag = 1;
    44                                               			end
    45                                               		else
    46                                               			begin
    47              1                    7698144     			dataFlag = dataFlag;
    48              1                    7698144     			state = (dataFlag)? data:osInside;
    49                                               			end
    50                                               			
    51                                               		case(state)
    52                                               			os: 
    53                                               				begin
    54              1                     755424     				writeGEN3 = 4'hF;
    55              1                     755424     				ptrnResetGEN3 = 0;
    56              1                     755424     				scramblingEnable = 0;
    57              1                     755424     				EIEOSFlag = 0;
    58                                               				if (masterData[7:0]==TS1 || masterData[15:8]==TS1 || masterData[23:16]==TS1 || masterData[31:24]==TS1)
    59              1                     646240     					scramblingEnable = ~{masterData[31:24]==TS1, masterData[23:16]==TS1, masterData[15:8]==TS1, masterData[7:0]==TS1};
    60                                               				else if (masterData[7:0]==TS2 || masterData[15:8]==TS2 || masterData[23:16]==TS2 || masterData[31:24]==TS2)
    61              1                       1216     					scramblingEnable = ~{masterData[31:24]==TS2, masterData[23:16]==TS2, masterData[15:8]==TS2, masterData[7:0]==TS2};
    62                                               				else if(masterData[31:0]==0 &&masterDataValid&& TX_State ==5'd18)
    63              1                     107136     				   scramblingEnable =4'hF;
    64                                               				else if(masterData[7:0] == EIEOS || ((masterData[15:8] == EIEOS)&&PIPEWIDTH>=16) || ((masterData[23:16] == EIEOS || masterData[31:24] == EIEOS)&&PIPEWIDTH==32))
    65              1                        544     					EIEOSFlag = 1;
    66                                               				else if(masterData[7:0] == SKPGEN3)
    67              1                    ***0***     					writeGEN3 = ~{masterData[31:24]==SKPGEN3, masterData[23:16]==SKPGEN3, masterData[15:8]==SKPGEN3, masterData[7:0]==SKPGEN3};
    68                                               				end
    69                                               			osInside:
    70                                               				begin
    71              1                    2951344     				ptrnResetGEN3 = (EIEOSFlag && TX_State!=5'b01010)? 1:0;  // Youssef ..old line >>>ptrnResetGEN3 = (EIEOSFlag)? 1:0;
    72              1                    2951344     				writeGEN3 = (writeGEN3 == 4'hF)? writeGEN3 : 4'b0;
    73              1                    2951344     				scramblingEnable = (scramblingEnable == 0)? 0 : 4'hF;
    74                                               				end
    75                                               			data: 
    76                                               				begin
    77              1                    4708080     				EIEOSFlag = 0;
    78              1                    4708080     				ptrnResetGEN3 = 0;
    79              1                    4708080     				writeGEN3 = 4'hF;
    80              1                    4708080     				scramblingEnable = 4'b1111;
    81                                               				end
    82                                               		endcase
    83                                               		end
    84                                               
    85              1                         64     	assign LFSRSel = (PIPEWIDTH == 8)?	0 : 
    86                                               					 (PIPEWIDTH == 16)?	1 : 2;
    87              1                       2957     	assign advance = (GEN < 3)? write:writeGEN3;
    88              1                       2304     	assign patternReset = (GEN < 3)? ptrnReset : ptrnResetGEN3;
    89                                               
    90                                               endmodule


=================================================================================
=== File: RTL/Modules Integration.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           17        17         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/Modules Integration.v --

    1                                                module RX #(parameter GEN1_PIPEWIDTH = 8, parameter GEN2_PIPEWIDTH = 16, parameter GEN3_PIPEWIDTH = 32, parameter GEN4_PIPEWIDTH = 8,
    2                                                parameter GEN5_PIPEWIDTH = 8,parameter DEVICETYPE = 0,parameter Width =32)
    3                                                
    4                                                (input reset, 
    5                                                input clk, 
    6                                                input [2:0]GEN, 
    7                                                input [15:0]PhyStatus, 
    8                                                input [15:0]RxValid,
    9                                                input [15:0]RxStartBlock, 
    10                                               input [47:0]RxStatus,
    11                                               input [31:0]RxSyncHeader, 
    12                                               input [15:0]RxElectricalIdle,
    13                                               input [511:0]RxData, 
    14                                               input [63:0]RxDataK,
    15                                               input [4:0]numberOfDetectedLanes,
    16                                               input [4:0]substate,
    17                                               input linkup,
    18                                               input [7:0]linkNumber,
    19                                               output [63:0]pl_tlpstart, 
    20                                               output [63:0]pl_dllpstart, 
    21                                               output [63:0]pl_tlpend,
    22                                               output [63:0]pl_dllpend, 
    23                                               output [63:0]pl_tlpedb, 
    24                                               output[63:0]pl_valid, 
    25                                               output [511:0]pl_data,
    26                                               output [2:0]pl_speedmode, 
    27                                               output [7:0] rateid,
    28                                               output [7:0] linkNumberOut,
    29                                               output upConfigureCapability,
    30                                               output finish,
    31                                               output [4:0]exitTo,
    32                                               output witeUpconfigureCapability,
    33                                               output writerateid,
    34                                               output writeLinkNumber,
    35                                               output [3*16-1:0] ReceiverpresetHintDSPout,
    36                                               output [4*16-1:0] TransmitterPresetHintDSPout,
    37                                               output [3*16-1:0] ReceiverpresetHintUSPout,
    38                                               output [4*16-1:0] TransmitterPresetHintUSPout,
    39                                               input  [3*16-1:0] ReceiverpresetHintDSP,
    40                                               input  [4*16-1:0] TransmitterPresetHintDSP,
    41                                               input  [3*16-1:0] ReceiverpresetHintUSP,
    42                                               input  [4*16-1:0] TransmitterPresetHintUSP,
    43                                               output writeReceiverpresetHintUSP,
    44                                               output writeTransmitterPresetHintUSP,
    45                                               output writeReceiverpresetHintDSP,
    46                                               output writeTransmitterPresetHintDSP,
    47                                               output [16*6-1:0]LFDSP,
    48                                               output [16*6-1:0]FSDSP,
    49                                               input  [6*16-1:0]CursorCoff,
    50                                               input  [6*16-1:0]PreCursorCoff,
    51                                               input  [6*16-1:0]PostCursorCoff,
    52                                               input directed_speed_change,
    53                                               input [2:0] trainToGen,
    54                                               input disableScrambler);
    55                                               	
    56                                               wire [5:0]PIPEWIDTH;
    57                                               wire [511:0]PIPEData, descramblerData, LMCData;
    58                                               wire [63:0]PIPEDataK, descramblerDataK, LMCDataK;
    59                                               wire [15:0]PIPEDataValid, descramblerDataValid;
    60                                               wire LMCValid;
    61                                               wire [31:0]PIPESyncHeader, descramblerSyncHeader, LMCSyncHeader;
    62                                               wire [2047:0] orderedSets;
    63                                               wire [15:0]rxElectricalIdle;
    64                                               wire validOrderedSets;
    65                                               wire [3:0]lpifStatus;	
    66                                               wire [511:0]Data_out;
    67                                               wire w;
    68                                               wire [63:0]valid     ;
    69                                               wire [63:0]dlpstart  ;
    70                                               wire [63:0]dlpend,dllpend_h    ;
    71                                               wire [63:0]tlpstart,tlpstart_h  ;
    72                                               wire [63:0]tlpedb    ;
    73                                               wire [63:0]tlpend,tlpend_h    ;
    74                                               wire OS_detection    ;
    75                                               wire pass_it         ;
    76                                               
    77              1                          2     reg[2:0] C=0;
    78              1                          2     reg disableScrambler_d=1;
    79                                               wire pass_it_x ;
    80              1                     575937     assign OS_detection =  ( RxData[31:24]==8'hBC )    ;//Youssef
    81                                               
    82                                               
    83                                               	
    84                                               	//=== seed values for Gen 3 descrambler ===
    85              1                          2     	reg [191:0]seedValue = {24'h1bb807, 24'h0277ce, 24'h19cfc9, 24'h010f12, 24'h18c0db, 24'h1ec760, 24'h0607bb, 24'h1dbfbc};
    86                                                 
    87                                               
    88                                               
    89                                               Descrambler_contr descrambler_contr (.OS_detection(OS_detection),.clk(clk),.reset(reset),.GEN(GEN),.PIPEWIDTH(PIPEWIDTH),.pass_it(pass_it) );
    90                                               
    91                                               	
    92                                               	genvar i;
    93                                               	
    94                                               	generate
    95                                               		for(i=0; i<16; i=i+1)
    96                                               			begin
    97                                               			localparam integer j = i*2;
    98                                               			localparam integer k = i*3;
    99                                               			localparam integer l = i*4;
    100                                              			localparam integer m = i*32;
    101                                              			localparam integer s = (i%8)*24;
    102                                              			PIPE_Rx_Data #(.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH), .GEN2_PIPEWIDTH(GEN2_PIPEWIDTH), .GEN3_PIPEWIDTH(GEN3_PIPEWIDTH), .GEN4_PIPEWIDTH(GEN4_PIPEWIDTH),
    103                                              						.GEN5_PIPEWIDTH(GEN5_PIPEWIDTH)) 
    104                                              						PIPE(.reset(reset), .clk(clk), .GEN(GEN), .RxValid(RxValid[i]), .RxStatus(RxStatus[k+:3]), .PhyStatus(PhyStatus[i]),.RxElectricalIdle(RxElectricalIdle[i]),
    105                                              							.RxData(RxData[m+:32]), .RxDataK(RxDataK[l+:4]), .RxStartBlock(RxStartBlock[i]), .RxSyncHeader(RxSyncHeader[j+:2]), .PIPEWIDTH(PIPEWIDTH),
    106                                              							.PIPESyncHeader(PIPESyncHeader[j+:2]), .PIPEDataValid(PIPEDataValid[i]), .PIPEData(PIPEData[m+:32]), .PIPEDataK(PIPEDataK[l+:4]),.PIPEElectricalIdle(rxElectricalIdle[i]));
    107                                              							
    108                                              			Descrambler descrambler(.clk(clk), .reset(reset), .turnOff((!DEVICETYPE ? disableScrambler_d : disableScrambler) || OS_detection || pass_it || pass_it_x), .PIPEDataValid(PIPEDataValid[i]), .PIPEWIDTH(PIPEWIDTH),.State(substate), 
    109                                              								.PIPESyncHeader(PIPESyncHeader[j+:2]), .seedValue(seedValue[s+:24]), .PIPEData(PIPEData[m+:32]), .PIPEDataK(PIPEDataK[l+:4]), .GEN(GEN),
    110                                              								.descramblerDataValid(descramblerDataValid[i]), .descramblerData(descramblerData[m+:32]), .descramblerDataK(descramblerDataK[l+:4]), 
    111                                              								.descramblerSyncHeader(descramblerSyncHeader[j+:2]));	
    112                                              			end
    113                                              	endgenerate
    114                                              	
    115                                              	LMC_RX #(.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH), .GEN2_PIPEWIDTH(GEN2_PIPEWIDTH), .GEN3_PIPEWIDTH(GEN3_PIPEWIDTH), .GEN4_PIPEWIDTH(GEN4_PIPEWIDTH), .GEN5_PIPEWIDTH(GEN5_PIPEWIDTH))  
    116                                              		lmc (.clk(clk), .reset(reset), .GEN(GEN), .descramblerSyncHeader(descramblerSyncHeader), .descramblerDataValid(descramblerDataValid),
    117                                              			.LANESNUMBER(numberOfDetectedLanes), .LMCIn(descramblerData), .descramblerDataK(descramblerDataK), .LMCValid(LMCValid), .LMCSyncHeader(LMCSyncHeader), .LMCDataK(LMCDataK),.LMCData(LMCData));									
    118                                              	
    119                                              	osDecoder#(.Width(32),.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH), .GEN2_PIPEWIDTH(GEN2_PIPEWIDTH), .GEN3_PIPEWIDTH(GEN3_PIPEWIDTH), .GEN4_PIPEWIDTH(GEN4_PIPEWIDTH), .GEN5_PIPEWIDTH(GEN5_PIPEWIDTH))
    120                                              	 os(
    121                                              	clk,
    122                                              	GEN,
    123                                              	reset,
    124                                              	numberOfDetectedLanes,
    125                                              	LMCData,
    126                                              	LMCValid,
    127                                              	linkup,
    128                                              	substate,
    129                                              	LMCSyncHeader,
    130                                              	validOrderedSets,
    131                                              	orderedSets);
    132                                              	
    133                                              	RxLTSSM #(.DEVICETYPE(DEVICETYPE),.Width(Width),.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH), .GEN2_PIPEWIDTH(GEN2_PIPEWIDTH), .GEN3_PIPEWIDTH(GEN3_PIPEWIDTH), .GEN4_PIPEWIDTH(GEN4_PIPEWIDTH), .GEN5_PIPEWIDTH(GEN5_PIPEWIDTH)) rxltssm(
    134                                              	GEN,
    135                                              	clk,
    136                                              	reset,
    137                                              	orderedSets,
    138                                              	numberOfDetectedLanes,
    139                                              	substate,
    140                                              	linkNumber,
    141                                              	directed_speed_change,
    142                                              	trainToGen,
    143                                              	rxElectricalIdle[0],
    144                                              	validOrderedSets,
    145                                              	rateid,
    146                                              	linkNumberOut,
    147                                              	upConfigureCapability,
    148                                              	finish,
    149                                              	exitTo,
    150                                              	witeUpconfigureCapability,
    151                                              	writerateid,
    152                                              	writeLinkNumber,
    153                                              	lpifStatus,
    154                                              	ReceiverpresetHintDSPout,
    155                                              	TransmitterPresetHintDSPout,
    156                                              	ReceiverpresetHintUSPout,
    157                                              	TransmitterPresetHintUSPout,
    158                                              	ReceiverpresetHintDSP,
    159                                              	TransmitterPresetHintDSP,
    160                                              	ReceiverpresetHintUSP,
    161                                              	TransmitterPresetHintUSP,
    162                                              	writeReceiverpresetHintDSP,
    163                                               	writeTransmitterPresetHintDSP,
    164                                              	writeReceiverpresetHintUSP,
    165                                              	writeTransmitterPresetHintUSP,
    166                                              	LFDSP,
    167                                              	FSDSP,
    168                                              	CursorCoff,
    169                                                  PreCursorCoff,
    170                                                  PostCursorCoff
    171                                              	);
    172                                              
    173                                              
    174                                              packet_identifier#(.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH), .GEN2_PIPEWIDTH(GEN2_PIPEWIDTH), .GEN3_PIPEWIDTH(GEN3_PIPEWIDTH), .GEN4_PIPEWIDTH(GEN4_PIPEWIDTH), .GEN5_PIPEWIDTH(GEN5_PIPEWIDTH))
    175                                                  packet_identifier(   
    176                                                  .data_in(LMCData),
    177                                                  .valid_pd(LMCValid),
    178                                                  .gen(GEN),
    179                                                  .linkup(linkup),
    180                                                  .DK(LMCDataK),
    181                                              	.syncHeader(LMCSyncHeader),// gen3
    182                                                  .numberOfDetectedLanes(numberOfDetectedLanes),
    183                                                  .data_out(Data_out),
    184                                                  .pl_valid   (valid),
    185                                                  .pl_dlpstart(dlpstart),
    186                                                  .pl_dlpend  (dlpend),
    187                                                  .pl_tlpstart(tlpstart),
    188                                                  .pl_tlpedb  (tlpedb),
    189                                                  .pl_tlpend  (tlpend), 
    190                                              	.clk(clk),
    191                                              	.rst(reset),
    192                                                  .w(w)  
    193                                              );
    194                                              LPIF_RX_Control_DataFlow lpif(.clk(clk),  .reset(reset), .tlpstart(tlpstart), .dllpstart(dlpstart), .tlpend(tlpend), .dllpend(dlpend), .edb(tlpedb), 
    195                                              			      .packetValid(valid), .packetData(Data_out)/*, .lp_force_detect(lp_force_detect)*/, .GEN(GEN), /*.state(lpifStatus),*/ 
    196                                              			      .pl_tlpstart(tlpstart_h), .pl_dllpstart(pl_dllpstart), .pl_tlpend(tlpend_h), .pl_dllpend(dllpend_h), 
    197                                              			      .pl_tlpedb(pl_tlpedb), .pl_valid(pl_valid), .pl_data(pl_data), .pl_speedmode(pl_speedmode)/*, .pl_state_sts(pl_state_sts),.ltssmForceDetect(forceDetect)*/);
    198                                              
    199                                              
    200                                              reg start_corr;
    201                                              
    202             1                      13701     always@(posedge clk)begin
    203                                                
    204                                                if(!reset)
    205             1                          8         start_corr<=0;
    206                                                
    207                                                if(tlpstart_h>pl_valid)
    208             1                        691         start_corr<=1;
    209                                               
    210                                              else if(pl_valid!=0)
    211             1                       6304         start_corr<=0;
    212                                                
    213                                              end
    214                                              
    215                                              
    216             1                       9905     assign pl_dllpend = dllpend_h<<1;
    217             1                      11136     assign pl_tlpend = tlpend_h <<1;
    218             1                      26000     assign pl_tlpstart = ((pl_tlpend!=0 && tlpstart_h==0 &&pl_dllpstart==0)||start_corr) ? tlpstart_h+1 : tlpstart_h;
    219             1                     595289     assign pass_it_x = ( (substate == 9) && (PIPEData == 0) /*&& DEVICETYPE */) ? 1 : 0 ;
    220                                              
    221             1                        477     always@(posedge clk)begin
    222                                                
    223                                                if(!disableScrambler && C<3 && substate == 9) begin
    224             1                         42                        C<=C+1;
    225                                                                 if(C==1)
    226             1                         14                          disableScrambler_d<=0;
    227                                                                   
    228                                                                 end
    229                                                                 
    230                                                 if((!reset) || (substate == 1))begin
    231             1                         69     		disableScrambler_d<=1;
    232             1                         69     		C<=0;
    233                                                 end  
    234                                              
    235                                                           
    236                                              end
    237                                              
    238                                              endmodule
    239                                              
    240                                              
    241                                              


=================================================================================
=== File: RTL/OS_Checker.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          242       214        28      88.4

================================Statement Details================================

Statement Coverage for file RTL/OS_Checker.v --

    1                                                module osChecker #(parameter DEVICETYPE = 0,parameter GEN1_PIPEWIDTH = 8,
    2                                                 parameter GEN2_PIPEWIDTH = 8, parameter GEN3_PIPEWIDTH = 8, parameter GEN4_PIPEWIDTH = 8,parameter GEN5_PIPEWIDTH = 8)
    3                                                 (
    4                                                    input clk,
    5                                                    input [7:0]linkNumber,
    6                                                    input [7:0]laneNumber,
    7                                                    input [127:0]orderedset,
    8                                                    input valid,
    9                                                    input [4:0]substate,
    10                                                   input reset,
    11                                                   input directed_speed_change,
    12                                                   input [2:0]gen,trainToGen,
    13                                                   output reg countup,
    14                                                   output reg resetcounter,
    15                                                   output [7:0] rateid,
    16                                                   output [7:0] linkNumberOut,
    17                                                   output upconfigure_capability,
    18                                                   output reg RcvrCfgToidle,
    19                                                   output reg[5:0]LFDSP,
    20                                                   output reg[5:0]FSDSP,
    21                                                   output reg [2:0] ReceiverpresetHintDSPout,
    22                                                   output reg [3:0] TransmitterPresetHintDSPout,
    23                                                   output reg [2:0] ReceiverpresetHintUSPout,
    24                                                   output reg [3:0] TransmitterPresetHintUSPout,
    25                                                   output reg detailedRecoverySubstates,
    26                                                   input [2:0] ReceiverpresetHintDSP,
    27                                                   input [3:0] TransmitterPresetHintDSP,
    28                                                   input [2:0] ReceiverpresetHintUSP,
    29                                                   input [3:0] TransmitterPresetHintUSP,
    30                                                   input [5:0]CursorCoff,
    31                                                   input [5:0]PreCursorCoff,
    32                                                   input [5:0]PostCursorCoff,
    33                                                   output reg PAD_TS);
    34                                               
    35                                               
    36                                                   //LOCLA VARIABLES
    37                                               
    38              1                         32         reg[1:0]PAD_TS1_down=0,PAD_TS1_up=0;
    38              2                         32     
    39                                                   reg[5:0] currentState,nextState;
    40                                                   reg[127:0] localorderedset;
    41                                                   reg notEqual;
    42                                                   reg [7:0]linkNumberReg;
    43                                                   wire ts1CorrectStart,ts2CorrectStart;
    44                                                   localparam [7:0]
    45                                                   PAD = 8'hF7, 
    46                                                   TS1 = 8'h4A,
    47                                                   TS2 = 8'h45,
    48                                                   COM = 	8'hBC, //BC
    49                                                   gen3TS1 = 8'h1E,
    50                                                   gen3TS2 = 8'h2D,
    51                                                   gen3eios = 8'h66,
    52                                                   idle = 8'h7c,
    53                                                   gen1eieos = 8'hC4;
    54                                               
    55                                               //input substates from main ltssm
    56                                               
    57                                                       localparam [4:0]
    58                                               	    detectQuiet =  5'd0,
    59                                                       detectActive = 5'd1,
    60                                                       pollingActive= 5'd2,
    61                                                       pollingConfiguration= 5'd3,
    62                                                       configurationLinkWidthStart = 5'd4,
    63                                                       configurationLinkWidthAccept = 5'd5,
    64                                                       configurationLanenumWait = 5'd6,
    65                                                       configurationLanenumAccept = 5'd7,
    66                                                       configurationComplete = 5'd8,
    67                                                       configurationIdle = 5'd9,
    68                                                       L0 = 5'd10,
    69                                                       recoveryRcvrLock = 5'd11,
    70                                                       recoveryRcvrCfg = 5'd12,
    71                                                       recoverySpeed = 5'd13,
    72                                                       phase0 = 5'd14,
    73                                                       phase1 = 5'd15,
    74                                                       phase2 = 5'd16,
    75                                                       phase3 =5'd17,
    76                                                       recoveryIdle = 5'd18,
    77                                                       recoverySpeedeieos = 5'd19,
    78                                                       recoverywait = 5'd20;
    79                                               
    80                                               //internal states
    81                                                   localparam [5:0]
    82                                                       start = 6'd0,
    83                                                       pollingActive1= 6'd1,
    84                                                       pollingActive2= 6'd2,
    85                                                       pollingConfiguration1= 6'd3,
    86                                                       pollingConfiguration2= 6'd4,
    87                                                       configLinkWidthStartDown1 = 6'd5,
    88                                                       configLinkWidthStartDown2 = 6'd6,
    89                                                       configLinkWidthStartUp1 = 6'd7,
    90                                                       configLinkWidthStartUp2 = 6'd8,
    91                                                       configLinkWidthAcceptUp1 = 6'd9,
    92                                                       configLinkWidthAcceptUp2 = 6'd10,
    93                                                       configLanenumWaitDown1 = 6'd11,
    94                                                       configLanenumWaitDown2 = 6'd12,
    95                                                       configLanenumWaitUp1 = 6'd13,
    96                                                       configLanenumWaitUp2 = 6'd14,
    97                                                       configLanenumAcceptDown1 = 6'd15,
    98                                                       configLanenumAcceptDown2 = 6'd16,
    99                                                       configLanenumAcceptUp1 = 6'd17,
    100                                                      configLanenumAcceptUp2 = 6'd18,
    101                                                      configCompleteDown1 = 6'd19,
    102                                                      configCompleteDown2 = 6'd20,
    103                                                      configCompleteUp1 = 6'd21,
    104                                                      configCompleteUp2 = 6'd22,
    105                                                      configIdle1 = 6'd23,
    106                                                      configIdle2 = 6'd24,
    107                                                      /*****recovery lock****/
    108                                                      RcvrLock1    = 6'd25,
    109                                                      RcvrLock2 = 6'd26,
    110                                                      /*****recovery configuration****/
    111                                                      RcvrCfg = 6'd27,
    112                                                      RcvrCfg_speed = 6'd28,
    113                                                      RcvrCfg_idle = 6'd29,
    114                                                      /*********eq***********************/
    115                                                      phase0up1 = 6'd30,
    116                                                      phase0up2 = 6'd31,
    117                                                      phase0down1 = 6'd32,
    118                                                      phase0down2 = 6'd33,
    119                                              
    120                                                      phase1up1 = 6'd34,
    121                                                      phase1up2 = 6'd35,
    122                                                      phase1down1 = 6'd36,
    123                                                      phase1down2 = 6'd37,
    124                                                      /***********speed******************/
    125                                                      RcvrSpeed1 = 6'd38,
    126                                                      RcvrSpeed2 = 6'd39,
    127                                                      RcvrIdle1 = 6'd40,
    128                                                      RcvrIdle2 = 6'd41,
    129                                                      L0up1 = 6'd42,
    130                                                      L0up2 = 6'd43,
    131                                                      RcvrSpeedeieos1 = 6'd45,
    132                                                      RcvrSpeedeieos2 = 6'd46;
    133                                              
    134                                              
    135                                              reg [7:0]symbol6OfTS2;
    136                                              reg [7:0]rateidTs2;
    137                                              
    138                                              
    139                                              
    140                                              
    141                                              //CURRENT STATE FF
    142             1                    3644554     always @(posedge clk or negedge reset)
    143                                              begin
    144             1                    3644554         notEqual <= 1'b0;
    145                                                  if(!reset)
    146                                                  begin
    147             1                    1060408             currentState <= start;
    148                                                  end
    149                                                  else
    150                                                  begin
    151             1                    2584146             currentState <= nextState;
    152                                                      if(valid)
    153                                                      begin
    154             1                    1221552                 localorderedset<=orderedset;
    155                                                          if((currentState == configCompleteDown2||currentState == configCompleteUp2)&&(localorderedset[42] != orderedset[42] || localorderedset[39:32] != orderedset[39:32]))
    156             1                          E                 notEqual <= 1'b1;
    157                                                      end
    158                                                  end    
    159                                              end
    160                                              
    161                                              //next state logic block
    162             1                    4171678     always @(*)
    163                                              begin
    164                                                  case(currentState)
    165                                                      start:
    166                                                      begin
    167             1                     884057                 PAD_TS=0;
    168             1                     884057                 PAD_TS1_up=0;
    169             1                     884057                 PAD_TS1_down=0;
    170             1                     884057                 resetcounter = 1'b0; countup = 1'b0;
    170             2                     884057     
    171             1                     845600                 if      (substate == pollingActive) nextState = pollingActive1;
    172             1                       6848                 else if (substate == pollingConfiguration) nextState = pollingConfiguration1;
    173             1                        384                 else if (substate == configurationLinkWidthStart && DEVICETYPE == 1'b0)nextState = configLinkWidthStartDown1;
    174             1                      E-hit                 else if (substate == configurationLinkWidthStart && DEVICETYPE == 1'b1)nextState = configLinkWidthStartUp1;
    175             1                      E-hit                 else if (substate == configurationLinkWidthAccept && DEVICETYPE == 1'b1)nextState = configLinkWidthAcceptUp1;
    176                                                         // else if (substate == configurationLinkWidthAccept && DEVICETYPE == 1'b0)nextState = configLinkWidthAcceptUp1;//*marwan //
    177             1                        352                 else if (substate == configurationLanenumWait && DEVICETYPE == 1'b0) nextState = configLanenumWaitDown1;
    178             1                      E-hit                 else if (substate == configurationLanenumWait && DEVICETYPE == 1'b1) nextState = configLanenumWaitUp1;
    179             1                        320                 else if (substate == configurationLanenumAccept && DEVICETYPE == 1'b0) nextState = configLanenumAcceptDown1;
    180             1                      E-hit                 else if (substate == configurationLanenumAccept && DEVICETYPE == 1'b1) nextState = configLanenumAcceptUp1;
    181             1                       2304                 else if (substate == configurationComplete && DEVICETYPE == 1'b0) nextState = configCompleteDown1;
    182             1                      E-hit                 else if (substate == configurationComplete && DEVICETYPE == 1'b1) nextState = configCompleteUp1;
    183             1                       5392                 else if (substate == configurationIdle) nextState = configIdle1;
    184             1                      E-hit                 else if (substate == L0 && DEVICETYPE == 1'b1) nextState = L0up1;     //youssef         
    185             1                        608                 else if (substate == recoveryRcvrLock) nextState = RcvrLock1;
    186             1                       7040                 else if (substate == recoveryRcvrCfg) nextState = RcvrCfg;
    187             1                        384                 else if (substate == recoverySpeed) nextState = RcvrSpeed1;
    188             1                      E-hit                 else if (substate == phase0 && DEVICETYPE) nextState = phase0up1;
    189             1                        144                 else if (substate == phase0 && !DEVICETYPE)nextState = phase0down1;
    190             1                      E-hit                 else if (substate == phase1 && DEVICETYPE) nextState = phase1up1;
    191             1                         64                 else if (substate == phase1 && !DEVICETYPE)nextState = phase1down1;
    192             1                       2272                 else if (substate == recoveryIdle)nextState = RcvrIdle1;
    193             1                        256                 else if (substate == recoverySpeedeieos)nextState = RcvrSpeedeieos1;
    194                                              
    195             1                       7737                 else nextState = start;
    196                                                      end
    197                                              /******************************polling Active**************************************************/
    198                                                    //Abd-elrahman    
    199                                              
    200                                              	pollingActive1:
    201                                                          begin
    202             1                     145936                 resetcounter = 1'b0; countup = 1'b0;
    202             2                     145936     
    203                                                          if(valid &&ts1CorrectStart&& orderedset[15:8]==PAD && orderedset[23:16]==PAD && orderedset[87:80] == TS1)
    204                                                          begin
    205             1                      16384                     nextState = pollingActive2;
    206             1                      16384                     resetcounter = 1'b1; countup = 1'b1;
    206             2                      16384     
    207                                                          end
    208             1                     129552                 else nextState = pollingActive1;
    209                                                      end
    210                                              
    211                                                      pollingActive2:
    212                                                      begin
    213             1                      54144                 resetcounter = 1'b1; countup = 1'b0;
    213             2                      54144     
    214                                                          if(valid)
    215                                                          begin
    216                                                              if(ts1CorrectStart&&orderedset[15:8]==PAD && orderedset[23:16]==PAD && orderedset[87:80] == TS1)
    217                                                              begin
    218             1                       2912                         countup = 1'b1; 
    219             1                       2912                         nextState = pollingActive2;
    220                                                              end
    221             1                      15968                     else nextState = pollingActive1;        
    222                                                          end
    223             1                      35264                 else nextState = pollingActive2;
    224                                                      end
    225                                                   //Abd-elrahman 
    226                                                      /**********************************pollingConfiguration*****************************************************/
    227                                                      pollingConfiguration1:
    228                                                      begin
    229             1                     290656                 resetcounter = 1'b0; countup = 1'b0;
    229             2                     290656     
    230                                                          if(valid &&ts2CorrectStart&& orderedset[15:8]==PAD && orderedset[23:16]==PAD && orderedset[87:80] == TS2)
    231                                                          begin
    232             1                      32352                     nextState = pollingConfiguration2;
    233             1                      32352                     resetcounter = 1'b1; countup = 1'b1;
    233             2                      32352     
    234                                                          end
    235             1                     258304                 else nextState = pollingConfiguration1;
    236                                                      end
    237                                              
    238                                                      pollingConfiguration2:
    239                                                      begin
    240             1                     101664                 resetcounter = 1'b1; countup = 1'b0;
    240             2                     101664     
    241                                                          if(valid)
    242                                                          begin
    243                                                              if(ts2CorrectStart&&orderedset[15:8]==PAD && orderedset[23:16]==PAD && orderedset[87:80] == TS2)
    244                                                              begin
    245             1                       2688                         countup = 1'b1; 
    246             1                       2688                         nextState = pollingConfiguration2;
    247                                                              end
    248             1                      31968                     else nextState = pollingConfiguration1;        
    249                                                          end
    250             1                      67008                 else nextState = pollingConfiguration2;
    251                                                      end
    252                                                      /**********************************configLinkWidthStart*************************************************/
    253                                                      configLinkWidthStartDown1:
    254                                                      begin
    255             1                      74528                 resetcounter = 1'b0; countup = 1'b0;
    255             2                      74528     
    256                                                          if(valid&&ts1CorrectStart&&orderedset[15:8]==linkNumber && orderedset[23:16]==PAD && orderedset[87:80] == TS1)
    257                                                          begin
    258             1                        176                     nextState =  configLinkWidthStartDown2;
    259             1                        176                     resetcounter = 1'b1; countup = 1'b1;
    259             2                        176     
    260                                                          end
    261             1                      74352                 else nextState = configLinkWidthStartDown1;
    262                                                      end
    263                                              
    264                                                      configLinkWidthStartDown2:
    265                                                      begin
    266             1                        176                 resetcounter = 1'b1; countup = 1'b0;
    266             2                        176     
    267                                                          if(valid)
    268                                                              begin
    269                                                                  if(ts1CorrectStart&&orderedset[15:8]==linkNumber && orderedset[23:16]==PAD && orderedset[87:80] == TS1)
    270                                                                  begin
    271             1                    ***0***                             countup = 1'b1;
    272             1                    ***0***                             nextState =  configLinkWidthStartDown2;
    273                                                                        //nextState =  configLinkWidthAcceptUp1 ;
    274                                                                  end
    275             1                    ***0***                         else nextState =  configLinkWidthStartDown1;
    276                                                              end
    277             1                        176                 else nextState =  configLinkWidthStartDown2;
    278                                                      end
    279                                                      configLinkWidthStartUp1:
    280                                                      begin
    281             1                      E-hit                 resetcounter = 1'b0; countup = 1'b0;
    281             2                      E-hit     
    282                                                          if(valid &&ts1CorrectStart&&orderedset[15:8]!=PAD && orderedset[23:16]==PAD && orderedset[87:80] == TS1)
    283                                                          begin
    284             1                      E-hit                     nextState =  configLinkWidthStartUp2;
    285             1                      E-hit                     linkNumberReg = orderedset[15:8];
    286             1                      E-hit                     resetcounter = 1'b1; countup = 1'b1;
    286             2                      E-hit     
    287                                                          end
    288             1                      E-hit                     else nextState = configLinkWidthStartUp1;
    289                                                      end
    290                                              
    291                                                      configLinkWidthStartUp2:
    292                                                      begin
    293             1                      E-hit                 resetcounter = 1'b1; countup = 1'b0;
    293             2                      E-hit     
    294                                                          if(valid)
    295                                                              begin
    296                                                                  if(ts1CorrectStart&&orderedset[15:8]==linkNumberReg && orderedset[23:16]==PAD && orderedset[87:80] == TS1)
    297                                                                  begin
    298             1                          E                             countup =1'b1;
    299             1                          E                             nextState =  configLinkWidthStartUp2;
    300                                                                  end
    301             1                          E                         else nextState =  configLinkWidthStartUp1;
    302                                                              end
    303             1                      E-hit                 else nextState =  configLinkWidthStartUp2;
    304                                                      end
    305                                                      /********************************configLinkWidthAccept**************************************************/
    306                                                          configLinkWidthAcceptUp1:
    307                                                      begin
    308             1                      E-hit                 resetcounter = 1'b0; countup = 1'b0;
    308             2                      E-hit     
    309                                                          if(valid &&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]!=PAD  && orderedset[87:80] == TS1)
    310                                                          begin
    311                                                              if(!DEVICETYPE)
    312             1                          E                         nextState = configLanenumWaitDown1;
    313                                                              else
    314             1                        176                         nextState = configLinkWidthAcceptUp2;
    315                                              
    316                                              
    317             1                      E-hit                     resetcounter = 1'b1; countup = 1'b1;
    317             2                      E-hit     
    318                                                          end
    319             1                      E-hit                     else nextState = configLinkWidthAcceptUp1;
    320                                                      end
    321                                              
    322                                                      configLinkWidthAcceptUp2:
    323                                                      begin
    324             1                      E-hit                 resetcounter = 1'b1; countup = 1'b0;
    324             2                      E-hit     
    325                                                          if(valid)
    326                                                              begin
    327                                                                  if(ts1CorrectStart&&orderedset[15:8]==linkNumber && orderedset[23:16]!=PAD && orderedset[87:80] == TS1)
    328                                                                  begin
    329             1                          E                             countup = 1'b1;
    330             1                          E                             nextState =  configLanenumWaitUp1;//marwan//
    331                                                                  end
    332             1                          E                         else nextState =  configLinkWidthAcceptUp1;
    333                                                              end
    334             1                      E-hit                 else nextState =  configLinkWidthAcceptUp2;
    335                                                      end
    336                                                      /******************************configLanenumWait***************************************************/
    337                                                          configLanenumWaitDown1:
    338                                                      begin
    339             1                       7152                 resetcounter = 1'b0; countup = 1'b0;
    339             2                       7152     
    340                                                          if(valid && ts1CorrectStart&&orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber && orderedset[87:80] == TS1)
    341                                                          begin
    342             1                        160                     nextState = configLanenumWaitDown2;
    343             1                        160                     resetcounter = 1'b1; countup = 1'b1;
    343             2                        160     
    344                                                          end
    345             1                       6992                 else nextState = configLanenumWaitDown1;
    346                                                      end
    347                                              
    348                                                      configLanenumWaitDown2:
    349                                                      begin
    350             1                        160                 resetcounter = 1'b1; countup = 1'b0;
    350             2                        160     
    351                                                          if(valid)
    352                                                          begin
    353                                                              if(ts1CorrectStart&&orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber && orderedset[87:80] == TS1)
    354                                                              begin
    355             1                    ***0***                         countup = 1'b1;
    356             1                    ***0***                         nextState =  configLanenumWaitDown2;
    357                                                              end
    358             1                    ***0***                     else nextState =  configLanenumWaitDown1;
    359                                                          end
    360             1                        160                 else nextState =  configLanenumWaitDown2;
    361                                                      end
    362                                              
    363                                                      configLanenumWaitUp1:
    364                                                      begin
    365             1                      E-hit                 resetcounter = 1'b0; countup = 1'b0;
    365             2                      E-hit     
    366                                                          if(valid && ts2CorrectStart&&orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber && orderedset[87:80] == TS2)
    367                                                          begin
    368             1                      E-hit                 nextState = configLanenumWaitUp2;
    369             1                      E-hit                 resetcounter = 1'b1; countup = 1'b1;
    369             2                      E-hit     
    370                                                          end//marwan//
    371                                                          else if(valid && ts2CorrectStart&&orderedset[15:8]==PAD && orderedset[23:16]==PAD )begin
    372             1                      E-hit                          PAD_TS1_up= PAD_TS1_up +1;
    373             1                      E-hit                          resetcounter = 1'b1;
    374             1                      E-hit                          countup = 1'b1;
    375             1                      E-hit                          nextState = configLanenumWaitUp2;
    376                                                          end//marwan//
    377             1                      E-hit                 else nextState = configLanenumWaitUp1;
    378                                                      end
    379                                              
    380                                                      configLanenumWaitUp2:
    381                                                      begin
    382             1                      E-hit                 resetcounter = 1'b1; countup = 1'b0;
    382             2                      E-hit     
    383                                                          if(valid)
    384                                                              begin
    385                                                                  if(ts2CorrectStart&&orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber && orderedset[87:80] == TS2)
    386                                                                  begin
    387             1                      E-hit                             countup = 1'b1;
    388             1                      E-hit                             nextState =  configLanenumWaitUp2;
    389                                                                  end//marwan//
    390                                                                  else if(valid && ts2CorrectStart&&orderedset[15:8]==PAD && orderedset[23:16]==PAD)begin
    391             1                      E-hit                             PAD_TS1_up= PAD_TS1_up +1;
    392             1                      E-hit                             countup = 1'b1;
    393                                              
    394                                                                  end//marwan//
    395             1                          E                         else nextState =  configLanenumWaitUp1;
    396                                              
    397                                              
    398                                              
    399                                                                  //marwan
    400                                                                  if(PAD_TS1_up == 2)begin
    401                                                                      
    402             1                      E-hit                             PAD_TS = 1 ;
    403             1                      E-hit                             nextState = start ;
    404                                              
    405                                              
    406                                                                  end
    407                                                                  //marwan
    408                                              
    409                                              
    410                                                              end
    411                                                          
    412             1                      E-hit                 else nextState =  configLanenumWaitUp2;
    413                                                      end
    414                                                      /*********************************configLanenumAccept************************************************/
    415                                                      configLanenumAcceptDown1:
    416                                                      begin
    417             1                        320                 resetcounter = 1'b0; countup = 1'b0;
    417             2                        320     
    418                                                          if(valid && ts1CorrectStart&&orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber && orderedset[87:80] == TS1)
    419                                                          begin
    420             1                        160                     nextState = configLanenumAcceptDown2;
    421             1                        160                     resetcounter = 1'b1; countup = 1'b1;
    421             2                        160     
    422                                                          end//marwan//
    423                                                          else if(valid && ts1CorrectStart&&orderedset[15:8]==PAD && orderedset[23:16]==PAD && orderedset[87:80] == TS1)begin
    424             1                    ***0***                     PAD_TS1_down= PAD_TS1_down +1;
    425             1                    ***0***                     resetcounter = 1'b1;
    426             1                    ***0***                     countup = 1'b1;
    427             1                    ***0***                     nextState = configLanenumAcceptDown2;
    428                                                          end//marwan//
    429                                                          else 
    430             1                        160                 nextState = configLanenumAcceptDown1;
    431                                              
    432                                              
    433                                                          //marwan
    434                                                          if(PAD_TS1_down == 2)begin
    435             1                    ***0***                     nextState = start ; 
    436             1                    ***0***                     PAD_TS = 1 ;
    437                                                 
    438                                              
    439                                                          end
    440                                                          //marwan
    441                                              
    442                                                      end
    443                                              
    444                                                      configLanenumAcceptDown2:
    445                                                      begin
    446             1                        512                 resetcounter = 1'b1; countup = 1'b0;
    446             2                        512     
    447                                                          if(valid)
    448                                                          begin
    449                                                              if(ts1CorrectStart&&orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber && orderedset[87:80] == TS1)
    450                                                              begin
    451             1                        144                         countup = 1'b1;
    452             1                        144                         nextState =  configLanenumAcceptDown2;
    453                                                              end
    454                                                              //marwan//
    455                                                              else if(valid && ts1CorrectStart&&orderedset[15:8]==PAD && orderedset[23:16]==PAD && orderedset[87:80] == TS1)begin
    456             1                         32                         PAD_TS1_down= PAD_TS1_down +1;
    457                                              
    458                                                               end//marwan//
    459             1                    ***0***                     else nextState =  configLanenumAcceptDown1;
    460                                                          end
    461             1                        336                 else nextState =  configLanenumAcceptDown2;
    462                                              
    463                                              
    464                                                          //marwan
    465                                                          if(PAD_TS1_down == 2)begin
    466                                              
    467             1                         16                     PAD_TS = 1 ;
    468             1                         16                     nextState = start ;    
    469             1                         16                     countup = 1'b1;
    470                                              
    471                                                          end
    472                                                          //marwan
    473                                                      end
    474                                              
    475                                                      configLanenumAcceptUp1:
    476                                                      begin
    477             1                      E-hit                 resetcounter = 1'b0; countup = 1'b0;
    477             2                      E-hit     
    478                                                          if(valid &&ts2CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber && orderedset[87:80] == TS2)
    479                                                          begin 
    480             1                      E-hit                     nextState = configLanenumAcceptUp2;
    481             1                      E-hit                     resetcounter = 1'b1; countup = 1'b1;
    481             2                      E-hit     
    482                                                          end
    483                                                          //marwan//
    484                                                          else if(valid && ts1CorrectStart&&orderedset[15:8]==PAD && orderedset[23:16]==PAD && orderedset[87:80] == TS1)begin
    485             1                          E                          PAD_TS1_up= PAD_TS1_up +1;
    486             1                          E                          resetcounter = 1'b1;
    487             1                          E                          countup = 1'b1;
    488             1                          E                          nextState = configLanenumAcceptUp2;
    489                                                          end//marwan//
    490             1                      E-hit                 else nextState = configLanenumAcceptUp1;
    491                                              
    492                                              
    493                                                          //marwan
    494                                                          if(PAD_TS1_up == 2)begin
    495             1                          E                   PAD_TS = 1 ;
    496                                                              
    497             1                          E                   nextState = start ;    
    498                                                          end
    499                                                          //marwan
    500                                                      end
    501                                              
    502                                                      configLanenumAcceptUp2:
    503                                                      begin
    504             1                      E-hit                 resetcounter = 1'b1; countup = 1'b0;
    504             2                      E-hit     
    505                                                          if(valid)
    506                                                          begin
    507                                                              if(ts2CorrectStart&&orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber && orderedset[87:80] == TS2)
    508                                                              begin
    509             1                      E-hit                         countup = 1'b1;
    510             1                      E-hit                         nextState =  configLanenumAcceptUp2;
    511                                                              end //marwan//
    512                                                              else if(valid && ts1CorrectStart&&orderedset[15:8]==PAD && orderedset[23:16]==PAD && orderedset[87:80] == TS1)begin
    513             1                          E                          PAD_TS1_up= PAD_TS1_up +1;
    514             1                          E                          countup = 1'b1;
    515                                              
    516                                                              end//marwan//
    517             1                          E                     else nextState =  configLanenumAcceptUp1;
    518                                                          end
    519             1                      E-hit                 else nextState =  configLanenumAcceptUp2;
    520                                              
    521                                              
    522                                              
    523                                                          //marwan
    524                                                          if(PAD_TS1_up == 2)begin
    525                                                              
    526             1                          E                     PAD_TS = 1 ;
    527             1                          E                     nextState = start ;
    528                                              
    529                                              
    530                                                          end
    531                                                          //marwan
    532                                                      end
    533                                                      /****************************************configComplete***************************************************/
    534                                                      configCompleteDown1:
    535                                                      begin
    536             1                      15408                 resetcounter = 1'b0; countup = 1'b0;
    536             2                      15408     
    537                                                          if(valid &&ts2CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber && orderedset[87:80] == TS2)
    538                                                          begin
    539             1                        112                 nextState = configCompleteDown2;
    540             1                        112                 resetcounter = 1'b1; countup = 1'b1;
    540             2                        112     
    541                                                          end
    542             1                      15296                 else nextState = configCompleteDown1;
    543                                                      end
    544                                              
    545                                                      configCompleteDown2:
    546                                                      begin
    547             1                       1680                 resetcounter = 1'b1; countup = 1'b0;
    547             2                       1680     
    548             1                    ***0***                 if(notEqual)nextState = configCompleteDown1;
    549                                                          else if(valid)
    550                                                          begin
    551                                                              if(ts2CorrectStart&&orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber && orderedset[87:80] == TS2)
    552                                                              begin
    553             1                        784                         countup = 1'b1;
    554             1                        784                         nextState =  configCompleteDown2;
    555                                                              end
    556             1                    ***0***                     else nextState =  configCompleteDown1;
    557                                                          end
    558             1                        896                 else nextState =  configCompleteDown2;
    559                                                      end
    560                                              
    561                                                      configCompleteUp1:
    562                                                      begin
    563             1                      E-hit                 resetcounter = 1'b0; countup = 1'b0;
    563             2                      E-hit     
    564                                                          if(valid &&ts2CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber && orderedset[87:80] == TS2)
    565                                                          begin
    566             1                      E-hit                 nextState = configCompleteUp2;
    567             1                      E-hit                 resetcounter = 1'b1; countup = 1'b1;
    567             2                      E-hit     
    568                                                          end
    569             1                      E-hit                 else nextState = configCompleteUp1;
    570                                                      end
    571                                                      configCompleteUp2:
    572                                                      begin
    573             1                      E-hit                 resetcounter = 1'b1; countup = 1'b0;
    573             2                      E-hit     
    574             1                          E                 if(notEqual)nextState = configCompleteUp1;
    575                                                          else if(valid)
    576                                                              begin
    577                                                                  if(ts2CorrectStart&&orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber && orderedset[87:80] == TS2)
    578                                                                  begin
    579             1                      E-hit                             countup = 1'b1;
    580             1                      E-hit                             nextState =  configCompleteUp2;
    581                                                                  end
    582             1                          E                         else nextState =  configCompleteUp1;
    583                                                              end
    584             1                      E-hit                 else nextState =  configCompleteUp2;
    585                                                      end
    586                                                      /***************************************configIdle***********************************************/
    587                                                      configIdle1:
    588                                                      begin
    589             1                      82368                 resetcounter = 1'b0; countup = 1'b0;
    589             2                      82368     
    590                                                          if(valid)
    591                                                              begin
    592                                                                  if( ((gen == 3'd1) && (orderedset[GEN1_PIPEWIDTH-1:0]==0)) ||((gen == 3'd2) && (|orderedset[GEN2_PIPEWIDTH-1:0]==1'b0))
    593                                                                  ||  ((gen == 3'd3) && (|orderedset[GEN3_PIPEWIDTH-1:0]==1'b0)) ||((gen == 3'd4) && (|orderedset[GEN4_PIPEWIDTH-1:0]==1'b0))
    594                                                                  ||  ((gen == 3'd5) &&( |orderedset[GEN1_PIPEWIDTH-5:0]==1'b0))  )
    595                                                                  begin
    596             1                        208                             countup = 1'b1;
    597             1                        208                             nextState =  configIdle2;
    598                                                                  end
    599             1                      54704                         else nextState =  configIdle1;
    600                                                              end
    601             1                      27456                 else nextState = configIdle1;
    602                                                      end
    603                                              
    604                                                      configIdle2:
    605                                                      begin
    606             1                       1008                 resetcounter = 1'b1; countup = 1'b0;
    606             2                       1008     
    607                                                          if(valid)
    608                                                              begin
    609                                                                  if( ((gen == 3'd1) && (orderedset[GEN1_PIPEWIDTH-1:0]==0)) ||((gen == 3'd2) && (|orderedset[GEN2_PIPEWIDTH-1:0]==1'b0))
    610                                                                  ||((gen == 3'd3) && (|orderedset[GEN3_PIPEWIDTH-1:0]==1'b0)) ||((gen == 3'd4) && (|orderedset[GEN4_PIPEWIDTH-1:0]==1'b0))
    611                                                                  ||((gen == 3'd5) &&( |orderedset[GEN1_PIPEWIDTH-5:0]==1'b0))  )
    612                                                                  begin
    613             1                        400                             countup = 1'b1;
    614             1                        400                             nextState =  configIdle2;
    615                                                                  end
    616             1                         96                         else nextState =  configIdle1;
    617                                                              end
    618             1                        512                 else nextState =  configIdle2;   
    619                                                      end
    620                                              /***************************************************RECOVERY********************************************************/
    621                                                      RcvrLock1:
    622                                                      begin
    623             1                     195183                 resetcounter = 1'b0; countup = 1'b0;
    623             2                     195183     
    624                                                          if(valid &&(ts2CorrectStart||ts1CorrectStart)&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    625                                                          &&(orderedset[87:80] == TS2||orderedset[87:80] == TS1)&&orderedset[39]==directed_speed_change&&
    626                                                          ((orderedset[49:48] == 2'b00&&gen >= 3'd3)||(orderedset[55:48] == TS1 ||orderedset[55:48] == TS2)))
    627                                                          begin
    628             1                      10804                 nextState = RcvrLock2;
    629             1                      10804                 resetcounter = 1'b1; countup = 1'b1;
    629             2                      10804     
    630                                                          end
    631                                              
    632             1                     184379                 else nextState = RcvrLock1;
    633                                                      end
    634                                              
    635                                              
    636                                                      RcvrLock2:
    637                                                      begin
    638             1                      37448                 resetcounter = 1'b1; countup = 1'b0;
    638             2                      37448     
    639                                                          if(valid)
    640                                                              begin
    641                                                                  if((ts2CorrectStart||ts1CorrectStart)&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    642                                                                  &&(orderedset[87:80] == TS2||orderedset[87:80] == TS1)&&orderedset[39]==directed_speed_change&&
    643                                                                  ((orderedset[49:48] == 2'b00&&gen >= 3'd3)||(orderedset[55:48] == TS1 ||orderedset[55:48] == TS2)))
    644                                                                  begin
    645             1                       2372                             countup = 1'b1;
    646             1                       2372                             nextState =  RcvrLock2;
    647                                                                  end
    648             1                      10564                         else nextState =  RcvrLock1;
    649                                                              end
    650             1                      24512                 else nextState =  RcvrLock2;
    651                                                      end
    652                                              
    653                                                      L0up1:
    654                                                      begin
    655             1                      E-hit                 resetcounter = 1'b0; countup = 1'b0;
    655             2                      E-hit     
    656                                                          if(valid &&DEVICETYPE&&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    657                                                          &&orderedset[87:80] == TS1&&orderedset[39]==1'b1)
    658                                                          begin
    659             1                      E-hit                 nextState = L0up2;
    660             1                      E-hit                 resetcounter = 1'b1; countup = 1'b1;
    660             2                      E-hit     
    661                                                          end
    662                                              
    663             1                      E-hit                 else nextState = L0up1;
    664                                              
    665                                                      end
    666                                                      L0up2:
    667                                                      begin
    668             1                      E-hit                  resetcounter = 1'b1; countup = 1'b0;
    668             2                      E-hit     
    669                                                          if(valid)
    670                                                              begin
    671                                                                 if(valid &&DEVICETYPE&&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    672                                                                  &&orderedset[87:80] == TS1&&orderedset[39]==1'b1)
    673                                                                  begin
    674             1                          E                             countup = 1'b1;
    675             1                          E                             nextState =  L0up2;
    676                                                                  end
    677             1                          E                         else nextState =  L0up1;
    678                                                              end
    679             1                      E-hit                 else nextState =  L0up2;
    680                                              
    681                                                      end
    682                                              
    683                                                      phase0up1:
    684                                                      begin
    685             1                      E-hit                 resetcounter = 1'b0; countup = 1'b0;
    685             2                      E-hit     
    686                                                          if(valid &&DEVICETYPE&&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    687                                                          &&orderedset[87:80] == TS1&&orderedset[39]==1'b0&&orderedset[49:48] != 2'b00)  
    688                                                          begin
    689             1                      E-hit                 nextState = phase0up2;
    690             1                      E-hit                 resetcounter = 1'b1; countup = 1'b1;
    690             2                      E-hit     
    691             1                      E-hit                 FSDSP = orderedset[61:56];
    692             1                      E-hit                 LFDSP = orderedset[69:64];
    693                                                          end
    694                                              
    695             1                      E-hit                 else nextState = phase0up1;
    696                                              
    697                                                      end
    698                                              
    699                                                      phase0up2:
    700                                                      begin
    701             1                      E-hit                 resetcounter = 1'b1; countup = 1'b0;
    701             2                      E-hit     
    702                                                          if(valid)
    703                                                              begin
    704                                                                  if(DEVICETYPE&&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    705                                                                  &&orderedset[87:80] == TS1&&orderedset[39]==1'b0&&orderedset[49:48] != 2'b00)   
    706                                                                  begin
    707             1                      E-hit                             countup = 1'b1;
    708             1                      E-hit                             nextState =  phase0up2;
    709             1                      E-hit                             FSDSP = orderedset[61:56];
    710             1                      E-hit                             LFDSP = orderedset[69:64];
    711                                                                  end
    712             1                      E-hit                         else nextState =  phase0up1;
    713                                                              end
    714             1                      E-hit                 else nextState =  phase0up2;
    715                                                      end
    716                                                    
    717                                                      phase0down1:
    718                                                      begin
    719             1                      74147                 resetcounter = 1'b0; countup = 1'b0;
    719             2                      74147     
    720                                                          if(valid &&!DEVICETYPE&&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    721                                                          &&orderedset[87:80]==TS1&&orderedset[54:51]==TransmitterPresetHintDSP
    722                                                          &&orderedset[7*8+5:7*8]==PreCursorCoff&&orderedset[8*8+5:8*8]==CursorCoff&&orderedset[9*8+5:9*8]==PostCursorCoff&&orderedset[49:48]== 2'b00)
    723                                                          begin
    724             1                         42                 nextState = phase0down2;
    725             1                         42                 resetcounter = 1'b1; countup = 1'b1;
    725             2                         42     
    726                                                          end
    727                                              
    728             1                      74105                 else nextState = phase0down1;
    729                                              
    730                                                      end
    731                                              
    732                                                      phase0down2:
    733                                                      begin
    734             1                        126                 resetcounter = 1'b1; countup = 1'b0;
    734             2                        126     
    735                                                          if(valid)
    736                                                              begin
    737                                                                  if(!DEVICETYPE&&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    738                                                                  &&orderedset[87:80] == TS1&&orderedset[54:51]==TransmitterPresetHintDSP
    739                                                                  &&orderedset[7*8+5:7*8]==PreCursorCoff&&orderedset[8*8+5:8*8]==CursorCoff&&orderedset[9*8+5:9*8]==PostCursorCoff&&orderedset[49:48]== 2'b00)
    740                                                                  begin
    741             1                         32                             countup = 1'b1;
    742             1                         32                             nextState =  phase0down2;
    743                                                                  end
    744             1                         10                         else nextState =  phase0down1;
    745                                                              end
    746             1                         84                 else nextState =  phase0down2;
    747                                                      end
    748                                              
    749                                                      phase1up1:
    750                                                      begin
    751             1                      E-hit                 detailedRecoverySubstates = 1'b0;
    752             1                      E-hit                 resetcounter = 1'b0; countup = 1'b0;
    752             2                      E-hit     
    753                                                          if(valid &&DEVICETYPE&&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    754                                                          &&orderedset[87:80] == TS1&&orderedset[49:48] == 2'b10)
    755                                                          begin
    756             1                          E                 nextState = phase1up2;
    757             1                          E                 resetcounter = 1'b1; countup = 1'b1;
    757             2                          E     
    758                                                          end
    759                                              
    760                                                          else if(valid &&DEVICETYPE&&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    761                                                          &&orderedset[87:80] == TS1&&orderedset[49:48] == 2'b00)
    762                                                          begin
    763             1                      E-hit                 nextState = phase1up2;
    764             1                      E-hit                 resetcounter = 1'b1; countup = 1'b1;
    764             2                      E-hit     
    765             1                      E-hit                 detailedRecoverySubstates = 1'b1;
    766                                                          end
    767                                              
    768             1                      E-hit                 else nextState = phase1up1;
    769                                              
    770                                                      end
    771                                              
    772                                                      phase1up2:
    773                                                      begin
    774             1                      E-hit                 resetcounter = 1'b1; countup = 1'b0;
    774             2                      E-hit     
    775                                                          if(valid)
    776                                                              begin
    777                                                                  if(DEVICETYPE&&!detailedRecoverySubstates&&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    778                                                                  &&orderedset[87:80] == TS1&&orderedset[49:48] == 2'b10)
    779                                                                  begin
    780             1                          E                             countup = 1'b1;
    781             1                          E                             nextState =  phase1up2;
    782                                                                  end
    783                                              
    784                                                                  else if(DEVICETYPE&&detailedRecoverySubstates&&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    785                                                                  &&orderedset[87:80] == TS1&&orderedset[49:48] == 2'b00)
    786                                                                  begin
    787             1                      E-hit                             countup = 1'b1;
    788             1                      E-hit                             nextState =  phase1up2;
    789                                                                  end
    790                                              
    791             1                          E                         else nextState =  phase1up1;
    792                                                              end
    793             1                      E-hit                 else nextState =  phase1up2;
    794                                                      end
    795                                              
    796                                                      phase1down1:
    797                                                      begin
    798             1                         32                 resetcounter = 1'b0; countup = 1'b0;
    798             2                         32     
    799             1                         32                 detailedRecoverySubstates = 0;
    800                                                          if(valid &&!DEVICETYPE&&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    801                                                          &&orderedset[87:80]==TS1&&orderedset[49:48]== 2'b01)
    802                                                          begin
    803             1                    ***0***                 nextState = phase1down2;
    804             1                    ***0***                 resetcounter = 1'b1; countup = 1'b1;
    804             2                    ***0***     
    805                                                          end
    806                                                          
    807                                                          else if(trainToGen>2)  
    808             1                         32                          detailedRecoverySubstates = 1;
    809                                                                   
    810             1                    ***0***                 else nextState = phase1down1;
    811                                              
    812                                                      end
    813                                              
    814                                                     /* phase1down2:
    815                                                      begin
    816                                                          resetcounter = 1'b1; countup = 1'b0;
    817                                                          if(valid)
    818                                                              begin
    819                                                                  if(!DEVICETYPE&&ts1CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    820                                                                  &&orderedset[87:80] == TS1&&orderedset[49:48]== 2'b01)
    821                                                                  begin
    822                                                                      countup = 1'b1;
    823                                                                      nextState =  phase1down2;
    824                                                                  end
    825                                                                  else nextState =  phase1down1;
    826                                                              end
    827                                                          else nextState =  phase1down2;
    828                                                      end*/
    829                                              
    830                                              
    831                                                      RcvrCfg:
    832                                                      begin
    833             1                     306072                 resetcounter = 1'b0; countup = 1'b0;
    833             2                     306072     
    834                                                          if(valid &&ts2CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    835                                                          &&orderedset[87:80] == TS2&&orderedset[39]==1'b1 /*&&orderedset[55]==1'b1*/ )                 //Youssef
    836                                                          begin
    837             1                        128                     nextState = RcvrCfg_speed;
    838             1                        128                     rateidTs2 = orderedset[39:32];
    839             1                        128                     symbol6OfTS2 = orderedset[55:48];
    840             1                        128                     resetcounter = 1'b1; countup = 1'b1;
    840             2                        128     
    841                                                              if(DEVICETYPE)
    842                                                              begin
    843             1                         64                         ReceiverpresetHintDSPout = localorderedset[50:48];
    844             1                         64                         TransmitterPresetHintDSPout = localorderedset[54:51];
    845                                                              end
    846                                                              else if(!DEVICETYPE)
    847                                                              begin
    848             1                         64                         ReceiverpresetHintUSPout = localorderedset[50:48];
    849             1                         64                         TransmitterPresetHintUSPout = localorderedset[54:51];
    850                                                              end
    851                                                          end
    852                                                          else if(valid &&ts2CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    853                                                          &&orderedset[87:80] == TS2&&orderedset[39]==1'b0)
    854                                                          begin
    855             1                         96                     nextState = RcvrCfg_idle;
    856             1                         96                     resetcounter = 1'b1; countup = 1'b1;
    856             2                         96     
    857                                                          end
    858                                              
    859             1                     305848                 else nextState = RcvrCfg;
    860                                                      end
    861                                              
    862                                                      RcvrCfg_speed:
    863                                                      begin
    864             1                       1920                 resetcounter = 1'b1; countup = 1'b0;
    864             2                       1920     
    865                                                          if(valid)
    866                                                              begin
    867                                                                  if(ts2CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    868                                                                  &&orderedset[87:80] == TS2&&orderedset[39]==1'b1 &&orderedset[39:32]==rateidTs2
    869                                                                  &&orderedset[55:48]==symbol6OfTS2/*&&orderedset[55]==1'b1*/)   //Youssef
    870                                                                  begin
    871             1                        896                             symbol6OfTS2 = orderedset[55:48];
    872             1                        896                             rateidTs2 = orderedset[39:32];
    873             1                        896                             resetcounter = 1'b1; countup = 1'b1;
    873             2                        896     
    874             1                        896                             countup = 1'b1;
    875             1                        896                             nextState =  RcvrCfg_speed;
    876             1                        896                             RcvrCfgToidle = 1'b0;
    877                                                                      if(DEVICETYPE)
    878                                                                          begin
    879             1                        448                                     ReceiverpresetHintDSPout = localorderedset[50:48];
    880             1                        448                                     TransmitterPresetHintDSPout = localorderedset[54:51];
    881                                                                          end
    882                                                                      else if(!DEVICETYPE)
    883                                                                          begin
    884             1                        448                                     ReceiverpresetHintUSPout = localorderedset[50:48];
    885             1                        448                                     TransmitterPresetHintUSPout = localorderedset[54:51];
    886                                                                          end
    887                                                                  end
    888             1                    ***0***                         else nextState =  RcvrCfg;
    889                                                              end
    890             1                       1024                 else nextState =  RcvrCfg_speed;
    891                                                      end
    892                                              
    893                                                      RcvrCfg_idle:
    894                                                      begin
    895             1                       1120                 resetcounter = 1'b1; countup = 1'b0;
    895             2                       1120     
    896                                                          if(valid)
    897                                                              begin
    898                                                                  if(ts2CorrectStart&& orderedset[15:8]==linkNumber && orderedset[23:16]==laneNumber 
    899                                                                  &&orderedset[87:80] == TS2&& orderedset[39]==1'b0)
    900                                                                  begin
    901             1                        480                             resetcounter = 1'b1; countup = 1'b1;
    901             2                        480     
    902             1                        480                             countup = 1'b1;
    903             1                        480                             nextState =  RcvrCfg_idle;
    904             1                        480                             RcvrCfgToidle = 1'b1;
    905                                                                  end
    906             1                         32                         else nextState =  RcvrCfg;
    907                                                              end
    908             1                        608                 else nextState =  RcvrCfg_idle;
    909                                                      end
    910                                              
    911                                                      RcvrSpeed1:
    912                                                      begin //marwan//
    913             1                     428722                 resetcounter = 1'b0; countup = 1'b0;
    913             2                     428722     
    914                                                          if(valid &&(((gen>=3'd3)&&(orderedset[7:0] == 8'h66))||(gen!=3'd3&&orderedset[7:0]==COM &&(orderedset[31:8]=={3{idle}}))))
    915                                                          begin
    916             1                        128                 nextState = RcvrSpeed2;
    917             1                        128                 resetcounter = 1'b1; countup = 1'b1;
    917             2                        128     
    918             1                        128                 RcvrCfgToidle = 1'b0;
    919                                                          end
    920             1                     428594                 else nextState = RcvrSpeed1;
    921                                                      end
    922                                              
    923                                                      RcvrSpeed2:
    924                                                      begin
    925             1                        224                 resetcounter = 1'b1; countup = 1'b0;
    925             2                        224     
    926                                                          if(valid)
    927                                                              begin //marwan//
    928                                                                  if(((gen>=3'd3&&(|orderedset == 8'h66))||(gen!=3'd3&&orderedset[7:0]==COM &&(|orderedset[31:8]=={3{idle}}))))
    929                                                                  begin
    930             1                    ***0***                             countup = 1'b1;
    931             1                    ***0***                             nextState =  RcvrSpeed2;
    932             1                    ***0***                             RcvrCfgToidle = 1'b0;
    933                                                                  end
    934             1                         32                         else nextState =  RcvrSpeed1;
    935                                                              end
    936             1                        192                 else nextState =  RcvrSpeed2;
    937                                                      end
    938                                              
    939                                                      RcvrSpeedeieos1:
    940                                                      begin
    941             1                        672                 resetcounter = 1'b0; countup = 1'b0;
    941             2                        672     
    942                                                          if(valid &&((gen>=3'd4 && orderedset=={4{32'hFFFF0000}})||(gen==3'd5&&orderedset=={2{64'hFFFFFFFF00000000}})||
    943                                                          (gen==3'd3&&orderedset=={8{16'hFF00}})||(gen<3'd3&&orderedset[7:0]==COM &&(orderedset[119:8]=={14{gen1eieos}}))))
    944                                                          begin
    945             1                        128                 nextState = RcvrSpeedeieos2;
    946             1                        128                 resetcounter = 1'b1; countup = 1'b1;
    946             2                        128     
    947             1                        128                 RcvrCfgToidle = 1'b0;
    948                                                          end
    949             1                        544                 else nextState = RcvrSpeedeieos1;
    950                                                      end
    951                                              
    952                                                      RcvrSpeedeieos2:
    953                                                      begin
    954             1                        128                 resetcounter = 1'b1; countup = 1'b0;
    954             2                        128     
    955                                                          if(valid)
    956                                                              begin
    957                                                                  if((gen==3'd4 && orderedset=={4{32'hFFFF0000}})||(gen==3'd5&&orderedset=={2{64'hFFFFFFFF00000000}})||
    958                                                                  (gen==3'd3&&orderedset=={8{16'hFF00}})||
    959                                                                  (gen<3'd3&&orderedset[7:0]==COM &&(orderedset[119:8]=={14{gen1eieos}})))
    960                                                                  begin
    961             1                    ***0***                             countup = 1'b1;
    962             1                    ***0***                             nextState =  RcvrSpeedeieos2;
    963             1                    ***0***                             RcvrCfgToidle = 1'b0;
    964                                                                  end
    965             1                    ***0***                         else nextState =  RcvrSpeedeieos1;
    966                                                              end
    967             1                        128                 else nextState =  RcvrSpeedeieos2;
    968                                                      end
    969                                              
    970                                                      RcvrIdle1:
    971                                                      begin
    972             1                    1281024                 resetcounter = 1'b0; countup = 1'b0;
    972             2                    1281024     
    973                                                          if(valid &&( (gen == 3'd1 && |orderedset[GEN1_PIPEWIDTH-1:0]==1'b0) ||(gen == 3'd2 && |orderedset[GEN2_PIPEWIDTH-1:0]==1'b0)
    974                                                          ||(gen == 3'd3 && |orderedset[GEN3_PIPEWIDTH-1:0]==1'b0) ||(gen == 3'd4 && |orderedset[GEN4_PIPEWIDTH-1:0]==1'b0)
    975                                                          ||(gen == 3'd5 && |orderedset[GEN1_PIPEWIDTH-5:0]==1'b0)  ))
    976                                                          begin
    977             1                         64                 nextState = RcvrIdle2;
    978             1                         64                 resetcounter = 1'b1; countup = 1'b1;
    978             2                         64     
    979             1                         64                 RcvrCfgToidle = 1'b0;
    980                                                          end
    981             1                    1280960                 else nextState = RcvrIdle1;
    982                                                      end
    983                                              
    984                                                      RcvrIdle2:
    985                                                      begin
    986             1                        176                 resetcounter = 1'b1; countup = 1'b0;
    986             2                        176     
    987                                                          if(valid)
    988                                                              begin
    989                                                                   if( (gen == 3'd1 && |orderedset[GEN1_PIPEWIDTH-1:0]==1'b0) ||(gen == 3'd2 && |orderedset[GEN2_PIPEWIDTH-1:0]==1'b0)
    990                                                                  ||(gen == 3'd3 && |orderedset[GEN3_PIPEWIDTH-1:0]==1'b0) ||(gen == 3'd4 && |orderedset[GEN4_PIPEWIDTH-1:0]==1'b0)
    991                                                                  ||(gen == 3'd5 && |orderedset[GEN1_PIPEWIDTH-5:0]==1'b0)  )
    992                                                                  begin
    993             1                         64                             countup = 1'b1;
    994             1                         64                             nextState =  RcvrIdle2;
    995             1                         64                             RcvrCfgToidle = 1'b0;
    996                                                                  end
    997             1                    ***0***                         else nextState =  RcvrIdle1;
    998                                                              end
    999             1                        112                 else nextState =  RcvrIdle2;   
    1000                                                     end
    1001            1                         48             default:nextState = start;
    1002                                             endcase
    1003                                             end
    1004            1                     668968         assign rateid = localorderedset[39:32];
    1005            1                     680114         assign linkNumberOut = localorderedset[15:8];
    1006                                                 assign upconfigure_capability = localorderedset[42];
    1007            1                     545751         assign ts1CorrectStart = (orderedset[7:0]==COM || orderedset[7:0]==gen3TS1)? 1'b1 : 1'b0;
    1008            1                     545751         assign ts2CorrectStart = (orderedset[7:0]==COM || orderedset[7:0]==gen3TS2)? 1'b1 : 1'b0;
    1009                                                 
    1010                                             
    1011                                                 
    1012                                             endmodule


=================================================================================
=== File: RTL/OS_GENERATOR.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          337       327        10      97.0

================================Statement Details================================

Statement Coverage for file RTL/OS_GENERATOR.v --

    1                                                module OS_GENERATOR #
    2                                                (parameter GEN1_PIPEWIDTH=16,parameter GEN2_PIPEWIDTH=16,parameter GEN3_PIPEWIDTH=16,parameter GEN4_PIPEWIDTH=8,parameter GEN5_PIPEWIDTH=32,
    3                                                parameter no_of_lanes=16
    4                                                )
    5                                                (pclk, reset_n, os_type, lane_number, link_number, rate, loopback , detected_lanes, gen, start,EQ,EC,reset_EIEOS_count,tx_preset,rx_preset,use_preset_coeff,FS,LF,pre_cursor_coeff,cursor_coeff,post_cursor_coeff,rej_coeff,req_eq,speed_change, finish, Os_Out, DataK, busy, DataValid);
    6                                                parameter LANESNUMBER=no_of_lanes;
    7                                                input EQ;
    8                                                input [2:0] os_type;
    9                                                input [1:0]lane_number;
    10                                               input [7:0]link_number;
    11                                               input [2:0] rate;
    12                                               input loopback;
    13                                               input [no_of_lanes-1:0]detected_lanes;
    14                                               input [2:0] gen;
    15                                               input start;
    16                                               input pclk;
    17                                               input reset_n;
    18                                               input [1:0]EC;
    19                                               input reset_EIEOS_count;
    20                                               input [4*no_of_lanes-1:0]tx_preset;
    21                                               input [3*no_of_lanes-1:0]rx_preset;
    22                                               input [no_of_lanes-1:0] use_preset_coeff;
    23                                               input [6*no_of_lanes-1:0]FS;
    24                                               input [6*no_of_lanes-1:0]LF;
    25                                               input [6*no_of_lanes-1:0]pre_cursor_coeff;
    26                                               input [6*no_of_lanes-1:0]cursor_coeff;
    27                                               input [6*no_of_lanes-1:0]post_cursor_coeff;
    28                                               input [no_of_lanes-1:0]rej_coeff;
    29                                               input req_eq;
    30                                               input speed_change;
    31                                               output reg busy;
    32                                               output reg finish;
    33                                               output reg [511:0] Os_Out;
    34                                               output reg [63:0]DataK;
    35                                               output reg [63:0]DataValid;
    36                                               reg send;
    37                                               reg [2:0] os_type_reg;
    38                                               reg [1:0] lane_number_reg;
    39                                               reg [no_of_lanes-1:0]detected_lanes_reg;
    40                                               reg [2:0] gen_reg;
    41                                               reg [63:0]tx_preset_comb;
    42                                               reg [47:0]rx_preset_comb;
    43                                               reg [15:0] use_preset_coeff_comb;
    44                                               reg [95:0]FS_comb;
    45                                               reg [95:0]LF_comb;
    46                                               reg [95:0]pre_cursor_coeff_comb;
    47                                               reg [95:0]cursor_coeff_comb;
    48                                               reg [95:0]post_cursor_coeff_comb;
    49                                               reg [15:0]rej_coeff_comb;
    50                                               reg [3:0] symbol;
    51                                               reg [4:0] count;
    52                                               reg D;
    53                                               reg K;
    54                                               reg valid;
    55                                               reg not_valid;
    56                                               reg [31:0] skp;
    57                                               reg [31:0] EIOS;
    58                                               reg [127:0] TS1;
    59                                               reg [127:0] TS2;
    60                                               reg [5:0]PIPE; 
    61                                               reg [23:0] skp_G3;
    62                                               reg [7:0] EIOS_G3;
    63                                               reg [15:0] SDS;
    64                                               reg [7:0] EIEOS;
    65                                               reg [127:0] temp1;
    66                                               reg [127:0] temp2;
    67                                               reg [127:0] temp3;
    68                                               reg [127:0] temp4;
    69                                               reg [127:0] temp1_comb;
    70                                               reg [127:0] temp2_comb;
    71                                               reg [127:0] temp3_comb;
    72                                               reg [127:0] temp4_comb;
    73              1                     264168     always @(*)begin
    74              1                     264168      tx_preset_comb=0;
    75              1                     264168      rx_preset_comb=0;
    76              1                     264168      use_preset_coeff_comb=0;
    77              1                     264168      FS_comb=0;
    78              1                     264168      LF_comb=0;
    79              1                     264168      pre_cursor_coeff_comb=0;
    80              1                     264168      cursor_coeff_comb=0;
    81              1                     264168      post_cursor_coeff_comb=0;
    82              1                     264168      rej_coeff_comb=0;
    83              1                     264168      temp1_comb=0;
    84              1                     264168      temp2_comb=0;
    85              1                     264168      temp3_comb=0;
    86              1                     264168      temp4_comb=0;
    87                                                 
    88                                                if(start)begin
    89                                               	//$display("If start"); 
    90                                                 if(gen==3'b001||gen==3'b010 ) begin
    91                                               	//$display("If gen");   
    92              1                      84866         tx_preset_comb=tx_preset;
    93              1                      84866         rx_preset_comb=rx_preset;
    94                                               	if(EQ)begin
    95                                               	 //$display("If EQ");		 
    96              1                      15132          temp1_comb[7:0]={1'b1,tx_preset_comb[3:0],rx_preset_comb[2:0]};
    97              1                      15132          temp1_comb[15:8]={1'b1,tx_preset_comb[7:4],rx_preset_comb[5:3]};
    98              1                      15132          temp1_comb[23:16]={1'b1,tx_preset_comb[11:8],rx_preset_comb[8:6]};
    99              1                      15132          temp1_comb[31:24]={1'b1,tx_preset_comb[15:12],rx_preset_comb[11:9]};
    100             1                      15132          temp1_comb[39:32]={1'b1,tx_preset_comb[19:16],rx_preset_comb[14:12]};
    101             1                      15132          temp1_comb[47:40]={1'b1,tx_preset_comb[23:20],rx_preset_comb[17:15]};
    102             1                      15132          temp1_comb[55:48]={1'b1,tx_preset_comb[27:24],rx_preset_comb[20:18]};
    103             1                      15132          temp1_comb[63:56]={1'b1,tx_preset_comb[31:28],rx_preset_comb[23:21]};
    104             1                      15132          temp1_comb[71:64]={1'b1,tx_preset_comb[35:32],rx_preset_comb[26:24]};
    105             1                      15132          temp1_comb[79:72]={1'b1,tx_preset_comb[39:36],rx_preset_comb[29:27]};
    106             1                      15132          temp1_comb[87:80]={1'b1,tx_preset_comb[43:40],rx_preset_comb[32:30]};
    107             1                      15132          temp1_comb[95:88]={1'b1,tx_preset_comb[47:44],rx_preset_comb[35:33]};
    108             1                      15132          temp1_comb[103:96]={1'b1,tx_preset_comb[51:48],rx_preset_comb[38:36]};
    109             1                      15132          temp1_comb[111:104]={1'b1,tx_preset_comb[55:52],rx_preset_comb[41:39]};
    110             1                      15132          temp1_comb[119:112]={1'b1,tx_preset_comb[59:56],rx_preset_comb[44:42]};
    111             1                      15132          temp1_comb[127:120]={1'b1,tx_preset_comb[63:60],rx_preset_comb[47:45]};
    112                                                  end
    113                                                 else
    114                                                 begin
    115                                              	   //$display("If eq = 0"); 
    116             1                      69734     	temp1_comb={no_of_lanes{8'h4A}};
    117                                                 end
    118                                                 
    119                                              	
    120                                                if(EQ)begin	 
    121             1                      15132        temp2_comb[7:0]={EQ,tx_preset_comb[3:0],rx_preset_comb[2:0]};
    122             1                      15132        temp2_comb[15:8]={EQ,tx_preset_comb[7:4],rx_preset_comb[5:3]};
    123             1                      15132        temp2_comb[23:16]={EQ,tx_preset_comb[11:8],rx_preset_comb[8:6]};
    124             1                      15132        temp2_comb[31:24]={EQ,tx_preset_comb[15:12],rx_preset_comb[11:9]};
    125             1                      15132        temp2_comb[39:32]={EQ,tx_preset_comb[19:16],rx_preset_comb[14:12]};
    126             1                      15132        temp2_comb[47:40]={EQ,tx_preset_comb[23:20],rx_preset_comb[17:15]};
    127             1                      15132        temp2_comb[55:48]={EQ,tx_preset_comb[27:24],rx_preset_comb[20:18]};
    128             1                      15132        temp2_comb[63:56]={EQ,tx_preset_comb[31:28],rx_preset_comb[23:21]};
    129             1                      15132        temp2_comb[71:64]={EQ,tx_preset_comb[35:32],rx_preset_comb[26:24]};
    130             1                      15132        temp2_comb[79:72]={EQ,tx_preset_comb[39:36],rx_preset_comb[29:27]};
    131             1                      15132        temp2_comb[87:80]={EQ,tx_preset_comb[43:40],rx_preset_comb[32:30]};
    132             1                      15132        temp2_comb[95:88]={EQ,tx_preset_comb[47:44],rx_preset_comb[35:33]};
    133             1                      15132        temp2_comb[103:96]={EQ,tx_preset_comb[51:48],rx_preset_comb[38:36]};
    134             1                      15132        temp2_comb[111:104]={EQ,tx_preset_comb[55:52],rx_preset_comb[41:39]};
    135             1                      15132        temp2_comb[119:112]={EQ,tx_preset_comb[59:56],rx_preset_comb[44:42]};
    136             1                      15132        temp2_comb[127:120]={EQ,tx_preset_comb[63:60],rx_preset_comb[47:45]};
    137                                                 end
    138                                                 else 
    139             1                      69734     	temp2_comb={no_of_lanes{8'h4A}};
    140                                                end
    141                                                else if (gen==3'b011 || gen== 3'b100 || gen==3'b101) begin
    142             1                      47210        tx_preset_comb=tx_preset;
    143             1                      47210        use_preset_coeff_comb=use_preset_coeff;
    144             1                      47210        FS_comb=FS;
    145             1                      47210        LF_comb=LF;
    146             1                      47210        pre_cursor_coeff_comb=pre_cursor_coeff;
    147             1                      47210        cursor_coeff_comb=cursor_coeff;
    148             1                      47210        post_cursor_coeff_comb=post_cursor_coeff;
    149             1                      47210        rej_coeff_comb=rej_coeff;
    150             1                      47210        temp2_comb=128'b0;
    151             1                      47210        temp3_comb=128'b0;
    152             1                      47210        temp4_comb=128'b0;
    153             1                      47210        temp1_comb[7:0]={use_preset_coeff_comb[0],tx_preset_comb[3:0],reset_EIEOS_count,EC};
    154             1                      47210        temp1_comb[15:8]={use_preset_coeff_comb[1],tx_preset_comb[7:4],reset_EIEOS_count,EC};
    155             1                      47210        temp1_comb[23:16]={use_preset_coeff_comb[2],tx_preset_comb[11:8],reset_EIEOS_count,EC};
    156             1                      47210        temp1_comb[31:24]={use_preset_coeff_comb[3],tx_preset_comb[15:12],reset_EIEOS_count,EC};
    157             1                      47210        temp1_comb[39:32]={use_preset_coeff_comb[4],tx_preset_comb[19:16],reset_EIEOS_count,EC};
    158             1                      47210        temp1_comb[47:40]={use_preset_coeff_comb[5],tx_preset_comb[23:20],reset_EIEOS_count,EC};
    159             1                      47210        temp1_comb[55:48]={use_preset_coeff_comb[6],tx_preset_comb[27:24],reset_EIEOS_count,EC};
    160             1                      47210        temp1_comb[63:56]={use_preset_coeff_comb[7],tx_preset_comb[31:28],reset_EIEOS_count,EC};
    161             1                      47210        temp1_comb[71:64]={use_preset_coeff_comb[8],tx_preset_comb[35:32],reset_EIEOS_count,EC};
    162             1                      47210        temp1_comb[79:72]={use_preset_coeff_comb[9],tx_preset_comb[39:36],reset_EIEOS_count,EC};
    163             1                      47210        temp1_comb[87:80]={use_preset_coeff_comb[10],tx_preset_comb[43:40],reset_EIEOS_count,EC};
    164             1                      47210        temp1_comb[95:88]={use_preset_coeff_comb[11],tx_preset_comb[47:44],reset_EIEOS_count,EC};
    165             1                      47210        temp1_comb[103:96]={use_preset_coeff_comb[12],tx_preset_comb[51:48],reset_EIEOS_count,EC};
    166             1                      47210        temp1_comb[111:104]={use_preset_coeff_comb[13],tx_preset_comb[55:52],reset_EIEOS_count,EC};
    167             1                      47210        temp1_comb[119:112]={use_preset_coeff_comb[14],tx_preset_comb[59:56],reset_EIEOS_count,EC};
    168             1                      47210        temp1_comb[127:120]={use_preset_coeff_comb[15],tx_preset_comb[63:60],reset_EIEOS_count,EC};
    169                                                 if (EC==2'b01) begin
    170             1                      20182        temp2_comb[5:0]=FS_comb[5:0];
    171             1                      20182        temp2_comb[13:8]=FS_comb[11:6];
    172             1                      20182        temp2_comb[21:16]=FS_comb[17:12];
    173             1                      20182        temp2_comb[29:24]=FS_comb[23:18];
    174             1                      20182        temp2_comb[37:32]=FS_comb[29:24];
    175             1                      20182        temp2_comb[45:40]=FS_comb[35:30];
    176             1                      20182        temp2_comb[53:48]=FS_comb[41:36];
    177             1                      20182        temp2_comb[61:56]=FS_comb[47:42];
    178             1                      20182        temp2_comb[69:64]=FS_comb[53:48];
    179             1                      20182        temp2_comb[77:72]=FS_comb[59:54];
    180             1                      20182        temp2_comb[85:80]=FS_comb[65:60];
    181             1                      20182        temp2_comb[93:88]=FS_comb[71:66];
    182             1                      20182        temp2_comb[101:96]=FS_comb[77:72];
    183             1                      20182        temp2_comb[109:104]=FS_comb[83:78];
    184             1                      20182        temp2_comb[117:112]=FS_comb[89:84];
    185             1                      20182        temp2_comb[125:120]=FS_comb[95:90];
    186             1                      20182        temp3_comb[5:0]=LF_comb[5:0];
    187             1                      20182        temp3_comb[13:8]=LF_comb[11:6];
    188             1                      20182        temp3_comb[21:16]=LF_comb[17:12];
    189             1                      20182        temp3_comb[29:24]=LF_comb[23:18];
    190             1                      20182        temp3_comb[37:32]=LF_comb[29:24];
    191             1                      20182        temp3_comb[45:40]=LF_comb[35:30];
    192             1                      20182        temp3_comb[53:48]=LF_comb[41:36];
    193             1                      20182        temp3_comb[61:56]=LF_comb[47:42];
    194             1                      20182        temp3_comb[69:64]=LF_comb[53:48];
    195             1                      20182        temp3_comb[77:72]=LF_comb[59:54];
    196             1                      20182        temp3_comb[85:80]=LF_comb[65:60];
    197             1                      20182        temp3_comb[93:88]=LF_comb[71:66];
    198             1                      20182        temp3_comb[101:96]=LF_comb[77:72];
    199             1                      20182        temp3_comb[109:104]=LF_comb[83:78];
    200             1                      20182        temp3_comb[117:112]=LF_comb[89:84];
    201             1                      20182        temp3_comb[125:120]=LF_comb[95:90];
    202                                                 end
    203                                                 else begin 
    204             1                      27028        temp2_comb[5:0]=pre_cursor_coeff_comb[5:0];
    205             1                      27028        temp2_comb[13:8]=pre_cursor_coeff_comb[11:6];
    206             1                      27028        temp2_comb[21:16]=pre_cursor_coeff_comb[17:12];
    207             1                      27028        temp2_comb[29:24]=pre_cursor_coeff_comb[23:18];
    208             1                      27028        temp2_comb[37:32]=pre_cursor_coeff_comb[29:24];
    209             1                      27028        temp2_comb[45:40]=pre_cursor_coeff_comb[35:30];
    210             1                      27028        temp2_comb[53:48]=pre_cursor_coeff_comb[41:36];
    211             1                      27028        temp2_comb[61:56]=pre_cursor_coeff_comb[47:42];
    212             1                      27028        temp2_comb[69:64]=pre_cursor_coeff_comb[53:48];
    213             1                      27028        temp2_comb[77:72]=pre_cursor_coeff_comb[59:54];
    214             1                      27028        temp2_comb[85:80]=pre_cursor_coeff_comb[65:60];
    215             1                      27028        temp2_comb[93:88]=pre_cursor_coeff_comb[71:66];
    216             1                      27028        temp2_comb[101:96]=pre_cursor_coeff_comb[77:72];
    217             1                      27028        temp2_comb[109:104]=pre_cursor_coeff_comb[83:78];
    218             1                      27028        temp2_comb[117:112]=pre_cursor_coeff_comb[89:84];
    219             1                      27028        temp2_comb[125:120]=pre_cursor_coeff_comb[95:90];
    220             1                      27028        temp3_comb[5:0]=cursor_coeff_comb[5:0];
    221             1                      27028        temp3_comb[13:8]=cursor_coeff_comb[11:6];
    222             1                      27028        temp3_comb[21:16]=cursor_coeff_comb[17:12];
    223             1                      27028        temp3_comb[29:24]=cursor_coeff_comb[23:18];
    224             1                      27028        temp3_comb[37:32]=cursor_coeff_comb[29:24];
    225             1                      27028        temp3_comb[45:40]=cursor_coeff_comb[35:30];
    226             1                      27028        temp3_comb[53:48]=cursor_coeff_comb[41:36];
    227             1                      27028        temp3_comb[61:56]=cursor_coeff_comb[47:42];
    228             1                      27028        temp3_comb[69:64]=cursor_coeff_comb[53:48];
    229             1                      27028        temp3_comb[77:72]=cursor_coeff_comb[59:54];
    230             1                      27028        temp3_comb[85:80]=cursor_coeff_comb[65:60];
    231             1                      27028        temp3_comb[93:88]=cursor_coeff_comb[71:66];
    232             1                      27028        temp3_comb[101:96]=cursor_coeff_comb[77:72];
    233             1                      27028        temp3_comb[109:104]=cursor_coeff_comb[83:78];
    234             1                      27028        temp3_comb[117:112]=cursor_coeff_comb[89:84];
    235             1                      27028        temp3_comb[125:120]=cursor_coeff_comb[95:90];
    236                                                 end
    237             1                      47210        temp4_comb[6:0]={rej_coeff_comb[0],post_cursor_coeff_comb[5:0]};
    238             1                      47210        temp4_comb[14:8]={rej_coeff_comb[1],post_cursor_coeff_comb[11:6]};
    239             1                      47210        temp4_comb[22:16]={rej_coeff_comb[2],post_cursor_coeff_comb[17:12]};
    240             1                      47210        temp4_comb[30:24]={rej_coeff_comb[3],post_cursor_coeff_comb[23:18]};
    241             1                      47210        temp4_comb[38:32]={rej_coeff_comb[4],post_cursor_coeff_comb[29:24]};
    242             1                      47210        temp4_comb[46:40]={rej_coeff_comb[5],post_cursor_coeff_comb[35:30]};
    243             1                      47210        temp4_comb[54:48]={rej_coeff_comb[6],post_cursor_coeff_comb[41:36]};
    244             1                      47210        temp4_comb[62:56]={rej_coeff_comb[7],post_cursor_coeff_comb[47:42]};
    245             1                      47210        temp4_comb[70:64]={rej_coeff_comb[8],post_cursor_coeff_comb[53:48]};
    246             1                      47210        temp4_comb[78:72]={rej_coeff_comb[9],post_cursor_coeff_comb[59:54]};
    247             1                      47210        temp4_comb[86:80]={rej_coeff_comb[10],post_cursor_coeff_comb[65:60]};
    248             1                      47210        temp4_comb[94:88]={rej_coeff_comb[11],post_cursor_coeff_comb[71:66]};
    249             1                      47210        temp4_comb[102:96]={rej_coeff_comb[12],post_cursor_coeff_comb[77:72]};
    250             1                      47210        temp4_comb[110:104]={rej_coeff_comb[13],post_cursor_coeff_comb[83:78]};
    251             1                      47210        temp4_comb[118:112]={rej_coeff_comb[14],post_cursor_coeff_comb[89:84]};
    252             1                      47210        temp4_comb[126:120]={rej_coeff_comb[15],post_cursor_coeff_comb[95:90]};
    253                                                 end
    254                                                end
    255                                                end
    256                                                	
    257             1                     732443     always@(posedge pclk,negedge reset_n) begin
    258                                               if ( reset_n == 1'b0) begin
    259             1                         18        valid <= 1'b1;//represents that data is valid
    260             1                         18        not_valid <= 1'b0;//represents that data isn't valid
    261             1                         18        finish <=1'b0;
    262             1                         18        busy<=1'b0;
    263             1                         18        Os_Out<=512'b0;
    264             1                         18        DataK<=64'b0;
    265             1                         18        DataValid<=64'b0;
    266                                                 end
    267                                               if (start) begin 
    268                                                if(gen==3'b001)  
    269             1                     169729         PIPE<=GEN1_PIPEWIDTH;
    270                                                 /*else if(gen==3'b010)
    271                                                  PIPE<=GEN2_PIPEWIDTH;
    272                                                 else if(gen==3'b011)  
    273                                                  PIPE<=GEN3_PIPEWIDTH;
    274                                                 else if(gen==3'b100)
    275                                                  PIPE<=GEN4_PIPEWIDTH;*/
    276                                                 else if (gen==3'b101)
    277             1                      94416         PIPE<=GEN5_PIPEWIDTH;
    278             1                     264145        count<=no_of_lanes;
    279                                                if(gen==3'b001||gen==3'b010 ) begin // Generation 1&2
    280             1                     169729        temp1<=temp1_comb;
    281             1                     169729        temp2<=temp2_comb;
    282             1                     169729        temp3<=temp3_comb;
    283             1                     169729        temp4<=temp4_comb;
    284             1                     169729        os_type_reg <= os_type; // storing the type of the order set
    285             1                     169729        lane_number_reg <= lane_number; // storing the type of lanes 
    286             1                     169729        gen_reg <= gen; // storing the PCIe generation 
    287             1                     169729        symbol <= 4'b0000; // flag which detects which symbol to be sent 
    288             1                     169729        send <= 1'b1; // in order to know that there will be an order to send
    289             1                     169729        busy<=1'b1;
    290                                                 //count <= 5'b00000; // counter which countes the number of lanes detected
    291             1                     169729        D <= 1'b0;//reperesents the order sets is D character
    292             1                     169729        K <= 1'b1;//represents that the order set is K character
    293                                                 //temp1<=128'b0;
    294                                                 // preparation of the order set based on the inputs coming from the Tx LTSSM
    295             1                     169729        skp <= 32'h1C1C1CBC;
    296             1                     169729        EIOS <= 32'h7C7C7CBC;
    297             1                     169729        TS1[7:0] <= 8'hBC;
    298                                                 if (link_number==8'b00000000)
    299             1                      89230         TS1[15:8] <= 8'hF7;
    300                                              	
    301                                                 else 
    302             1                      80499         TS1[15:8] <= link_number;
    303             1                     169729        TS1[23:16]<=8'b0;
    304                                              	
    305             1                     169729        TS1[31:24] <= 8'b0000000;
    306                                                 if ( rate == 3'b001) 
    307             1                    ***0***          TS1[38:32] <= 7'b0000010;
    308                                              	
    309                                                 /*else if ( rate == 3'b010) 
    310                                                   TS1[38:32] <= 7'b0000110;
    311                                              	 
    312                                                 else if ( rate == 3'b011) 
    313                                                   TS1[38:32] <= 7'b0001110;
    314                                              	 
    315                                                 else if ( rate == 3'b100) 
    316                                                   TS1[38:32] <= 7'b0011110;*/
    317                                              	 
    318                                                 else  
    319             1                     169729          TS1[38:32] <= 7'b0111110;
    320             1                     169729        TS1[39]<=speed_change;
    321                                              	 
    322                                                 if(loopback)
    323             1                     169729          TS1[47:40] <= 8'b00000100;
    324                                              	 
    325                                                 else
    326             1                    ***0***          TS1[47:40] <= 8'b00000000;
    327                                              
    328             1                     169729     	TS1[55:48]<=8'h4A; //marwan
    329             1                     169729        TS1[127:56] <= 72'h4A4A4A4A4A4A4A4A4A;
    330                                              
    331                                                 
    332             1                     169729        TS2[7:0] <= 8'hBC;
    333                                                 if (link_number==8'b00000000)
    334             1                      89230         TS2[15:8] <= 8'hF7;
    335                                                 else 
    336             1                      80499         TS2[15:8] <= link_number;
    337                                              	
    338             1                     169729        TS2[31:24] <= 8'b0000000;
    339                                                 if ( rate == 3'b001) 
    340             1                    ***0***          TS2[38:32] <= 7'b0000010;
    341                                              	
    342                                                /* else if ( rate == 3'b010) 
    343                                                   TS2[38:32] <= 7'b0000110;
    344                                              	 
    345                                                 else if ( rate == 3'b011) 
    346                                                   TS2[38:32] <= 7'b0001110;
    347                                              	 
    348                                              	 
    349                                                 else if ( rate == 3'b100) 
    350                                                   TS2[38:32] <= 7'b0011110;*/
    351                                              	 
    352                                                 else  
    353             1                     169729          TS2[38:32] <= 7'b0111110;
    354             1                     169729        TS2[39]<=speed_change; 
    355                                                 if(loopback)
    356             1                     169729          TS2[47:40] <= 8'b00000100;
    357                                              	 
    358                                                 else
    359             1                    ***0***          TS2[47:40] <= 8'b00000000;
    360                                              
    361                                              
    362             1                     169729     	TS2[55:48]  <= 8'h45; //marwan
    363                                              
    364             1                     169729     	TS2[127:56] <= 72'h454545454545454545;
    365                                                 end
    366                                                 
    367                                                else if (gen==3'b011 || gen== 3'b100 || gen==3'b101) begin //Generation 3&4&5
    368             1                      94416        os_type_reg <= os_type; // storing the type of the order set
    369             1                      94416        lane_number_reg <= lane_number; // storing the type of lanes 
    370             1                      94416        gen_reg <= gen; // storing the PCIe generation 
    371             1                      94416        send <= 1'b1;
    372             1                      94416        busy<=1'b1;
    373                                               
    374             1                      94416        symbol <= 4'b0000; // flag which detects which symbol to be sent 
    375                                                 //send <= 1'b1; // in order to know that there will be an order to send
    376                                                 //count<=no_of_lanes;
    377             1                      94416        skp_G3<=24'h00E199; // Youssef ///  Gen 5 
    378             1                      94416        EIOS_G3<=8'h66;
    379             1                      94416        EIEOS<=8'h00;
    380             1                      94416        SDS<=16'h87E1;     // Youssef ///  Gen 5 v
    381             1                      94416        temp1<=temp1_comb;
    382             1                      94416        temp2<=temp2_comb;
    383             1                      94416        temp3<=temp3_comb;
    384             1                      94416        temp4<=temp4_comb;
    385             1                      94416        TS1[7:0]<=8'h1E;
    386                                                 if (link_number==8'b00000000)
    387             1                    ***0***         TS1[15:8] <= 8'hF7;
    388                                              	
    389                                                 else 
    390             1                      94416         TS1[15:8] <= link_number;
    391                                              
    392             1                      94416        TS1[23:16]<=8'b0;
    393             1                      94416        TS1[31:24]<=8'b0;
    394                                              
    395                                                 if ( rate == 3'b001) 
    396             1                    ***0***          TS1[38:32] <= 7'b0000010;
    397                                              	
    398                                                 /*else if ( rate == 3'b010) 
    399                                                   TS1[38:32] <= 7'b0000110;
    400                                              	 
    401                                                 else if ( rate == 3'b011) 
    402                                                   TS1[38:32] <= 7'b0001110;
    403                                              	 
    404                                                 else if ( rate == 3'b100) 
    405                                                   TS1[38:32] <= 7'b0011110;*/
    406                                              	 
    407                                                 else  
    408             1                      94416          TS1[38:32] <= 7'b0111110;
    409                                              
    410             1                      94416        TS1[39]<=speed_change; 
    411                                              
    412                                                 if(loopback)
    413             1                      94416          TS1[47:40] <= 8'b00000100;
    414                                              	 
    415                                                 else
    416             1                    ***0***          TS1[47:40] <= 8'b00000000;
    417                                              
    418             1                      94416        TS1[55:48]<=8'h4A;
    419                                                 
    420             1                      94416        TS2[7:0]<=8'h2D;
    421                                                 if (link_number==8'b00000000)
    422             1                    ***0***         TS2[15:8] <= 8'hF7;
    423                                              	
    424                                                 else 
    425             1                      94416         TS2[15:8] <= link_number;
    426             1                      94416        TS2[23:16]<=8'b0;
    427             1                      94416        TS2[31:24]<=8'b0;
    428                                                 if ( rate == 3'b001) 
    429             1                    ***0***          TS2[38:32] <= 7'b0000010;
    430                                              	
    431                                                 /*else if ( rate == 3'b010) 
    432                                                   TS2[38:32] <= 7'b0000110;
    433                                              	 
    434                                                 else if ( rate == 3'b011) 
    435                                                   TS2[38:32] <= 7'b0001110;
    436                                              	 
    437                                                 else if ( rate == 3'b100) 
    438                                                   TS2[38:32] <= 7'b0011110;*/
    439                                              	 
    440                                                 else  
    441             1                      94416          TS2[38:32] <= 7'b0111110;
    442             1                      94416        TS2[39]<=speed_change;   
    443                                                 if(loopback)
    444             1                      94416          TS2[47:40] <= 8'b00000100;
    445                                              	 
    446                                                 else
    447             1                    ***0***          TS2[47:40] <= 8'b00000000; 
    448                                                   
    449             1                      94416        TS2[54:48]<=7'b0;
    450             1                      94416        TS2[55]<=req_eq;
    451             1                      94416        TS2[63:56]<=8'h45;
    452                                                 end  
    453                                                end
    454                                                //************************************************GENERATION 1&2*********************************************************************************************
    455                                                // *******************************************pipewidth=8************************************************************************
    456                                                 if (PIPE==6'b001000 && (gen_reg==3'b001||gen_reg==3'b010))begin
    457                                              	/*if(send)begin//if there are order sets available to be sent
    458                                              	  finish<=1'b0;
    459                                              	  DataValid <= {no_of_lanes{valid}};
    460                                              	  // ******************************************************checking if TS1 order sets to be sent********************************************
    461                                              	  if (os_type_reg==3'b000)begin
    462                                              	    
    463                                              		  if(symbol==4'b0000)begin // checking if symbol 0 is to be sent
    464                                              		    Os_Out <={no_of_lanes{TS1[7:0]}};
    465                                              			DataK <={no_of_lanes{K}};
    466                                              			end
    467                                              			
    468                                              		  else if(symbol==4'b0001) begin // checking if symbol 1 is to be sent
    469                                              		    Os_Out <={no_of_lanes{TS1[15:8]}};
    470                                              			
    471                                              			if (TS1[15:8] == 8'hF7)
    472                                                            DataK <={no_of_lanes{K}};
    473                                              			  
    474                                              	        else 
    475                                              			   DataK <={no_of_lanes{D}};
    476                                              		     
    477                                              			end
    478                                              				
    479                                              		  else if(symbol==4'b0010)begin // checking if symbol 2 is to be sent
    480                                              		     if(lane_number_reg==2'b00)begin 
    481                                              			   if (count==5'b00001)begin
    482                                              			     Os_Out <= 8'hF7;
    483                                              				 DataK <={no_of_lanes{K}};
    484                                              				 end
    485                                              				 
    486                                              			   else if (count==5'b00100)begin
    487                                              			     Os_Out <= 32'hF7F7F7F7;
    488                                              				 DataK <={no_of_lanes{K}};
    489                                              				 end
    490                                              				 
    491                                              			   else if (count==5'b01000)begin
    492                                              			     Os_Out <= 64'hF7F7F7F7F7F7F7F7;
    493                                              				 DataK <={no_of_lanes{K}};
    494                                              				 end
    495                                              				 
    496                                              			  else begin
    497                                              			     Os_Out <= 128'hF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7;
    498                                              				 DataK <={no_of_lanes{K}};
    499                                              				 end
    500                                              			 end
    501                                              			 
    502                                              			 else if(lane_number_reg==2'b01)begin // checking if lanes number are sequential
    503                                              			   if (count==5'b00001)begin
    504                                              			     Os_Out <= 8'h00;
    505                                              				 DataK <={no_of_lanes{D}};
    506                                              				 end
    507                                              				 
    508                                              			   else if (count==5'b00100)begin
    509                                              			     Os_Out <= 32'h03020100;
    510                                              				 DataK <={no_of_lanes{D}};
    511                                              				 end
    512                                              				 
    513                                              			   else if (count==5'b01000)begin
    514                                              			     Os_Out <= 64'h0706050403020100;
    515                                              				 DataK <={no_of_lanes{D}};
    516                                              				 end
    517                                              				 
    518                                              			 else begin
    519                                              			     Os_Out <= 128'h0F0E0D0C0B0A09080706050403020100;
    520                                              				 DataK <= {no_of_lanes{D}};
    521                                              				 end
    522                                              			 end
    523                                              			 
    524                                              			 else begin // checking if lanes number are sequentially reversed
    525                                              			   if (count==5'b00001)begin
    526                                              			     Os_Out <= 8'h01;
    527                                              				 DataK <={no_of_lanes{D}};
    528                                              				 end
    529                                              				 
    530                                              			   else if (count==5'b00100)begin
    531                                              			     Os_Out <= 32'h01020304;
    532                                              				 DataK <={no_of_lanes{D}};
    533                                              				 end
    534                                              				 
    535                                              			   else if (count==5'b01000)begin
    536                                              			     Os_Out <= 64'h0102030405060708;
    537                                              				 DataK <={no_of_lanes{D}};
    538                                              				 end
    539                                              				 
    540                                              			   else begin
    541                                              			     Os_Out <= 128'h0102030405060708090A0B0C0D0E0F10;
    542                                              				 DataK <={no_of_lanes{D}};
    543                                              				 end
    544                                              			 end
    545                                              			end
    546                                              			
    547                                              	       else if(symbol==4'b0011) begin // checking if symbol 3 is to be sent
    548                                              		    Os_Out <={no_of_lanes{TS1[31:24]}};
    549                                              			DataK <={no_of_lanes{D}};
    550                                              			end
    551                                              			
    552                                              		else if(symbol==4'b0100) begin // checking if symbol 4 is to be sent
    553                                              		    Os_Out <={no_of_lanes{TS1[39:32]}};
    554                                              			DataK <={no_of_lanes{D}};
    555                                              			end
    556                                              		
    557                                              	    else if(symbol==4'b0101) begin // checking if symbol 5 is to be sent
    558                                              		    Os_Out <={no_of_lanes{TS1[47:40]}};
    559                                              			DataK <={no_of_lanes{D}};
    560                                              			end
    561                                              			
    562                                              		else if (symbol==4'b0110)begin	// checking if symbol 6 to be sent
    563                                              		       if (count==5'b00001)
    564                                              			     Os_Out <= temp1[7:0];
    565                                              				 
    566                                              		       else if (count==5'b00100)
    567                                              			     Os_Out <= temp1[31:0];
    568                                              				 
    569                                              			   else if (count==5'b01000)
    570                                              			     Os_Out <= temp1[63:0];
    571                                              				 
    572                                              			   else 
    573                                              			     Os_Out<= temp1[127:0];
    574                                              			  DataK <={no_of_lanes{D}};
    575                                              			end
    576                                              		     
    577                                              			
    578                                              		else if(symbol==4'b0111||symbol==4'b1000||symbol==4'b1001||symbol==4'b1010||symbol==4'b1011||symbol==4'b1100||symbol==4'b1101||symbol==4'b1110) begin // checking if symbol  7 or 8 or 9 or 10 or 11 or 12 or 13 or 14  is to be sent
    579                                              		    Os_Out <={no_of_lanes{TS1[63:56]}};
    580                                              			DataK <={no_of_lanes{D}};
    581                                              			end
    582                                              
    583                                              
    584                                              		
    585                                              		else  begin
    586                                              		    Os_Out <={no_of_lanes{TS1[127:120]}};// checking if symbol 15 is to be sent
    587                                              			DataK <={no_of_lanes{D}};
    588                                              			send <=1'b0;
    589                                              			finish <=1'b1;
    590                                              			busy <=1'b0;
    591                                              		    end
    592                                              			 symbol<=symbol+1; 
    593                                              	  end 
    594                                              		 
    595                                              		  // ******************************************************checking if TS2 order sets to be sent********************************************
    596                                                    else if (os_type_reg==3'b001)begin
    597                                              		
    598                                              		  if(symbol==4'b0000)begin // checking if symbol 0 is to be sent
    599                                              		    Os_Out <={no_of_lanes{TS2[7:0]}};
    600                                              			DataK <={no_of_lanes{K}};
    601                                              			end
    602                                              			
    603                                              		  else if(symbol==4'b0001) begin // checking if symbol 1 is to be sent
    604                                              		    Os_Out <={no_of_lanes{TS2[15:8]}};
    605                                              			
    606                                              			if (TS2[15:8] == 8'hF7)
    607                                                            DataK <={no_of_lanes{K}};
    608                                              			  
    609                                              	        else 
    610                                              			   DataK <={no_of_lanes{D}};
    611                                              			
    612                                              			end
    613                                              				
    614                                              		  else if(symbol==4'b0010)begin // checking if symbol 2 is to be sent
    615                                              		     if(lane_number_reg==2'b00)begin 
    616                                              			   if (count==5'b00001)begin
    617                                              			     Os_Out <= 8'hF7;
    618                                              				 DataK <={no_of_lanes{K}};
    619                                              				 end
    620                                              				 
    621                                              			   else if (count==5'b00100)begin
    622                                              			     Os_Out <= 32'hF7F7F7F7;
    623                                              				 DataK <={no_of_lanes{K}};
    624                                              				 end
    625                                              				 
    626                                              			   else if (count==5'b01000)begin
    627                                              			     Os_Out <= 64'hF7F7F7F7F7F7F7F7;
    628                                              				 DataK <={no_of_lanes{K}};
    629                                              				 end
    630                                              				 
    631                                              			  else begin
    632                                              			     Os_Out <= 128'hF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7;
    633                                              				 DataK <={no_of_lanes{K}};
    634                                              				 end
    635                                              			 end
    636                                              			 
    637                                              			 else if(lane_number_reg==2'b01)begin // checking if lanes number are sequential
    638                                              			   if (count==5'b00001)begin
    639                                              			     Os_Out <= 8'h00;
    640                                              				 DataK <={no_of_lanes{D}};
    641                                              				 end
    642                                              				 
    643                                              			   else if (count==5'b00100)begin
    644                                              			     Os_Out <= 32'h03020100;
    645                                              				 DataK <={no_of_lanes{D}};
    646                                              				 end
    647                                              				 
    648                                              			   else if (count==5'b01000)begin
    649                                              			     Os_Out <= 64'h0706050403020100;
    650                                              				 DataK <={no_of_lanes{D}};
    651                                              				 end
    652                                              				 
    653                                              			 else begin
    654                                              			     Os_Out <= 128'h0F0E0D0C0B0A09080706050403020100;
    655                                              				 DataK <={no_of_lanes{D}};
    656                                              			  end
    657                                              			 end
    658                                              			 
    659                                              			 else begin // checking if lanes number are sequentially reversed
    660                                              			   if (count==5'b00001)begin
    661                                              			     Os_Out <= 8'h01;
    662                                              				 DataK <={no_of_lanes{D}};
    663                                              				 end
    664                                              				 
    665                                              			   else if (count==5'b00100)begin
    666                                              			     Os_Out <= 32'h01020304;
    667                                              				 DataK <={no_of_lanes{D}};
    668                                              				 end
    669                                              				 
    670                                              			   else if (count==5'b01000)begin
    671                                              			     Os_Out <= 64'h0102030405060708;
    672                                              				 DataK <={no_of_lanes{D}};
    673                                              				 end
    674                                              				 
    675                                              			   else begin
    676                                              			     Os_Out <= 128'h0102030405060708090A0B0C0D0E0F10;
    677                                              				 DataK <={no_of_lanes{D}};
    678                                              				 end
    679                                              			 end
    680                                              			end
    681                                              			
    682                                              	       else if(symbol==4'b0011) begin // checking if symbol 3 is to be sent
    683                                              		    Os_Out <={no_of_lanes{TS2[31:24]}};
    684                                              			DataK <={no_of_lanes{D}};
    685                                              			end
    686                                              			
    687                                              		else if(symbol==4'b0100) begin // checking if symbol 4 is to be sent
    688                                              		    Os_Out <={no_of_lanes{TS2[39:32]}};
    689                                              			DataK <={no_of_lanes{D}};
    690                                              			end
    691                                              		
    692                                              	    else if(symbol==4'b0101) begin // checking if symbol 5 is to be sent
    693                                              		    Os_Out<={no_of_lanes{TS2[47:40]}};
    694                                              			DataK <={no_of_lanes{D}};
    695                                              			end
    696                                              			
    697                                              		else if(symbol==4'b0110) begin // checking if symbol 6 is to be sent
    698                                              		       if (count==5'b00001)
    699                                              			     Os_Out <= temp2[7:0];
    700                                              				 
    701                                              		       else if (count==5'b00100)
    702                                              			     Os_Out <= temp2[31:0];
    703                                              				 
    704                                              			   else if (count==5'b01000)
    705                                              			     Os_Out <= temp2[63:0];
    706                                              				 
    707                                              			   else 
    708                                              			     Os_Out<= temp2[127:0];
    709                                              			  DataK <={no_of_lanes{D}};
    710                                              			end
    711                                              			
    712                                              		else if(symbol==4'b0111||symbol==4'b1000||symbol==4'b1001||symbol==4'b1010||symbol==4'b1011||symbol==4'b1100||symbol==4'b1101||symbol==4'b1110) begin // checking if symbol  7 or 8 or 9 or 10 or 11 or 12 or 13 or 14  is to be sent
    713                                              		    Os_Out <={no_of_lanes{TS2[63:56]}};
    714                                              			DataK <={no_of_lanes{D}};
    715                                              			end
    716                                              			
    717                                              		else  begin // checking if symbol 15 is to be sent
    718                                              		    Os_Out<={no_of_lanes{TS2[127:120]}};
    719                                              			DataK<={no_of_lanes{D}};
    720                                              			send<=1'b0;
    721                                              			finish<=1'b1;
    722                                              			busy<=1'b0;
    723                                              		    end
    724                                              			 symbol<=symbol+1; 
    725                                              		  end 
    726                                              		   // ******************************************************checking if skip order sets to be sent********************************************
    727                                                    else if (os_type_reg==3'b010)begin
    728                                              		
    729                                              		  if(symbol==4'b0000)begin // checking if symbol 0 is to be sent
    730                                              		    Os_Out<={no_of_lanes{skp[7:0]}};
    731                                              			DataK<={no_of_lanes{K}};
    732                                              			end
    733                                              			
    734                                              		  else if(symbol==4'b0001) begin // checking if symbol 1 is to be sent
    735                                              		    Os_Out<={no_of_lanes{skp[15:8]}};
    736                                              			DataK<={no_of_lanes{K}};
    737                                              			end
    738                                              			
    739                                              			else if(symbol==4'b0010) begin // checking if symbol 1 is to be sent
    740                                              		    Os_Out<={no_of_lanes{skp[23:16]}};
    741                                              			DataK<={no_of_lanes{K}};
    742                                              			end
    743                                              			
    744                                              			else if(symbol==4'b0011) begin // checking if symbol 1 is to be sent
    745                                              		    Os_Out<={no_of_lanes{skp[31:24]}};
    746                                              			DataK<={no_of_lanes{K}};
    747                                              			send <=1'b0;
    748                                              			finish<=1'b1;
    749                                              			busy<=1'b0;
    750                                              			end
    751                                              			symbol<=symbol+1; 
    752                                              		  end 
    753                                              		  // ******************************************************checking if EIOS order sets to be sent********************************************
    754                                                    else if (os_type_reg==3'b011) begin
    755                                              		
    756                                              		  if(symbol==4'b0000)begin // checking if symbol 0 is to be sent
    757                                              		    Os_Out<={no_of_lanes{EIOS[7:0]}};
    758                                              			DataK<={no_of_lanes{K}};
    759                                              			end
    760                                              			
    761                                              		  else if(symbol==4'b0001) begin // checking if symbol 1 is to be sent
    762                                              		    Os_Out<={no_of_lanes{EIOS[15:8]}};
    763                                              			DataK<={no_of_lanes{K}};
    764                                              			end
    765                                              			
    766                                              			else if(symbol==4'b0010) begin // checking if symbol 1 is to be sent
    767                                              		    Os_Out<={no_of_lanes{EIOS[23:16]}};
    768                                              			DataK<={no_of_lanes{K}};
    769                                              			end
    770                                              			
    771                                              			else if(symbol==4'b0011) begin // checking if symbol 1 is to be sent
    772                                              		    Os_Out<={no_of_lanes{EIOS[31:24]}};
    773                                              			DataK<={no_of_lanes{K}};
    774                                              			send<=1'b0;
    775                                              			finish<=1'b1;
    776                                              			busy<=1'b0;
    777                                              			end
    778                                              			symbol<=symbol+1; 
    779                                              		end
    780                                              		   // ******************************************************checking if IDLE to be sent********************************************
    781                                              		else begin
    782                                              		   if (symbol!=4'b1111) begin
    783                                              		    Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{1'b0}};
    784                                              		    DataK<= {no_of_lanes{1'b0}};
    785                                              		    end
    786                                              		  else begin
    787                                              		    Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{1'b0}};
    788                                              		    DataK<= {no_of_lanes{1'b0}};
    789                                              		    send<=1'b0;
    790                                              		    finish<=1'b1;
    791                                              		    busy<= 1'b0;
    792                                              		  end
    793                                              		  symbol<=symbol+1;
    794                                              		  end
    795                                              		end
    796                                              		else begin  //if there are no order sets available to be sent
    797                                              		  DataValid <= {((GEN1_PIPEWIDTH/8)*no_of_lanes){not_valid}};
    798                                              		  Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{not_valid}};
    799                                              		  DataK<= {((GEN1_PIPEWIDTH/8)*no_of_lanes){not_valid}};
    800                                              		  finish<=1'b0;
    801                                              		  //busy<= 1'b0;
    802                                              		 end
    803                                              		end
    804                                              	// *******************************************pipewidth=16************************************************************************
    805                                              	else if(PIPE==6'b010000 && (gen_reg==3'b001||gen_reg==3'b010))begin
    806                                              	  if(send)begin
    807                                              	   finish<=1'b0;
    808                                              	   DataValid <= {{no_of_lanes{valid}},{no_of_lanes{valid}}};
    809                                                     //*****************************************checking if TS1 order sets to be sent*******************************************
    810                                              	     if (os_type_reg==3'b000)begin
    811                                              		
    812                                              		  if(symbol==4'b0000)begin // checking if symbols 0,1 are to be sent
    813                                              		    Os_Out <={{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    814                                              			if (TS1[15:8] == 8'hF7)
    815                                                            DataK <={{no_of_lanes{K}},{no_of_lanes{K}}};  
    816                                              	        else 
    817                                              			  DataK <={{no_of_lanes{D}},{no_of_lanes{K}}};
    818                                              			end
    819                                              				
    820                                              		  else if(symbol==4'b0010)begin // checking if symbols 2,3 are to be sent
    821                                              		     if(lane_number_reg==2'b00)begin 
    822                                              			   if (count==5'b00001)begin
    823                                              			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{8'hF7}};
    824                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{K}}};
    825                                              				 end
    826                                              				 
    827                                              			   else if (count==5'b00100)begin
    828                                              			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{32'hF7F7F7F7}};
    829                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{K}}};
    830                                              				 end
    831                                              				 
    832                                              			   else if (count==5'b01000)begin
    833                                              			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{64'hF7F7F7F7F7F7F7F7}};
    834                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{K}}};
    835                                              				 end
    836                                              				 
    837                                              			  else begin
    838                                              			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{128'hF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7}};
    839                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{K}}};
    840                                              				 end
    841                                              			 end
    842                                              			 
    843                                              			 else if(lane_number_reg==2'b01)begin // checking if lanes number are sequential
    844                                              			   if (count==5'b00001)begin
    845                                              			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{8'h00}};
    846                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    847                                              				 end
    848                                              				 
    849                                              			   else if (count==5'b00100)begin
    850                                              			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{32'h03020100}};
    851                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    852                                              				 end
    853                                              				 
    854                                              			   else if (count==5'b01000)begin
    855                                              			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{64'h0706050403020100}};
    856                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    857                                              				 end
    858                                              				 
    859                                              			 else begin
    860                                              			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{128'h0F0E0D0C0B0A09080706050403020100}};
    861                                              				 DataK <= {{no_of_lanes{D}},{no_of_lanes{D}}};
    862                                              				 end
    863                                              			 end
    864                                              			 
    865                                              			 else begin // checking if lanes number are sequentially reversed
    866                                              			   if (count==5'b00001)begin
    867                                              			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{8'h01}};
    868                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    869                                              				 end
    870                                              				 
    871                                              			   else if (count==5'b00100)begin
    872                                              			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{32'h01020304}};
    873                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    874                                              				 end
    875                                              				 
    876                                              			   else if (count==5'b01000)begin
    877                                              			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{64'h0102030405060708}};
    878                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    879                                              				 end
    880                                              				 
    881                                              			   else begin
    882                                              			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{128'h0102030405060708090A0B0C0D0E0F10}};
    883                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    884                                              				 end
    885                                              			 end
    886                                              			end
    887                                              			
    888                                              			
    889                                              		else if(symbol==4'b0100) begin // checking if symbols 4,5 are to be sent
    890                                              		    Os_Out <={{no_of_lanes{TS1[47:40]}},{no_of_lanes{TS1[39:32]}}};
    891                                              			DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    892                                              			end
    893                                              			
    894                                              		else if (symbol==4'b0110) begin //checking if symbols 6,7 are to be sent
    895                                              			   if (count==5'b00001)
    896                                              			     Os_Out <= {{no_of_lanes{TS1[63:56]}},{temp1[7:0]}};
    897                                              				 
    898                                              		       else if (count==5'b00100)
    899                                              			     Os_Out <= {{no_of_lanes{TS1[63:56]}},{temp1[31:0]}};
    900                                              				 
    901                                              			   else if (count==5'b01000)
    902                                              			     Os_Out <= {{no_of_lanes{TS1[63:56]}},{temp1[63:0]}};
    903                                              				 
    904                                              			   else 
    905                                              			     Os_Out<= {{no_of_lanes{TS1[63:56]}},{temp1[127:0]}};
    906                                              			  DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    907                                              			 end
    908                                              			  
    909                                              		else if(symbol==4'b1000||symbol==4'b1010||symbol==4'b1100) begin // checking if symbols 8,9 or 10,11 or 12,13 are to be sent
    910                                              		    Os_Out <={{no_of_lanes{TS1[63:56]}},{no_of_lanes{TS1[63:56]}}};
    911                                              			DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    912                                              			end
    913                                              			
    914                                              		else  begin
    915                                              		    Os_Out <={{no_of_lanes{TS1[63:56]}},{no_of_lanes{TS1[63:56]}}};// checking if symbols 14,15 are to be sent
    916                                              			DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    917                                              			send <=1'b0;
    918                                              			finish <=1'b1;
    919                                              			busy <=1'b0;
    920                                              		    end
    921                                              			 symbol<=symbol+2; 
    922                                              		  end 
    923                                              		  //*****************************************checking if TS2 order sets to be sent*******************************************
    924                                              	     else if (os_type_reg==3'b001)begin
    925                                              		
    926                                              		  if(symbol==4'b0000)begin // checking if symbols 0,1 are to be sent
    927                                              		    Os_Out <={{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    928                                              			if (TS1[15:8] == 8'hF7)
    929                                                            DataK <={{no_of_lanes{K}},{no_of_lanes{K}}};  
    930                                              	        else 
    931                                              			  DataK <={{no_of_lanes{D}},{no_of_lanes{K}}};
    932                                              			end
    933                                              				
    934                                              		  else if(symbol==4'b0010)begin // checking if symbols 2,3 are to be sent
    935                                              		     if(lane_number_reg==2'b00)begin 
    936                                              			   if (count==5'b00001)begin
    937                                              			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{8'hF7}};
    938                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{K}}};
    939                                              				 end
    940                                              				 
    941                                              			   else if (count==5'b00100)begin
    942                                              			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{32'hF7F7F7F7}};
    943                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{K}}};
    944                                              				 end
    945                                              				 
    946                                              			   else if (count==5'b01000)begin
    947                                              			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{64'hF7F7F7F7F7F7F7F7}};
    948                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{K}}};
    949                                              				 end
    950                                              				 
    951                                              			  else begin
    952                                              			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{128'hF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7}};
    953                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{K}}};
    954                                              				 end
    955                                              			 end
    956                                              			 
    957                                              			 else if(lane_number_reg==2'b01)begin // checking if lanes number are sequential
    958                                              			   if (count==5'b00001)begin
    959                                              			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{8'h00}};
    960                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    961                                              				 end
    962                                              				 
    963                                              			   else if (count==5'b00100)begin
    964                                              			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{32'h03020100}};
    965                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    966                                              				 end
    967                                              				 
    968                                              			   else if (count==5'b01000)begin
    969                                              			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{64'h0706050403020100}};
    970                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    971                                              				 end
    972                                              				 
    973                                              			 else begin
    974                                              			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{128'h0F0E0D0C0B0A09080706050403020100}};
    975                                              				 DataK <= {{no_of_lanes{D}},{no_of_lanes{D}}};
    976                                              				 end
    977                                              			 end
    978                                              			 
    979                                              			 else begin // checking if lanes number are sequentially reversed
    980                                              			   if (count==5'b00001)begin
    981                                              			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{8'h01}};
    982                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    983                                              				 end
    984                                              				 
    985                                              			   else if (count==5'b00100)begin
    986                                              			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{32'h01020304}};
    987                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    988                                              				 end
    989                                              				 
    990                                              			   else if (count==5'b01000)begin
    991                                              			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{64'h0102030405060708}};
    992                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    993                                              				 end
    994                                              				 
    995                                              			   else begin
    996                                              			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{128'h0102030405060708090A0B0C0D0E0F10}};
    997                                              				 DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    998                                              				 end
    999                                              			 end
    1000                                             			end
    1001                                             			
    1002                                             			
    1003                                             		else if(symbol==4'b0100) begin // checking if symbols 4,5 are to be sent
    1004                                             		    Os_Out <={{no_of_lanes{TS2[47:40]}},{no_of_lanes{TS2[39:32]}}};
    1005                                             			DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    1006                                             			end
    1007                                             			
    1008                                             		else if(symbol==4'b0110) begin // checking if symbols 6,7 are to be sent
    1009                                             		       if (count==5'b00001)
    1010                                             			     Os_Out <= {{no_of_lanes{TS2[63:56]}},{temp2[7:0]}};
    1011                                             				 
    1012                                             		       else if (count==5'b00100)
    1013                                             			     Os_Out <= {{no_of_lanes{TS2[63:56]}},{temp2[31:0]}};
    1014                                             				 
    1015                                             			   else if (count==5'b01000)
    1016                                             			     Os_Out <= {{no_of_lanes{TS2[63:56]}},{temp2[63:0]}};
    1017                                             				 
    1018                                             			   else 
    1019                                             			     Os_Out<= {{no_of_lanes{TS2[63:56]}},{temp2[127:0]}};
    1020                                             			  DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    1021                                             			end
    1022                                             			
    1023                                             		else if(symbol==4'b1000||symbol==4'b1010||symbol==4'b1100) begin // checking if symbols  8,9 or 10,11 or 12,13 are to be sent
    1024                                             		    Os_Out <={{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}}};
    1025                                             			DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    1026                                             			end
    1027                                             			
    1028                                             		else  begin
    1029                                             		    Os_Out <={{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}}};//checking if symbols 14,15 are to be sent
    1030                                             			DataK <={{no_of_lanes{D}},{no_of_lanes{D}}};
    1031                                             			send <=1'b0;
    1032                                             			finish <=1'b1;
    1033                                             			busy <=1'b0;
    1034                                             		    end
    1035                                             			 symbol<=symbol+2; 
    1036                                             		  end 
    1037                                             		  // ******************************************************checking if skip order sets to be sent********************************************
    1038                                                   else if (os_type_reg==3'b010)begin
    1039                                             		
    1040                                             		  if(symbol==4'b0000)begin // checking if symbols 0,1 are to be sent
    1041                                             		    Os_Out<={{no_of_lanes{skp[15:8]}},{no_of_lanes{skp[7:0]}}};
    1042                                             			DataK<={{no_of_lanes{K}},{no_of_lanes{K}}};
    1043                                             			end
    1044                                             			
    1045                                             		 else begin // checking if symbols 2,3 are to be sent
    1046                                             		    Os_Out<={{no_of_lanes{skp[31:24]}},{no_of_lanes{skp[23:16]}}};
    1047                                             			DataK<={{no_of_lanes{K}},{no_of_lanes{K}}};
    1048                                             			send <=1'b0;
    1049                                             			finish<=1'b1;
    1050                                             			busy<=1'b0;
    1051                                             			end
    1052                                             			symbol<=symbol+2; 
    1053                                             		  end 
    1054                                             		  // ******************************************************checking if EIOS order sets to be sent********************************************
    1055                                                   else if (os_type_reg==3'b011) begin
    1056                                             		
    1057                                             		  if(symbol==4'b0000)begin // checking if symbols 0,1 are to be sent
    1058                                             		    Os_Out<={{no_of_lanes{EIOS[15:8]}},{no_of_lanes{EIOS[7:0]}}};
    1059                                             			DataK<={{no_of_lanes{K}},{no_of_lanes{K}}};
    1060                                             			end
    1061                                             			
    1062                                             		  else begin // checking if symbols 2,3 are to be sent
    1063                                             		    Os_Out<={{no_of_lanes{EIOS[31:24]}},{no_of_lanes{EIOS[23:16]}}};
    1064                                             			DataK<={{no_of_lanes{K}},{no_of_lanes{K}}};
    1065                                             			send<=1'b0;
    1066                                             			finish<=1'b1;
    1067                                             			busy<=1'b0;
    1068                                             			end
    1069                                             			symbol<=symbol+2; 
    1070                                             		 end
    1071                                             		 // ******************************************************checking if IDLE to be sent********************************************
    1072                                             		 else begin
    1073                                             		  if (symbol!=4'b1110) begin
    1074                                             		    Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{1'b0}};
    1075                                             		    DataK<= {no_of_lanes{1'b0}};
    1076                                             		    end
    1077                                             		  else begin
    1078                                             		    Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{1'b0}};
    1079                                             		    DataK<= {no_of_lanes{1'b0}};
    1080                                             		    send<=1'b0;
    1081                                             		    finish<=1'b1;
    1082                                             		    busy<= 1'b0;
    1083                                             		  end
    1084                                             		  symbol<=symbol+2;
    1085                                             		  end
    1086                                             		end
    1087                                             		 else begin  //if there are no order sets available to be sent
    1088                                             		  DataValid <= {((GEN1_PIPEWIDTH/8)*no_of_lanes){not_valid}};
    1089                                             		  Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{not_valid}};
    1090                                             		  DataK<= {((GEN1_PIPEWIDTH/8)*no_of_lanes){not_valid}};
    1091                                             		  finish<=1'b0;
    1092                                             		  //busy<= 1'b0;
    1093                                             		 end*/
    1094                                             	  end
    1095                                             	    // *******************************************pipewidth=32************************************************************************
    1096                                             	else if(PIPE==6'b100000 && (gen_reg==3'b001||gen_reg==3'b010)) begin
    1097                                             	  if(send)begin
    1098            1                     279392     	   finish<=1'b0;
    1099            1                     279392     	   DataValid <= {{no_of_lanes{valid}},{no_of_lanes{valid}},{no_of_lanes{valid}},{no_of_lanes{valid}}};
    1100                                                    //*****************************************checking if TS1 order sets to be sent*******************************************
    1101                                             	   if (os_type_reg==3'b000)begin
    1102                                             		
    1103                                             		  if(symbol==4'b0000)begin // checking if symbols 1,2,3,4 are to be sent
    1104                                             		     if(lane_number_reg==2'b00 )begin
    1105                                             			   if (count==5'b00001)begin
    1106            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{8'hF7},{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    1107                                             				 if (TS1[15:8] == 8'hF7)
    1108            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1109                                             	             else 
    1110            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1111                                             			    end
    1112                                             			
    1113                                             				 
    1114                                             			   else if (count==5'b00100)begin
    1115            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{32'hF7F7F7F7},{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    1116                                             				 if (TS1[15:8] == 8'hF7)
    1117            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1118                                             	             else 
    1119            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1120                                             			    end
    1121                                             				
    1122                                             				 
    1123                                             			   else if (count==5'b01000)begin
    1124            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{64'hF7F7F7F7F7F7F7F7},{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    1125                                             				 if (TS1[15:8] == 8'hF7)
    1126            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1127                                             	             else 
    1128            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1129                                             			    end
    1130                                             			 
    1131                                             				 
    1132                                             			  else begin
    1133            1                      36815     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{128'hF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7},{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    1134                                             				 if (TS1[15:8] == 8'hF7)
    1135            1                      34183                        DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1136                                             	             else 
    1137            1                       2632     			       DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1138                                             			    end
    1139                                             			  end
    1140                                             			 
    1141                                             			 else if(lane_number_reg==2'b01)begin // checking if lanes number are sequential
    1142                                             			   if (count==5'b00001)begin
    1143            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{8'h00},{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    1144                                             				 if (TS1[15:8] == 8'hF7)
    1145            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1146                                             	             else 
    1147            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1148                                             			    end
    1149                                             				 
    1150                                             				 
    1151                                             			   else if (count==5'b00100)begin
    1152            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{32'h03020100},{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    1153                                             				  if (TS1[15:8] == 8'hF7)
    1154            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1155                                             	             else 
    1156            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1157                                             			    end
    1158                                             				
    1159                                             				 
    1160                                             			   else if (count==5'b01000)begin
    1161            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{64'h0706050403020100},{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    1162                                             				  if (TS1[15:8] == 8'hF7)
    1163            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1164                                             	             else 
    1165            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1166                                             			     end
    1167                                             				 
    1168                                             			 else begin
    1169            1                       5904     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{128'h0F0E0D0C0B0A09080706050403020100},{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    1170                                             				  if (TS1[15:8] == 8'hF7)
    1171            1                      E-hit                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1172                                             	             else 
    1173            1                       5902     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1174                                             			    end
    1175                                             			 end
    1176                                             			 
    1177                                             			 else begin // checking if lanes number are sequentially reversed
    1178                                             			   if (count==5'b00001)begin
    1179            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{8'h01},{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    1180                                             				 if (TS1[15:8] == 8'hF7)
    1181            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1182                                             	             else 
    1183            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1184                                             			    end
    1185                                             				 
    1186                                             			   else if (count==5'b00100)begin
    1187            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{32'h01020304},{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    1188                                             				 if (TS1[15:8] == 8'hF7)
    1189            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1190                                             	             else 
    1191            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1192                                             			    end
    1193                                             				 
    1194                                             			   else if (count==5'b01000)begin
    1195            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{64'h0102030405060708},{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    1196                                             				 if (TS1[15:8] == 8'hF7)
    1197            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1198                                             	             else 
    1199            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1200                                             			    end
    1201                                             				 
    1202                                             			   else begin
    1203            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},{128'h0102030405060708090A0B0C0D0E0F10},{no_of_lanes{TS1[15:8]}},{no_of_lanes{TS1[7:0]}}};
    1204                                             				 if (TS1[15:8] == 8'hF7)
    1205            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1206                                             	             else 
    1207            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1208                                             			    end
    1209                                             			 end
    1210                                             			end
    1211                                             			
    1212                                             			
    1213                                             		else if(symbol==4'b0100) begin // checking if symbols 4,5,6,7 are to be sent
    1214                                             		
    1215                                             		       if (count==5'b00001)
    1216            1                          E     			     Os_Out <= {{no_of_lanes{TS1[63:56]}},{temp1[7:0]},{no_of_lanes{TS1[47:40]}},{no_of_lanes{TS1[39:32]}}};
    1217                                             				 
    1218                                             		       else if (count==5'b00100)
    1219            1                          E     			     Os_Out <= {{no_of_lanes{TS1[63:56]}},{temp1[31:0]},{no_of_lanes{TS1[47:40]}},{no_of_lanes{TS1[39:32]}}};
    1220                                             				 
    1221                                             			   else if (count==5'b01000)
    1222            1                          E     			     Os_Out <= {{no_of_lanes{TS1[63:56]}},{temp1[63:0]},{no_of_lanes{TS1[47:40]}},{no_of_lanes{TS1[39:32]}}};
    1223                                             				 
    1224                                             			   else 
    1225            1                      42719     			     Os_Out<= {{no_of_lanes{TS1[63:56]}},{temp1[127:0]},{no_of_lanes{TS1[47:40]}},{no_of_lanes{TS1[39:32]}}};
    1226            1                      42719     		    DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}}};
    1227                                             			end
    1228                                             		
    1229                                             			
    1230                                             		else if(symbol==4'b1000) begin // checking if symbols 8,9,10,11  are to be sent
    1231            1                      42719     		    Os_Out <={{no_of_lanes{TS1[63:56]}},{no_of_lanes{TS1[63:56]}},{no_of_lanes{TS1[63:56]}},{no_of_lanes{TS1[63:56]}}};
    1232            1                      42719     			DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}}};
    1233                                             			end
    1234                                             			
    1235                                             		else  begin // checking if symbols 12,13,14,15 are sent
    1236            1                      42719     		    Os_Out <={{no_of_lanes{TS1[63:56]}},{no_of_lanes{TS1[63:56]}},{no_of_lanes{TS1[63:56]}},{no_of_lanes{TS1[63:56]}}};
    1237            1                      42719     			DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}}};
    1238            1                      42719     			send <=1'b0;
    1239            1                      42719     			finish <=1'b1;
    1240            1                      42719     			busy <=1'b0;
    1241                                             		    end
    1242            1                     170876     			 symbol<=symbol+4; 
    1243                                             		  end 
    1244                                             			//*****************************************checking if TS2 order sets to be sent*******************************************
    1245                                             	    else if (os_type_reg==3'b001)begin
    1246                                             		
    1247                                             		  if(symbol==4'b0000)begin // checking if symbols 1,2,3,4 are to be sent
    1248                                             		     if(lane_number_reg==2'b00 )begin
    1249                                             			   if (count==5'b00001)begin
    1250            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{8'hF7},{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1251                                             				 if (TS2[15:8] == 8'hF7)
    1252            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1253                                             	             else 
    1254            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1255                                             			    end
    1256                                             			
    1257                                             				 
    1258                                             			   else if (count==00100)begin
    1259            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{32'hF7F7F7F7},{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1260                                             				 if (TS2[15:8] == 8'hF7)
    1261            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1262                                             	             else 
    1263            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1264                                             			    end
    1265                                             				
    1266                                             				 
    1267                                             			   else if (count==01000)begin
    1268            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{64'hF7F7F7F7F7F7F7F7},{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1269                                             				 if (TS2[15:8] == 8'hF7)
    1270            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1271                                             	             else 
    1272            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1273                                             			    end
    1274                                             			 
    1275                                             				 
    1276                                             			  else begin
    1277            1                      10430     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{128'hF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7},{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1278                                             				 if (TS2[15:8] == 8'hF7)
    1279            1                      10430                        DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1280                                             	             else 
    1281            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1282                                             			    end
    1283                                             			  end
    1284                                             			 
    1285                                             			 else if(lane_number_reg==2'b01)begin // checking if lanes number are sequential
    1286                                             			   if (count==5'b00001)begin
    1287            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{8'h00},{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1288                                             				 if (TS2[15:8] == 8'hF7)
    1289            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1290                                             	             else 
    1291            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1292                                             			    end
    1293                                             				 
    1294                                             				 
    1295                                             			   else if (count==5'b00100)begin
    1296            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{32'h03020100},{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1297                                             				  if (TS2[15:8] == 8'hF7)
    1298            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1299                                             	             else 
    1300            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1301                                             			    end
    1302                                             				
    1303                                             				 
    1304                                             			   else if (count==5'b01000)begin
    1305            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{64'h0706050403020100},{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1306                                             				  if (TS2[15:8] == 8'hF7)
    1307            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1308                                             	             else 
    1309            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1310                                             			     end
    1311                                             				 
    1312                                             			 else begin
    1313            1                      11190     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{128'h0F0E0D0C0B0A09080706050403020100},{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1314                                             				  if (TS2[15:8] == 8'hF7)
    1315            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1316                                             	             else 
    1317            1                      11190     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1318                                             			    end
    1319                                             			 end
    1320                                             			 
    1321                                             			 else begin // checking if lanes number are sequentially reversed
    1322                                             			   if (count==5'b00001)begin
    1323            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{8'h01},{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1324                                             				 if (TS2[15:8] == 8'hF7)
    1325            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1326                                             	             else 
    1327            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1328                                             			    end
    1329                                             				 
    1330                                             			   else if (count==5'b00100)begin
    1331            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{32'h01020304},{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1332                                             				 if (TS2[15:8] == 8'hF7)
    1333            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1334                                             	             else 
    1335            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1336                                             			    end
    1337                                             				 
    1338                                             			   else if (count==5'b01000)begin
    1339            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{64'h0102030405060708},{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1340                                             				 if (TS2[15:8] == 8'hF7)
    1341            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1342                                             	             else 
    1343            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1344                                             			    end
    1345                                             				 
    1346                                             			   else begin
    1347            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},{128'h0102030405060708090A0B0C0D0E0F10},{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1348                                             				 if (TS2[15:8] == 8'hF7)
    1349            1                          E                        DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}},{no_of_lanes{K}}};  
    1350                                             	             else 
    1351            1                          E     			       DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{K}}};
    1352                                             			    end
    1353                                             			 end
    1354                                             			end	
    1355                                             			
    1356                                             		else if(symbol==4'b0100) begin // checking if symbols 4,5,6,7 are to be sent
    1357                                             		      if (count==5'b00001)
    1358            1                          E     			     Os_Out <= {{no_of_lanes{TS2[63:56]}},{temp2[7:0]},{no_of_lanes{TS2[47:40]}},{no_of_lanes{TS2[39:32]}}};
    1359                                             				 
    1360                                             		       else if (count==5'b00100)
    1361            1                          E     			     Os_Out <= {{no_of_lanes{TS2[63:56]}},{temp2[31:0]},{no_of_lanes{TS2[47:40]}},{no_of_lanes{TS2[39:32]}}};
    1362                                             				 
    1363                                             			   else if (count==5'b01000)
    1364            1                          E     			     Os_Out <= {{no_of_lanes{TS2[63:56]}},{temp2[63:0]},{no_of_lanes{TS2[47:40]}},{no_of_lanes{TS2[39:32]}}};
    1365                                             				 
    1366                                             			   else 
    1367            1                      21620     			     Os_Out<= {{no_of_lanes{TS2[63:56]}},{temp2[127:0]},{no_of_lanes{TS2[47:40]}},{no_of_lanes{TS2[39:32]}}};
    1368            1                      21620     			DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}}};
    1369                                             			end
    1370                                             		
    1371                                             			
    1372                                             		else if(symbol==4'b1000) begin // checking if symbols 8,9,10,11 are to be sent
    1373            1                      21620     		    Os_Out <={{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}}};
    1374            1                      21620     			DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}}};
    1375                                             			end
    1376                                             			
    1377                                             		else  begin //checking if symbols 12,13,14,15 are to be sent
    1378            1                      21620     		    Os_Out <={{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}}};
    1379            1                      21620     			DataK <={{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}},{no_of_lanes{D}}};
    1380            1                      21620     			send <=1'b0;
    1381            1                      21620     			finish <=1'b1;
    1382            1                      21620     			busy <=1'b0;
    1383                                             		    end
    1384            1                      86480     			 symbol<=symbol+4; 
    1385                                             			 
    1386                                             		  end 
    1387                                             		  // ******************************************************checking if skip order sets to be sent********************************************
    1388                                                   else if (os_type_reg==3'b010)begin  
    1389            1                          E     		    Os_Out<={{no_of_lanes{skp[31:24]}},{no_of_lanes{skp[23:16]}},{no_of_lanes{skp[15:8]}},{no_of_lanes{skp[7:0]}}};
    1390            1                          E     			DataK<={{no_of_lanes{K}},{no_of_lanes{K}},{no_of_lanes{K}},{no_of_lanes{K}}};
    1391            1                          E     			send <=1'b0;
    1392            1                          E     			finish<=1'b1;
    1393            1                          E     			busy<=1'b0; 
    1394                                             		  end 
    1395                                             		  // ******************************************************checking if EIOS order sets to be sent********************************************
    1396                                                   else if (os_type_reg==3'b011) begin
    1397            1                      20024     		    Os_Out<={{no_of_lanes{EIOS[31:24]}},{no_of_lanes{EIOS[23:16]}},{no_of_lanes{EIOS[15:8]}},{no_of_lanes{EIOS[7:0]}}};
    1398            1                      20024     			DataK<={{no_of_lanes{K}},{no_of_lanes{K}},{no_of_lanes{K}},{no_of_lanes{K}}};
    1399            1                      20024     			send<=1'b0;
    1400            1                      20024     			finish<=1'b1;
    1401            1                      20024     			busy<=1'b0;
    1402                                             		 end
    1403                                             		 // ******************************************************checking if IDLE to be sent********************************************
    1404                                             		 else begin
    1405                                             		   if (symbol!=4'b1100) begin
    1406            1                       1509     		    Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{1'b0}};
    1407            1                       1509     		    DataK<= {no_of_lanes{1'b0}};
    1408                                             		    end
    1409                                             		  else begin
    1410            1                        503     		    Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{1'b0}};
    1411            1                        503     		    DataK<= {no_of_lanes{1'b0}};
    1412            1                        503     		    send<=1'b0;
    1413            1                        503     		    finish<=1'b1;
    1414            1                        503     		    busy<= 1'b0;
    1415                                             		  end
    1416            1                       2012     		  symbol<=symbol+4;
    1417                                             		end
    1418                                             	  end
    1419                                               else begin  //if there are no order sets available to be sent
    1420            1                     169789     		  DataValid <= {((GEN1_PIPEWIDTH/8)*no_of_lanes){not_valid}};
    1421            1                     169789     		  Os_Out<={GEN1_PIPEWIDTH*no_of_lanes{not_valid}};
    1422            1                     169789     		  DataK<= {((GEN1_PIPEWIDTH/8)*no_of_lanes){not_valid}};
    1423            1                     169789     		  finish<=1'b0;
    1424                                             		  //busy<= 1'b0;
    1425                                             		 end
    1426                                             	  end
    1427                                             	 
    1428                                             //*************************************************************GENERATION 3&4&5*************************************************************		 
    1429                                             //*************************************************************pipewidth=8********************************************************** 
    1430                                              else if (PIPE==6'b001000 && (gen_reg==3'b011 || gen_reg==3'b100 || gen_reg==3'b101))begin
    1431                                             	/*if(send)begin//if there are order sets available to be sent
    1432                                             	  finish<=1'b0;
    1433                                             	  DataValid <= {no_of_lanes{valid}};
    1434                                             	  // ******************************************************checking if TS1 order sets to be  sent********************************************
    1435                                             	  if (os_type_reg==3'b000)begin
    1436                                             	    
    1437                                             		  if(symbol==4'b0000) // checking if symbol 0 is to be sent
    1438                                             		    Os_Out <={no_of_lanes{TS1[7:0]}};
    1439                                             			
    1440                                             		  else if(symbol==4'b0001)  // checking if symbol 1 is to be sent
    1441                                             		    Os_Out <={no_of_lanes{TS1[15:8]}};
    1442                                             				
    1443                                             		  else if(symbol==4'b0010)begin // checking if symbol 2 is to be sent
    1444                                             		     if(lane_number_reg==2'b00)begin 
    1445                                             			   if (count==5'b00001)
    1446                                             			     Os_Out <= 8'hF7;
    1447                                             				 
    1448                                             			   else if (count==5'b00100)
    1449                                             			     Os_Out <= 32'hF7F7F7F7;
    1450                                             				 
    1451                                             			   else if (count==5'b01000)
    1452                                             			     Os_Out <= 64'hF7F7F7F7F7F7F7F7;
    1453                                             				 
    1454                                             			   else 
    1455                                             			     Os_Out <= 128'hF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7;
    1456                                             			 end
    1457                                             			 
    1458                                             			 else begin // checking if lanes number are sequential
    1459                                             			   if (count==5'b00001)
    1460                                             			     Os_Out <= 8'h00;
    1461                                             				
    1462                                             			   else if (count==5'b00100)
    1463                                             			     Os_Out <= 32'h03020100;
    1464                                             				 
    1465                                             			   else if (count==5'b01000)
    1466                                             			     Os_Out <= 64'h0706050403020100;
    1467                                             				 
    1468                                             			   else 
    1469                                             			     Os_Out <= 128'h0F0E0D0C0B0A09080706050403020100;
    1470                                             			 end			 
    1471                                             			end
    1472                                             			
    1473                                             	       else if(symbol==4'b0011)  // checking if symbol 3 is to be sent
    1474                                             		    Os_Out <={no_of_lanes{TS1[31:24]}};
    1475                                             			
    1476                                             		  else if(symbol==4'b0100)  // checking if symbol 4 is to be sent
    1477                                             		    Os_Out <={no_of_lanes{TS1[39:32]}};
    1478                                             			
    1479                                             		  else if(symbol==4'b0101)  // checking if symbol 5 is to be sent
    1480                                             		    Os_Out <={no_of_lanes{TS1[47:40]}};
    1481                                             		
    1482                                             		  else if (symbol==4'b0110) begin //checking if symbol 6 is to be sent
    1483                                             		       if (count==5'b00001)
    1484                                             			     Os_Out <= temp1[7:0];
    1485                                             				 
    1486                                             		       else if (count==5'b00100)
    1487                                             			     Os_Out <= temp1[31:0];
    1488                                             				 
    1489                                             			   else if (count==5'b01000)
    1490                                             			     Os_Out <= temp1[63:0];
    1491                                             				 
    1492                                             			   else 
    1493                                             			     Os_Out <= temp1[127:0];
    1494                                             		  end
    1495                                             		  
    1496                                             		  else if (symbol==4'b0111) begin //checking if symbol 7 is to be sent
    1497                                             		       if (count==5'b00001)
    1498                                             			     Os_Out <= temp2[7:0];
    1499                                             				 
    1500                                             		       else if (count==5'b00100)
    1501                                             			     Os_Out <= temp2[31:0];
    1502                                             				 
    1503                                             			   else if (count==5'b01000)
    1504                                             			     Os_Out <= temp2[63:0];
    1505                                             				 
    1506                                             			   else 
    1507                                             			     Os_Out <= temp2[127:0];
    1508                                             		  end
    1509                                             		  
    1510                                             		  else if (symbol==4'b1000) begin //checking if symbol 8 is to be sent
    1511                                             		       if (count==5'b00001)
    1512                                             			     Os_Out <= temp3[7:0];
    1513                                             				 
    1514                                             		       else if (count==5'b00100)
    1515                                             			     Os_Out <= temp3[31:0];
    1516                                             				 
    1517                                             			   else if (count==5'b01000)
    1518                                             			     Os_Out <= temp3[63:0];
    1519                                             				 
    1520                                             			   else 
    1521                                             			     Os_Out <= temp3[127:0];
    1522                                             		  end
    1523                                             		  
    1524                                             		  else if (symbol==4'b1001) begin //checking if symbol 9 is to be sent
    1525                                             		       if (count==5'b00001)
    1526                                             			     Os_Out <= temp4[7:0];
    1527                                             				 
    1528                                             		       else if (count==5'b00100)
    1529                                             			     Os_Out <= temp4[31:0];
    1530                                             				 
    1531                                             			   else if (count==5'b01000)
    1532                                             			     Os_Out <= temp4[63:0];
    1533                                             				 
    1534                                             			   else 
    1535                                             			     Os_Out <= temp4[127:0];
    1536                                             		  end
    1537                                             		  
    1538                                             		  else if (symbol==4'b1010 || symbol==4'b1011 || symbol==4'b1100 || symbol==4'b1101 || symbol==4'b1110)// checking if symbols 10 or 11 or 12 or 13 or 14 is sent
    1539                                             		  Os_Out<={no_of_lanes{TS1[55:48]}};
    1540                                             			
    1541                                             		  else  begin
    1542                                             		    Os_Out <={no_of_lanes{TS1[55:48]}};// checking if symbol 15 is to be sent
    1543                                             			send <=1'b0;
    1544                                             			finish <=1'b1;
    1545                                             			busy <=1'b0;
    1546                                             		    end
    1547                                             			 symbol<=symbol+1; 
    1548                                             		  end 
    1549                                             		 
    1550                                             		  // ******************************************************checking if TS2 order sets to be sent********************************************
    1551                                                   else if (os_type_reg==3'b001)begin
    1552                                             		
    1553                                             		  if(symbol==4'b0000) // checking if symbol 0 is to be sent
    1554                                             		    Os_Out <={no_of_lanes{TS2[7:0]}};
    1555                                             			
    1556                                             			
    1557                                             		  else if(symbol==4'b0001)  // checking if symbol 1 is to be sent
    1558                                             		    Os_Out <={no_of_lanes{TS2[15:8]}};
    1559                                             				
    1560                                             		  else if(symbol==4'b0010)begin // checking if symbol 2 is to be sent
    1561                                             		     if(lane_number_reg==2'b00) begin 
    1562                                             			   if (count==5'b00001)
    1563                                             			     Os_Out <= 8'hF7;
    1564                                             				 
    1565                                             			   else if (count==5'b00100)
    1566                                             			     Os_Out <= 32'hF7F7F7F7;
    1567                                             				 
    1568                                             			   else if (count==5'b01000)
    1569                                             			     Os_Out <= 64'hF7F7F7F7F7F7F7F7;
    1570                                             				 
    1571                                             			  else 
    1572                                             			     Os_Out <= 128'hF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7;
    1573                                             			 end
    1574                                             			 
    1575                                             			 else begin // checking if lanes number are sequential
    1576                                             			   if (count==5'b00001)
    1577                                             			     Os_Out <= 8'h00;
    1578                                             				 
    1579                                             			   else if (count==5'b00100)
    1580                                             			     Os_Out <= 32'h03020100;
    1581                                             				 
    1582                                             			   else if (count==5'b01000)
    1583                                             			     Os_Out <= 64'h0706050403020100;
    1584                                             				 
    1585                                             			   else
    1586                                             			     Os_Out <= 128'h0F0E0D0C0B0A09080706050403020100;
    1587                                             				 
    1588                                             			 end
    1589                                             			end
    1590                                             			
    1591                                             	    else if(symbol==4'b0011)  // checking if symbol 3 is to be sent
    1592                                             		    Os_Out <={no_of_lanes{TS2[31:24]}};
    1593                                             			
    1594                                             		else if(symbol==4'b0100) // checking if symbol 4 is to be sent
    1595                                             		    Os_Out <={no_of_lanes{TS2[39:32]}};
    1596                                             		
    1597                                             	    else if(symbol==4'b0101)  // checking if symbol 5 is to be sent
    1598                                             		    Os_Out <={no_of_lanes{TS2[47:40]}};
    1599                                             			
    1600                                             		else if(symbol==4'b0110) // checking if symbol 6 is to be sent
    1601                                             		    Os_Out <={no_of_lanes{TS2[55:48]}};
    1602                                             			
    1603                                             		else if(symbol==4'b0111||symbol==4'b1000||symbol==4'b1001||symbol==4'b1010||symbol==4'b1011||symbol==4'b1100||symbol==4'b1101||symbol==4'b1110) // checking if symbol  7 or 8 or 9 or 10 or 11 or 12 or 13 or 14  is to be sent
    1604                                             		    Os_Out <={no_of_lanes{TS2[63:56]}};
    1605                                             			
    1606                                             		else begin // checking if symbol 15 is to be sent
    1607                                             		    Os_Out<={no_of_lanes{TS2[63:56]}};
    1608                                             			send<=1'b0;
    1609                                             			finish<=1'b1;
    1610                                             			busy<=1'b0;
    1611                                             		    end
    1612                                             			 symbol<=symbol+1; 
    1613                                             		  end 
    1614                                             		   // ******************************************************checking if skip order sets to be sent********************************************
    1615                                                   else if (os_type_reg==3'b010)begin
    1616                                             		 if(gen_reg==3'b011 || gen_reg== 3'b100)begin
    1617                                             		  if(symbol==4'b0000 || symbol==4'b0001 || symbol==4'b0010 || symbol==4'b0011 || symbol==4'b0100 || symbol==4'b0101 || symbol==4'b0110 || symbol==4'b0111 || symbol==4'b1000 || symbol==4'b1001|| symbol==4'b1010 || symbol==4'b1011)// checking if symbols 0 or 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9 or 10 or 11
    1618                                             		    Os_Out<={no_of_lanes{skp_G3[7:0]}};
    1619                                             			
    1620                                             		  else if(symbol==4'b1100)  // checking if symbol 12 is to be sent
    1621                                             		    Os_Out<={no_of_lanes{skp_G3[15:8]}};
    1622                                             			
    1623                                             		  else if(symbol==4'b1101 || symbol==4'b1110)  // checking if symbols 13 or 14 is to be sent
    1624                                             		    Os_Out<={no_of_lanes{skp_G3[23:16]}};
    1625                                             			
    1626                                             		  else  begin // checking if symbol 15 is to be sent
    1627                                             		    Os_Out<={no_of_lanes{skp_G3[23:16]}};
    1628                                             			send <=1'b0;
    1629                                             			finish<=1'b1;
    1630                                             			busy<=1'b0;
    1631                                             			end
    1632                                             			symbol<=symbol+1;
    1633                                             			end
    1634                                             		 else if(gen_reg==3'b101)begin
    1635                                             		  if(symbol==4'b0000 || symbol==4'b0001 || symbol==4'b0010 || symbol==4'b0011 || symbol==4'b0100 || symbol==4'b0101 || symbol==4'b0110 || symbol==4'b0111 || symbol==4'b1000 || symbol==4'b1001|| symbol==4'b1010 || symbol==4'b1011)// checking if symbols 0 or 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9 or 10 or 11
    1636                                             		    Os_Out<={no_of_lanes{8'h99}};
    1637                                             			
    1638                                             		  else if(symbol==4'b1100)  // checking if symbol 12 is to be sent
    1639                                             		    Os_Out<={no_of_lanes{skp_G3[15:8]}};
    1640                                             			
    1641                                             		  else if(symbol==4'b1101 || symbol==4'b1110)  // checking if symbols 13 or 14 is to be sent
    1642                                             		    Os_Out<={no_of_lanes{skp_G3[23:16]}};
    1643                                             			
    1644                                             		  else  begin // checking if symbol 15 is to be sent
    1645                                             		    Os_Out<={no_of_lanes{skp_G3[23:16]}};
    1646                                             			send <=1'b0;
    1647                                             			finish<=1'b1;
    1648                                             			busy<=1'b0;
    1649                                             			end
    1650                                             			symbol<=symbol+1;
    1651                                             			end
    1652                                             		  end 
    1653                                             		  // ******************************************************checking if EIOS order sets to be sent********************************************
    1654                                                   else if (os_type_reg==3'b011) begin
    1655                                             		  if(symbol!=4'b1111) // checking if symbol 0 or 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9 or 10 or 11 or 12 or 13 or 14  is to be sent
    1656                                             		    Os_Out<={no_of_lanes{EIOS_G3[7:0]}};
    1657                                             			
    1658                                             		  else begin // checking if symbol 15 is to be sent
    1659                                             		    Os_Out<={no_of_lanes{EIOS_G3[7:0]}};
    1660                                             			send<=1'b0;
    1661                                             			finish<=1'b1;
    1662                                             			busy<=1'b0;
    1663                                             			end
    1664                                             			symbol<=symbol+1; 
    1665                                             		  end
    1666                                             		   // ******************************************************checking if IDLE to be sent********************************************
    1667                                             		 else if (os_type_reg==3'b100) begin
    1668                                             		  if (symbol!=4'b1111) begin
    1669                                             		    Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{1'b0}};
    1670                                             		    end
    1671                                             		  else begin
    1672                                             		    Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{1'b0}};
    1673                                             		    send<=1'b0;
    1674                                             		    finish<=1'b1;
    1675                                             		    busy<= 1'b0;
    1676                                             		  end
    1677                                             		  symbol<=symbol+1;
    1678                                             		  end
    1679                                             		  //***************************************************checking if EIEOS is sent*********************************************
    1680                                             		else if (os_type_reg==3'b101) begin
    1681                                             		 if (gen_reg==3'b011)begin
    1682                                             		  if(symbol!=4'b1111)
    1683                                             		    Os_Out<={no_of_lanes{EIEOS[7:0]}};
    1684                                             		  else begin
    1685                                             		   Os_Out<={no_of_lanes{EIEOS[7:0]}};
    1686                                             		   send<=1'b0;
    1687                                             		   finish<=1'b1;
    1688                                             		   busy<= 1'b0;
    1689                                             		  end
    1690                                             		  EIEOS<=~EIEOS;
    1691                                             		  symbol<=symbol+1;
    1692                                             		  end
    1693                                             		 else if(gen_reg==3'b100)begin
    1694                                             		   if(symbol==4'b0000 || symbol== 4'b0001 || symbol == 4'b0100 || symbol == 4'b0101 || symbol == 4'b1000 || symbol ==4'b1001 || symbol == 4'b1100 || symbol == 4'b1101)
    1695                                             		    Os_Out<={no_of_lanes{8'b0}};
    1696                                             		   else if(symbol==4'b0010 || symbol== 4'b0011 || symbol == 4'b0110 || symbol == 4'b0111 || symbol == 4'b1010 || symbol ==4'b1011 || symbol == 4'b1110)
    1697                                             		    Os_Out<={no_of_lanes{8'b11111111}};
    1698                                             		   else begin
    1699                                             			 Os_Out<={no_of_lanes{8'b11111111}};
    1700                                             		     send<=1'b0;
    1701                                             		     finish<=1'b1;
    1702                                             		     busy<= 1'b0;
    1703                                             		   end
    1704                                             		   symbol<=symbol+1;
    1705                                             		  end
    1706                                             		  else if(gen_reg==3'b101)begin
    1707                                             		   if(symbol==4'b0000 || symbol== 4'b0001 || symbol == 4'b0010 || symbol == 4'b0011 || symbol == 4'b1000 || symbol ==4'b1001 || symbol == 4'b1010 || symbol == 4'b1011)
    1708                                             		    Os_Out<={no_of_lanes{8'b0}};
    1709                                             		   else if(symbol==4'b0100 || symbol== 4'b0101 || symbol == 4'b0110 || symbol == 4'b0111 || symbol == 4'b1100 || symbol ==4'b1101 || symbol == 4'b1110)
    1710                                             		    Os_Out<={no_of_lanes{8'b11111111}};
    1711                                             		   else begin
    1712                                             			 Os_Out<={no_of_lanes{8'b11111111}};
    1713                                             		     send<=1'b0;
    1714                                             		     finish<=1'b1;
    1715                                             		     busy<= 1'b0;
    1716                                             		   end
    1717                                             		   symbol<=symbol+1;
    1718                                             		  end
    1719                                             		 end
    1720                                             		  //***************************************************checking if SDS is sent*********************************************
    1721                                             		  else begin
    1722                                             		   if(symbol==4'b0000) 
    1723                                             		   Os_Out<={no_of_lanes{SDS[7:0]}};
    1724                                             		   
    1725                                             		   else 
    1726                                             		   Os_Out<={no_of_lanes{SDS[15:8]}};
    1727                                             		   
    1728                                             		   if (symbol==4'b1111)begin
    1729                                             		     send<=1'b0;
    1730                                             		     finish<=1'b1;
    1731                                             		     busy<= 1'b0;
    1732                                             			end
    1733                                             			symbol<=symbol+1;
    1734                                             		  end
    1735                                             		end
    1736                                             	else begin  //if there are no order sets available to be sent
    1737                                             		  DataValid <= {((GEN3_PIPEWIDTH/8)*no_of_lanes){not_valid}};
    1738                                             		  Os_Out<={no_of_lanes*GEN3_PIPEWIDTH{not_valid}};
    1739                                             		  finish<=1'b0;
    1740                                             		  //busy<= 1'b0;
    1741                                             		 end
    1742                                             	   end 
    1743                                             	  //*************************************************pipewidth=16***************************************************************** 
    1744                                                 else if (PIPE==6'b010000 &&(gen_reg==3'b011 || gen_reg==3'b100 || gen_reg==3'b101))begin
    1745                                             	if(send)begin//if there are order sets available to be sent
    1746                                             	  finish<=1'b0;
    1747                                             	  DataValid <= {{no_of_lanes{valid}},{no_of_lanes{valid}}};
    1748                                             	  // ******************************************************checking if TS1 order sets to be sent********************************************
    1749                                             	  if (os_type_reg==3'b000)begin
    1750                                             	    
    1751                                             		  if(symbol==4'b0000) // checking if symbols 0,1 are to be sent
    1752                                             		    Os_Out <={{{no_of_lanes{TS1[15:8]}}},{no_of_lanes{TS1[7:0]}}};
    1753                                             			
    1754                                             				
    1755                                             		  else if(symbol==4'b0010)begin // checking if symbols 2,3 are to be sent
    1756                                             		     if(lane_number_reg==2'b00)begin 
    1757                                             			   if (count==5'b00001)
    1758                                             			     Os_Out <= {{no_of_lanes{TS1[31:24]}},8'hF7};
    1759                                             				 
    1760                                             			   else if (count==5'b00100)
    1761                                             			     Os_Out <={{no_of_lanes{TS1[31:24]}},32'hF7F7F7F7};
    1762                                             				 
    1763                                             			   else if (count==5'b01000)
    1764                                             			     Os_Out <={{no_of_lanes{TS1[31:24]}},64'hF7F7F7F7F7F7F7F7};
    1765                                             				 
    1766                                             			   else 
    1767                                             			     Os_Out <={{no_of_lanes{TS1[31:24]}},128'hF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7};
    1768                                             			 end
    1769                                             			 
    1770                                             			 else begin // checking if lanes number are sequential
    1771                                             			   if (count==5'b00001)
    1772                                             			     Os_Out <= {{no_of_lanes{TS1[31:24]}},8'h00};
    1773                                             				
    1774                                             			   else if (count==5'b00100)
    1775                                             			     Os_Out <= {{no_of_lanes{TS1[31:24]}},32'h03020100};
    1776                                             				 
    1777                                             			   else if (count==5'b01000)
    1778                                             			     Os_Out <= {{no_of_lanes{TS1[31:24]}},64'h0706050403020100};
    1779                                             				 
    1780                                             			   else 
    1781                                             			     Os_Out <= {{no_of_lanes{TS1[31:24]}},128'h0F0E0D0C0B0A09080706050403020100};
    1782                                             			 end			 
    1783                                             			end
    1784                                             			
    1785                                             		  else if(symbol==4'b0100)  // checking if symbols 4,5 are to be sent
    1786                                             		    Os_Out <={{no_of_lanes{TS1[47:40]}},{no_of_lanes{TS1[39:32]}}};
    1787                                             			
    1788                                             		
    1789                                             		  else if (symbol==4'b0110) begin //checking if symbols 6,7 are to be sent
    1790                                             		       if (count==5'b00001)
    1791                                             			     Os_Out <= {{temp2[7:0]},{temp1[7:0]}};
    1792                                             				 
    1793                                             		       else if (count==5'b00100)
    1794                                             			     Os_Out <= {{temp2[31:0]},{temp1[31:0]}};
    1795                                             				 
    1796                                             			   else if (count==5'b01000)
    1797                                             			     Os_Out <= {{temp2[63:0]},{temp1[63:0]}};
    1798                                             				 
    1799                                             			   else 
    1800                                             			     Os_Out <= {{temp2[127:0]},{temp1[127:0]}};
    1801                                             		  end
    1802                                             		  
    1803                                             		  
    1804                                             		  else if (symbol==4'b1000) begin //checking if symbols 8,9 are to be sent
    1805                                             		       if (count==5'b00001)
    1806                                             			     Os_Out <= {{temp4[7:0]},{temp3[7:0]}};
    1807                                             				 
    1808                                             		       else if (count==5'b00100)
    1809                                             			     Os_Out <= {{temp4[31:0]},{temp3[31:0]}};
    1810                                             				 
    1811                                             			   else if (count==5'b01000)
    1812                                             			     Os_Out <= {{temp4[63:0]},{temp3[63:0]}};
    1813                                             				 
    1814                                             			   else 
    1815                                             			     Os_Out <={{temp4[127:0]},{temp3[127:0]}};
    1816                                             		  end
    1817                                             		  
    1818                                             		  else if (symbol==4'b1010 ||symbol==4'b1100)// checking if symbols 10,11 or 12,13 are sent
    1819                                             		  Os_Out<={{no_of_lanes{TS1[55:48]}},{no_of_lanes{TS1[55:48]}}};
    1820                                             			
    1821                                             		  else  begin //checking if symbols 14,15 are sent
    1822                                             		    Os_Out <={{no_of_lanes{TS1[55:48]}},{no_of_lanes{TS1[55:48]}}};// checking if symbol 15 is to be sent
    1823                                             			send <=1'b0;
    1824                                             			finish <=1'b1;
    1825                                             			busy <=1'b0;
    1826                                             		    end
    1827                                             			 symbol<=symbol+2; 
    1828                                             		  end 
    1829                                             		 
    1830                                             		  // ******************************************************checking if TS2 order sets to be sent********************************************
    1831                                                   else if (os_type_reg==3'b001)begin
    1832                                             		
    1833                                             		  if(symbol==4'b0000) // checking if symbols 0,1 are to be sent
    1834                                             		    Os_Out <={{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    1835                                             				
    1836                                             		  else if(symbol==4'b0010)begin // checking if symbols 2,3 are to be sent
    1837                                             		     if(lane_number_reg==2'b00) begin 
    1838                                             			   if (count==5'b00001)
    1839                                             			     Os_Out <= {{no_of_lanes{TS2[31:24]}},8'hF7};
    1840                                             				 
    1841                                             			   else if (count==5'b00100)
    1842                                             			     Os_Out <= {{no_of_lanes{TS2[31:24]}},32'hF7F7F7F7};
    1843                                             				 
    1844                                             			   else if (count==5'b01000)
    1845                                             			     Os_Out <= {{no_of_lanes{TS2[31:24]}},64'hF7F7F7F7F7F7F7F7};
    1846                                             				 
    1847                                             			  else 
    1848                                             			     Os_Out <= {{no_of_lanes{TS2[31:24]}},128'hF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7};
    1849                                             			 end
    1850                                             			 
    1851                                             			 else begin // checking if lanes number are sequential
    1852                                             			   if (count==5'b00001)
    1853                                             			     Os_Out <= {{no_of_lanes{TS2[31:24]}},8'h00};
    1854                                             				 
    1855                                             			   else if (count==5'b00100)
    1856                                             			     Os_Out <= {{no_of_lanes{TS2[31:24]}},32'h03020100};
    1857                                             				 
    1858                                             			   else if (count==5'b01000)
    1859                                             			     Os_Out <= {{no_of_lanes{TS2[31:24]}},64'h0706050403020100};
    1860                                             				 
    1861                                             			   else
    1862                                             			     Os_Out <= {{no_of_lanes{TS2[31:24]}},128'h0F0E0D0C0B0A09080706050403020100};
    1863                                             				 
    1864                                             			 end
    1865                                             			end
    1866                                             			
    1867                                             		else if(symbol==4'b0100) // checking if symbols 4,5 are to be sent
    1868                                             		    Os_Out <={{no_of_lanes{TS2[47:40]}},{no_of_lanes{TS2[39:32]}}};
    1869                                             			
    1870                                             		else if(symbol==4'b0110) // checking if symbols 6,7 are to be sent
    1871                                             		    Os_Out <={{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[55:48]}}};
    1872                                             			
    1873                                             		else if(symbol==4'b1000||symbol==4'b1010||symbol==4'b1100) // checking if symbols 8,9 or 10,11 or 12,13 
    1874                                             		    Os_Out <={{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}}};
    1875                                             			
    1876                                             		else  begin // checking if symbols 14,15 are to be sent
    1877                                             		    Os_Out<={{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}}};
    1878                                             			send<=1'b0;
    1879                                             			finish<=1'b1;
    1880                                             			busy<=1'b0;
    1881                                             		    end
    1882                                             			 symbol<=symbol+2; 
    1883                                             		  end 
    1884                                             		   // ******************************************************checking if skip order sets to be sent********************************************
    1885                                                   else if (os_type_reg==3'b010)begin
    1886                                             		if(gen_reg==3'b011 || gen_reg== 3'b100)begin
    1887                                             		  if(symbol==4'b0000 || symbol==4'b0010 || symbol==4'b0100 || symbol==4'b0110 || symbol==4'b1000 || symbol==4'b1010)// checking if symbols 0,1 or 2,3 or 4,5 or 6,7 or 8,9 or 10,11 are to be sent
    1888                                             		    Os_Out<={{no_of_lanes{skp_G3[7:0]}},{no_of_lanes{skp_G3[7:0]}}};
    1889                                             			
    1890                                             		  else if(symbol==4'b1100)  // checking if symbol 12,13 is to be sent
    1891                                             		    Os_Out<={{no_of_lanes{skp_G3[23:16]}},{no_of_lanes{skp_G3[15:8]}}};
    1892                                             			
    1893                                             		  else  begin // checking if symbol 14,15 are to be sent
    1894                                             		    Os_Out<={{no_of_lanes{skp_G3[23:16]}},{no_of_lanes{skp_G3[23:16]}}};
    1895                                             			send <=1'b0;
    1896                                             			finish<=1'b1;
    1897                                             			busy<=1'b0;
    1898                                             			end
    1899                                             			symbol<=symbol+2; 
    1900                                             		   end
    1901                                             		 else if(gen_reg==3'b101)begin
    1902                                             		  if(symbol==4'b0000 || symbol==4'b0010 || symbol==4'b0100 || symbol==4'b0110 || symbol==4'b1000 || symbol==4'b1010)// checking if symbols 0,1 or 2,3 or 4,5 or 6,7 or 8,9 or 10,11 are to be sent
    1903                                             		    Os_Out<={{no_of_lanes{8'h99}},{no_of_lanes{8'h99}}};
    1904                                             			
    1905                                             		  else if(symbol==4'b1100)  // checking if symbol 12,13 is to be sent
    1906                                             		    Os_Out<={{no_of_lanes{skp_G3[23:16]}},{no_of_lanes{skp_G3[15:8]}}};
    1907                                             			
    1908                                             		  else  begin // checking if symbol 14,15 are to be sent
    1909                                             		    Os_Out<={{no_of_lanes{skp_G3[23:16]}},{no_of_lanes{skp_G3[23:16]}}};
    1910                                             			send <=1'b0;
    1911                                             			finish<=1'b1;
    1912                                             			busy<=1'b0;
    1913                                             			end
    1914                                             			symbol<=symbol+2; 
    1915                                             		   end
    1916                                             		  end 
    1917                                             		  // ******************************************************checking if EIOS order sets to be sent********************************************
    1918                                                   else if (os_type_reg==3'b011) begin
    1919                                             		
    1920                                             		  if(symbol!=4'b1110) // checking if symbols 0,1 or 2,3 or 4,5 or 6,7 or 8,9 or 10,11 or 12,13 are to be sent
    1921                                             		    Os_Out<={{no_of_lanes{EIOS_G3[7:0]}},{no_of_lanes{EIOS_G3[7:0]}}};
    1922                                             			
    1923                                             		  else begin // checking if symbols 14,15 are to be sent
    1924                                             		    Os_Out<={{no_of_lanes{EIOS_G3[7:0]}},{no_of_lanes{EIOS_G3[7:0]}}};
    1925                                             			send<=1'b0;
    1926                                             			finish<=1'b1;
    1927                                             			busy<=1'b0;
    1928                                             			end
    1929                                             			symbol<=symbol+2; 
    1930                                             		   end
    1931                                             		   // ******************************************************checking if IDLE to be sent********************************************
    1932                                             		 else if (os_type_reg==3'b100) begin
    1933                                             		   if (symbol!=4'b1110) begin
    1934                                             		    Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{1'b0}};
    1935                                             		    end
    1936                                             		  else begin
    1937                                             		    Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{1'b0}};
    1938                                             		    send<=1'b0;
    1939                                             		    finish<=1'b1;
    1940                                             		    busy<= 1'b0;
    1941                                             		  end
    1942                                             		  symbol<=symbol+2;
    1943                                             		  end
    1944                                             		  //***************************************************checking if EIEOS is sent*********************************************
    1945                                             		else if (os_type_reg==3'b101) begin
    1946                                             		 if (gen_reg==3'b011)begin
    1947                                             		  if(symbol!=4'b1110)
    1948                                             		    Os_Out<={{no_of_lanes{~EIEOS[7:0]}},{no_of_lanes{EIEOS[7:0]}}};
    1949                                             		  else begin
    1950                                             		   Os_Out<={{no_of_lanes{~EIEOS[7:0]}},{no_of_lanes{EIEOS[7:0]}}};
    1951                                             		   send<=1'b0;
    1952                                             		   finish<=1'b1;
    1953                                             		   busy<= 1'b0;
    1954                                             		  end
    1955                                             		  symbol<=symbol+2;
    1956                                             		  end
    1957                                             		 else if (gen_reg==3'b100)begin
    1958                                             		  if(symbol==4'b0000 || symbol== 4'b0100 || symbol== 4'b1000 || symbol== 4'b1100)
    1959                                             		    Os_Out<={{no_of_lanes{8'b0}},{no_of_lanes{8'b0}}};
    1960                                             		  else if (symbol==4'b0010 || symbol==4'b0110 || symbol == 4'b1010)
    1961                                             		    Os_Out<={{no_of_lanes{8'b11111111}},{no_of_lanes{8'b11111111}}};
    1962                                             		  else begin
    1963                                             		   Os_Out<={{no_of_lanes{8'b11111111}},{no_of_lanes{8'b11111111}}};
    1964                                             		   send<=1'b0;
    1965                                             		   finish<=1'b1;
    1966                                             		   busy<= 1'b0;
    1967                                             		  end
    1968                                             		  symbol<=symbol+2;
    1969                                             		  end
    1970                                             		  else if (gen_reg==3'b101)begin
    1971                                             		  if(symbol==4'b0000 || symbol== 4'b0010 || symbol== 4'b1000 || symbol== 4'b1010)
    1972                                             		    Os_Out<={{no_of_lanes{8'b0}},{no_of_lanes{8'b0}}};
    1973                                             		  else if (symbol==4'b0100 || symbol==4'b0110 || symbol == 4'b1100)
    1974                                             		    Os_Out<={{no_of_lanes{8'b11111111}},{no_of_lanes{8'b11111111}}};
    1975                                             		  else begin
    1976                                             		   Os_Out<={{no_of_lanes{8'b11111111}},{no_of_lanes{8'b11111111}}};
    1977                                             		   send<=1'b0;
    1978                                             		   finish<=1'b1;
    1979                                             		   busy<= 1'b0;
    1980                                             		  end
    1981                                             		  symbol<=symbol+2;
    1982                                             		  end
    1983                                             		 end
    1984                                             		  //***************************************************checking if SDS is sent*********************************************
    1985                                             		  else begin
    1986                                             		   if(symbol==4'b0000) 
    1987                                             		   Os_Out<={{no_of_lanes{SDS[15:8]}},{no_of_lanes{SDS[7:0]}}};
    1988                                             		   
    1989                                             		   else 
    1990                                             		   Os_Out<={{no_of_lanes{SDS[15:8]}},{no_of_lanes{SDS[15:8]}}};
    1991                                             		   
    1992                                             		   if (symbol==4'b1110)begin
    1993                                             		     send<=1'b0;
    1994                                             		     finish<=1'b1;
    1995                                             		     busy<= 1'b0;
    1996                                             			end
    1997                                             			symbol<=symbol+2;
    1998                                             		  end
    1999                                             		end
    2000                                             	else begin  //if there are no order sets available to be sent
    2001                                             		  DataValid <= {((GEN3_PIPEWIDTH/8)*no_of_lanes){not_valid}};
    2002                                             		  Os_Out<={no_of_lanes*GEN3_PIPEWIDTH{not_valid}};
    2003                                             		  finish<=1'b0;
    2004                                             		  //busy<= 1'b0;
    2005                                             		 end*/
    2006                                             	   end 
    2007                                             	   //*************************************************pipewidth=32***************************************************************** 
    2008                                                 else if (PIPE==6'b100000 && (gen_reg==3'b011 || gen_reg==3'b100 || gen_reg==3'b101))begin
    2009                                             	if(send)begin//if there are order sets available to be sent
    2010            1                     188832     	  finish<=1'b0;
    2011            1                     188832     	  DataValid <= {{no_of_lanes{valid}},{no_of_lanes{valid}},{no_of_lanes{valid}},{no_of_lanes{valid}}};
    2012                                             	  // ******************************************************checking if TS1 order sets to be sent********************************************
    2013                                             	  if (os_type_reg==3'b000)begin
    2014                                             	    		
    2015                                             		   if(symbol==4'b0000)begin // checking if symbols 0,1,2,3 are to be sent
    2016                                             		     if(lane_number_reg==2'b00)begin 
    2017                                             			   if (count==5'b00001)
    2018            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},8'hF7,{{no_of_lanes{TS1[15:8]}}},{no_of_lanes{TS1[7:0]}}};
    2019                                             				 
    2020                                             			   else if (count==5'b00100)
    2021            1                          E     			     Os_Out <={{no_of_lanes{TS1[31:24]}},32'hF7F7F7F7,{{no_of_lanes{TS1[15:8]}}},{no_of_lanes{TS1[7:0]}}};
    2022                                             				 
    2023                                             			   else if (count==5'b01000)
    2024            1                          E     			     Os_Out <={{no_of_lanes{TS1[31:24]}},64'hF7F7F7F7F7F7F7F7,{{no_of_lanes{TS1[15:8]}}},{no_of_lanes{TS1[7:0]}}};
    2025                                             				 
    2026                                             			   else 
    2027            1                          E     			     Os_Out <={{no_of_lanes{TS1[31:24]}},128'hF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7,{{no_of_lanes{TS1[15:8]}}},{no_of_lanes{TS1[7:0]}}};
    2028                                             			 end
    2029                                             			 
    2030                                             			 else begin // checking if lanes number are sequential
    2031                                             			   if (count==5'b00001)
    2032            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},8'h00,{{no_of_lanes{TS1[15:8]}}},{no_of_lanes{TS1[7:0]}}};
    2033                                             				
    2034                                             			   else if (count==5'b00100)
    2035            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},32'h03020100,{{no_of_lanes{TS1[15:8]}}},{no_of_lanes{TS1[7:0]}}};
    2036                                             				 
    2037                                             			   else if (count==5'b01000)
    2038            1                          E     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},64'h0706050403020100,{{no_of_lanes{TS1[15:8]}}},{no_of_lanes{TS1[7:0]}}};
    2039                                             				 
    2040                                             			   else 
    2041            1                      40390     			     Os_Out <= {{no_of_lanes{TS1[31:24]}},128'h0F0E0D0C0B0A09080706050403020100,{{no_of_lanes{TS1[15:8]}}},{no_of_lanes{TS1[7:0]}}};
    2042                                             			 end			 
    2043                                             			end
    2044                                             			
    2045                                             		  else if (symbol==4'b0100) begin //checking if symbols 4,5,6,7 are to be sent
    2046                                             		       if (count==5'b00001)
    2047            1                          E     			     Os_Out <= {{temp2[7:0]},{temp1[7:0]},{no_of_lanes{TS1[47:40]}},{no_of_lanes{TS1[39:32]}}};
    2048                                             				 
    2049                                             		       else if (count==5'b00100)
    2050            1                          E     			     Os_Out <= {{temp2[31:0]},{temp1[31:0]},{no_of_lanes{TS1[47:40]}},{no_of_lanes{TS1[39:32]}}};
    2051                                             				 
    2052                                             			   else if (count==5'b01000)
    2053            1                          E     			     Os_Out <= {{temp2[63:0]},{temp1[63:0]},{no_of_lanes{TS1[47:40]}},{no_of_lanes{TS1[39:32]}}};
    2054                                             				 
    2055                                             			   else 
    2056            1                      40389     			     Os_Out <= {{temp2[127:0]},{temp1[127:0]},{no_of_lanes{TS1[47:40]}},{no_of_lanes{TS1[39:32]}}};
    2057                                             		  end
    2058                                             		  
    2059                                             		  
    2060                                             		  else if (symbol==4'b1000) begin //checking if symbols 8,9,10,11 are to be sent
    2061                                             		       if (count==5'b00001)
    2062            1                          E     			     Os_Out <= {{no_of_lanes{TS1[55:48]}},{no_of_lanes{TS1[55:48]}},{temp4[7:0]},{temp3[7:0]}};
    2063                                             				 
    2064                                             		       else if (count==5'b00100)
    2065            1                          E     			     Os_Out <= {{no_of_lanes{TS1[55:48]}},{no_of_lanes{TS1[55:48]}},{temp4[31:0]},{temp3[31:0]}};
    2066                                             				 
    2067                                             			   else if (count==5'b01000)
    2068            1                          E     			     Os_Out <= {{no_of_lanes{TS1[55:48]}},{no_of_lanes{TS1[55:48]}},{temp4[63:0]},{temp3[63:0]}};
    2069                                             				 
    2070                                             			   else 
    2071            1                      40389     			     Os_Out <={{no_of_lanes{TS1[55:48]}},{no_of_lanes{TS1[55:48]}},{temp4[127:0]},{temp3[127:0]}};
    2072                                             		  end
    2073                                             		  
    2074                                             		  else  begin //checking if symbols 12,13,14,15 are sent
    2075            1                      40389     		    Os_Out <={{no_of_lanes{TS1[55:48]}},{no_of_lanes{TS1[55:48]}},{no_of_lanes{TS1[55:48]}},{no_of_lanes{TS1[55:48]}}};// checking if symbol 15 is to be sent
    2076            1                      40389     			send <=1'b0;
    2077            1                      40389     			finish <=1'b1;
    2078            1                      40389     			busy <=1'b0;
    2079                                             		    end
    2080            1                     161557     			 symbol<=symbol+4; 
    2081                                             		  end 
    2082                                             		 
    2083                                             		  // ******************************************************checking if TS2 order sets to be sent********************************************
    2084                                                   else if (os_type_reg==3'b001)begin
    2085                                             				
    2086                                             		   if(symbol==4'b0000)begin // checking if symbols 0,1,2,3 are to be sent
    2087                                             		     if(lane_number_reg==2'b00) begin 
    2088                                             			   if (count==5'b00001)
    2089            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},8'hF7,{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    2090                                             				 
    2091                                             			   else if (count==5'b00100)
    2092            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},32'hF7F7F7F7,{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    2093                                             				 
    2094                                             			   else if (count==5'b01000)
    2095            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},64'hF7F7F7F7F7F7F7F7,{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    2096                                             				 
    2097                                             			  else 
    2098            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},128'hF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7,{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    2099                                             			 end
    2100                                             			 
    2101                                             			 else begin // checking if lanes number are sequential
    2102                                             			   if (count==5'b00001)
    2103            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},8'h00,{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    2104                                             				 
    2105                                             			   else if (count==5'b00100)
    2106            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},32'h03020100,{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    2107                                             				 
    2108                                             			   else if (count==5'b01000)
    2109            1                          E     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},64'h0706050403020100,{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    2110                                             				 
    2111                                             			   else
    2112            1                         76     			     Os_Out <= {{no_of_lanes{TS2[31:24]}},128'h0F0E0D0C0B0A09080706050403020100,{no_of_lanes{TS2[15:8]}},{no_of_lanes{TS2[7:0]}}};
    2113                                             				 
    2114                                             			 end
    2115                                             			end
    2116                                             			
    2117                                             		else if(symbol==4'b0100) // checking if symbols 4,5,6,7 are to be sent
    2118            1                         76     		    Os_Out <={{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[55:48]}},{no_of_lanes{TS2[47:40]}},{no_of_lanes{TS2[39:32]}}};
    2119                                             			
    2120                                             		else if(symbol==4'b1000) // checking if symbols 8,9,10,11 
    2121            1                         76     		    Os_Out <={{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}}};
    2122                                             			
    2123                                             		else  begin // checking if symbols 12,13,14,15 are to be sent
    2124            1                         76     		    Os_Out<={{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}},{no_of_lanes{TS2[63:56]}}};
    2125            1                         76     			send<=1'b0;
    2126            1                         76     			finish<=1'b1;
    2127            1                         76     			busy<=1'b0;
    2128                                             		    end
    2129            1                        304     			 symbol<=symbol+4; 
    2130                                             		  end 
    2131                                             		   // ******************************************************checking if skip order sets to be sent********************************************
    2132                                                   else if (os_type_reg==3'b010)begin
    2133                                             		 if (gen_reg==3'b011 || gen_reg== 3'b100)begin
    2134                                             		  if(symbol==4'b0000 ||  symbol==4'b0100 || symbol==4'b1000 )// checking if symbols 0,1,2,3 or 4,5,6,7 or 8,9,10,11 are to be sent
    2135            1                          E     		    Os_Out<={{no_of_lanes{skp_G3[7:0]}},{no_of_lanes{skp_G3[7:0]}},{no_of_lanes{skp_G3[7:0]}},{no_of_lanes{skp_G3[7:0]}}};
    2136                                             			
    2137                                             		  else  begin // checking if symbol 14,15 are to be sent
    2138            1                          E     		    Os_Out<={{no_of_lanes{skp_G3[23:16]}},{no_of_lanes{skp_G3[23:16]}},{no_of_lanes{skp_G3[23:16]}},{no_of_lanes{skp_G3[15:8]}}};
    2139            1                          E     			send <=1'b0;
    2140            1                          E     			finish<=1'b1;
    2141            1                          E     			busy<=1'b0;
    2142                                             			end
    2143            1                          E     			symbol<=symbol+4; 
    2144                                             		   end
    2145                                             		 else if (gen_reg==3'b101)begin
    2146                                             		  if(symbol==4'b0000 ||  symbol==4'b0100 || symbol==4'b1000 )// checking if symbols 0,1,2,3 or 4,5,6,7 or 8,9,10,11 are to be sent
    2147            1                         12     		    Os_Out<={{no_of_lanes{8'h99}},{no_of_lanes{8'h99}},{no_of_lanes{8'h99}},{no_of_lanes{8'h99}}};
    2148                                             			
    2149                                             		  else  begin // checking if symbol 14,15 are to be sent
    2150            1                          4     		    Os_Out<={{no_of_lanes{skp_G3[23:16]}},{no_of_lanes{skp_G3[23:16]}},{no_of_lanes{skp_G3[23:16]}},{no_of_lanes{skp_G3[15:8]}}};
    2151            1                          4     			send <=1'b0;
    2152            1                          4     			finish<=1'b1;
    2153            1                          4     			busy<=1'b0;
    2154                                             			end
    2155            1                         16     			symbol<=symbol+4; 
    2156                                             		   end
    2157                                             		  end 
    2158                                             		  // ******************************************************checking if EIOS order sets to be sent********************************************
    2159                                                   else if (os_type_reg==3'b011) begin
    2160                                             		
    2161                                             		  if(symbol!=4'b1100) // checking if symbols 0,1,2,3 or 4,5,6,7 or 8,9,10,11 are to be sent
    2162            1                      E-hit     		    Os_Out<={{no_of_lanes{EIOS_G3[7:0]}},{no_of_lanes{EIOS_G3[7:0]}},{no_of_lanes{EIOS_G3[7:0]}},{no_of_lanes{EIOS_G3[7:0]}}};
    2163                                             			
    2164                                             		  else begin // checking if symbols 12,13,14,15 are to be sent
    2165            1                      E-hit     		    Os_Out<={{no_of_lanes{EIOS_G3[7:0]}},{no_of_lanes{EIOS_G3[7:0]}},{no_of_lanes{EIOS_G3[7:0]}},{no_of_lanes{EIOS_G3[7:0]}}};
    2166            1                      E-hit     			send<=1'b0;
    2167            1                      E-hit     			finish<=1'b1;
    2168            1                      E-hit     			busy<=1'b0;
    2169                                             			end
    2170            1                      E-hit     			symbol<=symbol+4; 
    2171                                             		   end
    2172                                             		   // ******************************************************checking if IDLE to be sent********************************************
    2173                                             		 else if (os_type_reg==3'b100) begin
    2174                                             		   if (symbol!=4'b1100) begin
    2175            1                      20100     		    Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{1'b0}};
    2176                                             		    end
    2177                                             		  else begin
    2178            1                       6700     		    Os_Out<={no_of_lanes*GEN1_PIPEWIDTH{1'b0}};
    2179            1                       6700     		    send<=1'b0;
    2180            1                       6700     		    finish<=1'b1;
    2181            1                       6700     		    busy<= 1'b0;
    2182                                             		  end
    2183            1                      26800     		  symbol<=symbol+4;
    2184                                             		  end
    2185                                             		  //***************************************************checking if EIEOS is sent*********************************************
    2186                                             		else if (os_type_reg==3'b101) begin
    2187                                             		 if (gen_reg==3'b011)begin
    2188                                             		  if(symbol!=4'b1100)
    2189            1                          E     		    Os_Out<={{no_of_lanes{~EIEOS[7:0]}},{no_of_lanes{EIEOS[7:0]}},{no_of_lanes{~EIEOS[7:0]}},{no_of_lanes{EIEOS[7:0]}}};
    2190                                             		  else begin
    2191            1                          E     		   Os_Out<={{no_of_lanes{~EIEOS[7:0]}},{no_of_lanes{EIEOS[7:0]}},{no_of_lanes{~EIEOS[7:0]}},{no_of_lanes{EIEOS[7:0]}}};
    2192            1                          E     		   send<=1'b0;
    2193            1                          E     		   finish<=1'b1;
    2194            1                          E     		   busy<= 1'b0;
    2195                                             		  end
    2196            1                          E     		  symbol<=symbol+4;
    2197                                             		  end
    2198                                             		 else if (gen_reg==3'b100)begin
    2199                                             		   if(symbol!=4'b1100)
    2200            1                          E     		     Os_Out<={{no_of_lanes{8'b11111111}},{no_of_lanes{8'b11111111}},{no_of_lanes{8'b0}},{no_of_lanes{8'b0}}};
    2201                                             		   else begin
    2202            1                          E     		     Os_Out<={{no_of_lanes{8'b11111111}},{no_of_lanes{8'b11111111}},{no_of_lanes{8'b0}},{no_of_lanes{8'b0}}};
    2203            1                          E     		     send<=1'b0;
    2204            1                          E     		     finish<=1'b1;
    2205            1                          E     		     busy<= 1'b0;
    2206                                             		   end
    2207            1                          E     		  symbol<=symbol+4;
    2208                                             		 end
    2209                                             		 else if (gen_reg==3'b101)begin
    2210                                             		   if(symbol==4'b0000 || symbol==4'b1000)
    2211            1                         60     		     Os_Out<={{no_of_lanes{8'b0}},{no_of_lanes{8'b0}},{no_of_lanes{8'b0}},{no_of_lanes{8'b0}}};
    2212                                             		   else if(symbol==4'b0100)
    2213            1                         30     		     Os_Out<={{no_of_lanes{8'b11111111}},{no_of_lanes{8'b11111111}},{no_of_lanes{8'b11111111}},{no_of_lanes{8'b11111111}}};
    2214                                             		   else begin
    2215            1                         30     		     Os_Out<={{no_of_lanes{8'b11111111}},{no_of_lanes{8'b11111111}},{no_of_lanes{8'b11111111}},{no_of_lanes{8'b11111111}}};
    2216            1                         30     		     send<=1'b0;
    2217            1                         30     		     finish<=1'b1;
    2218            1                         30     		     busy<= 1'b0;
    2219                                             		   end
    2220            1                        120     		  symbol<=symbol+4;
    2221                                             		 end
    2222                                             		end
    2223                                             		  //***************************************************checking if SDS is sent*********************************************
    2224                                             		  else begin
    2225                                             		   if(symbol==4'b0000) 
    2226            1                          4     		   Os_Out<={{no_of_lanes{SDS[15:8]}},{no_of_lanes{SDS[15:8]}},{no_of_lanes{SDS[15:8]}},{no_of_lanes{SDS[7:0]}}};
    2227                                             		   
    2228                                             		   else 
    2229            1                         12     		   Os_Out<={{no_of_lanes{SDS[15:8]}},{no_of_lanes{SDS[15:8]}},{no_of_lanes{SDS[15:8]}},{no_of_lanes{SDS[15:8]}}};
    2230                                             		   
    2231                                             		   if (symbol==4'b1100)begin
    2232            1                          4     		     send<=1'b0;
    2233            1                          4     		     finish<=1'b1;
    2234            1                          4     		     busy<= 1'b0;
    2235                                             			end
    2236            1                         16     			symbol<=symbol+4;
    2237                                             		  end
    2238                                             		end
    2239                                             	else begin  //if there are no order sets available to be sent
    2240            1                      94421     		  DataValid <= {((GEN3_PIPEWIDTH/8)*no_of_lanes){not_valid}};
    2241            1                      94421     		  Os_Out<={no_of_lanes*GEN3_PIPEWIDTH{not_valid}};
    2242            1                      94421     		  finish<=1'b0;
    2243                                             		  //busy<= 1'b0;
    2244                                             		 end
    2245                                             	   end 
    2246                                             	  end
    2247                                             	endmodule	  


=================================================================================
=== File: RTL/PCIE.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/PCIE.v --

    1                                                module PCIe #(
    2                                                	
    3                                                	parameter MAXPIPEWIDTH = 32,
    4                                                	parameter DEVICETYPE = 0, //0 for downstream 1 for upstream
    5                                                	parameter LANESNUMBER =16,
    6                                                	parameter GEN1_PIPEWIDTH = 8 ,	
    7                                                	parameter GEN2_PIPEWIDTH = 8 ,	
    8                                                	parameter GEN3_PIPEWIDTH = 8 ,								
    9                                                	parameter GEN4_PIPEWIDTH = 8 ,	
    10                                               	parameter GEN5_PIPEWIDTH = 8 ,	
    11                                               	parameter MAX_GEN = 1
    12                                               )
    13                                               (
    14                                               //clk and reset 
    15                                               input CLK,
    16                                               input lpreset,
    17                                               output phy_reset,
    18                                               //PIPE interface width
    19                                               output [1:0] width, ///////////////////which module
    20                                               //TX_signals
    21                                               output [MAXPIPEWIDTH*LANESNUMBER-1:0]TxData,
    22                                               output [LANESNUMBER-1:0]TxDataValid,
    23                                               output [LANESNUMBER-1:0]TxElecIdle,
    24                                               output [LANESNUMBER-1:0]TxStartBlock,
    25                                               output [(MAXPIPEWIDTH/8)*LANESNUMBER-1:0]TxDataK,
    26                                               output [2*LANESNUMBER -1:0]TxSyncHeader,
    27                                               output [LANESNUMBER-1:0]TxDetectRx_Loopback,
    28                                               //RX_signals
    29                                               input  	[MAXPIPEWIDTH*LANESNUMBER-1:0]RxData,
    30                                               input   [LANESNUMBER-1:0]RxDataValid,
    31                                               input	[(MAXPIPEWIDTH/8)*LANESNUMBER-1:0]RxDataK,
    32                                               input	[LANESNUMBER-1:0]RxStartBlock,
    33                                               input	[2*LANESNUMBER -1:0]RxSyncHeader,
    34                                               input	[3*LANESNUMBER -1:0]RxStatus,
    35                                               input   [15:0]RxElectricalIdle,
    36                                               //commands and status signals
    37                                               output  [4*LANESNUMBER-1:0]PowerDown,
    38                                               output  [3:0] Rate,
    39                                               input   [LANESNUMBER-1:0]PhyStatus,
    40                                               
    41                                               //pclkcontrolsignal
    42                                               output [4:0]PCLKRate,
    43                                               output PclkChangeAck,
    44                                               input  PclkChangeOk,
    45                                               //eq_signals
    46                                               input 	[18*LANESNUMBER -1:0]LocalTxPresetCoefficients,
    47                                               output 	[18*LANESNUMBER -1:0]TxDeemph,
    48                                               input 	[6*LANESNUMBER -1:0]LocalFS,
    49                                               input 	[6*LANESNUMBER -1:0]LocalLF,
    50                                               output 	[4*LANESNUMBER -1:0]LocalPresetIndex,
    51                                               output 	[LANESNUMBER -1:0]GetLocalPresetCoeffcients,
    52                                               input 	[LANESNUMBER -1:0]LocalTxCoefficientsValid,
    53                                               output 	[6*LANESNUMBER -1:0]LF,
    54                                               output 	[6*LANESNUMBER -1:0]FS,
    55                                               output 	[LANESNUMBER -1:0]RxEqEval,
    56                                               output 	[LANESNUMBER -1:0]InvalidRequest,
    57                                               input 	[6*LANESNUMBER -1:0]LinkEvaluationFeedbackDirectionChange,
    58                                               
    59                                               output pl_trdy,
    60                                               input  lp_irdy,
    61                                               input  [512-1:0]lp_data,
    62                                               input  [64-1:0]lp_valid,
    63                                               output [512-1:0]pl_data,
    64                                               output [64-1:0] pl_valid,
    65                                               input  [3:0]lp_state_req,
    66                                               output [3:0]pl_state_sts,
    67                                               output [2:0]pl_speedmode,////////////////////////////////////////
    68                                               input lp_force_detect,
    69                                               ////lPIF start & end of TLP DLLP
    70                                               input [64-1:0]lp_dlpstart,
    71                                               input [64-1:0]lp_dlpend,
    72                                               input [64-1:0]lp_tlpstart,
    73                                               input [64-1:0]lp_tlpend,
    74                                               output [64-1:0]pl_dlpstart,
    75                                               output [64-1:0]pl_dlpend,
    76                                               output [64-1:0]pl_tlpstart,
    77                                               output [64-1:0]pl_tlpend,
    78                                               output [64-1:0]pl_tlpedb,
    79                                               output pl_linkUp,
    80                                               //optional Message bus
    81                                               output [7:0] M2P_MessageBus,
    82                                               input  [7:0] P2M_MessageBus,
    83                                               output  [15:0] RxStandby
    84                                               );
    85                                               
    86                                               wire WriteDetectLanesFlag;
    87                                               wire [4:0] SetTXState;
    88                                               wire TXFinishFlag;
    89                                               wire [4:0]TXExitTo;
    90                                               wire WriteLinkNumFlagTx,WriteLinkNumFlagRx;
    91                                               wire [4:0] NumberDetectLanesfromtx;
    92                                               wire [2:0]GEN; 
    93                                               wire [4:0]numberOfDetectedLanes;
    94                                               wire [4:0]RXsubstate;
    95                                               wire [7:0]linkNumberRxInput,linkNumberTxInput,linkNumberRxOutput,linkNumberTxOutput;
    96                                               wire [7:0] rateid,rateIdInTx;
    97                                               wire upConfigureCapability,upConfigureCapabilityInTX;
    98                                               wire RXfinish;
    99                                               wire [4:0]RXexitTo;
    100                                              ///////////output pl_linkUp,////////////
    101                                              wire witeUpconfigureCapability;
    102                                              wire writerateid;
    103                                              wire  directed_speed_change;
    104                                              wire  [47:0] ReceiverpresetHintDSP;
    105                                              wire  [63:0] TransmitterPresetHintDSP;
    106                                              wire  [47:0] ReceiverpresetHintUSP;
    107                                              wire  [63:0] TransmitterPresetHintUSP;
    108                                              wire  [6*16-1:0]LF_register;
    109                                              wire  [6*16-1:0]FS_register;
    110                                              wire  [6*16-1:0]CursorCoff;
    111                                              wire  [6*16-1:0]PreCursorCoff;
    112                                              wire  [6*16-1:0]PostCursorCoff;
    113                                              wire  [47:0] ReceiverpresetHintDSPIn;
    114                                              wire  [63:0] TransmitterPresetHintDSPIn;
    115                                              wire  [47:0] ReceiverpresetHintUSPIn;
    116                                              wire  [63:0] TransmitterPresetHintUSPIn;
    117                                              wire writeReceiverpresetHintDSP;
    118                                              wire writeTransmitterPresetHintDSP;
    119                                              wire writeReceiverpresetHintUSP;
    120                                              wire writeTransmitterPresetHintUSP;
    121                                              wire directed_speed_change_In;
    122                                              wire write_directed_speed_chang;
    123                                              wire [2:0] trainToGen;
    124                                              wire [16*6-1:0] FSDSP,LFDSP;
    125                                              wire disableScrambler;
    126                                              wire turnOffScrambler_flag;
    127                                              wire startSend16;
    128                                              
    129                                              mainLTSSM #(
    130                                              .Width(MAXPIPEWIDTH),
    131                                              .DEVICETYPE(DEVICETYPE), //0 for downstream 1 for upstream
    132                                              .GEN1_PIPEWIDTH(GEN1_PIPEWIDTH),	
    133                                              .GEN2_PIPEWIDTH (GEN2_PIPEWIDTH) ,	
    134                                              .GEN3_PIPEWIDTH (GEN3_PIPEWIDTH),	
    135                                              .GEN4_PIPEWIDTH (GEN4_PIPEWIDTH) ,	
    136                                              .GEN5_PIPEWIDTH (GEN5_PIPEWIDTH),
    137                                              .LANESNUMBER(LANESNUMBER),
    138                                              .MAX_GEN(MAX_GEN)
    139                                              ) mainltssm(
    140                                                  .clk(CLK),
    141                                                  .reset(lpreset),
    142                                                  .lpifStateRequest(lp_state_req),
    143                                                  .numberOfDetectedLanesIn(NumberDetectLanesfromtx),
    144                                                  .rateIdIn(rateid),
    145                                                  .upConfigureCapabilityIn(upConfigureCapability),
    146                                                  .writeNumberOfDetectedLanes(WriteDetectLanesFlag),
    147                                                  .writeUpconfigureCapability(witeUpconfigureCapability),
    148                                                  .writeRateId(writerateid),
    149                                                  .finishTx(TXFinishFlag),
    150                                                  .finishRx( RXfinish),
    151                                                  .gotoTx(TXExitTo),
    152                                                  .gotoRx(RXexitTo),
    153                                                  .forceDetect(lp_force_detect),
    154                                                  .linkUp(pl_linkUp),
    155                                                  .GEN(GEN),
    156                                                  .numberOfDetectedLanesOut(numberOfDetectedLanes),
    157                                                  .rateIdOut(rateIdInTx),
    158                                                  .upConfigureCapabilityOut(upConfigureCapabilityInTX),//////not used in tx
    159                                                  .lpifStateStatus(pl_state_sts),
    160                                                  .substateTx(SetTXState),
    161                                                  .substateRx(RXsubstate),
    162                                                  .linkNumberInTx(linkNumberTxOutput),
    163                                                  .linkNumberInRx(linkNumberRxOutput),
    164                                                  .writeLinkNumberTx(WriteLinkNumFlagTx),
    165                                                  .writeLinkNumberRx(WriteLinkNumFlagRx),
    166                                                  .linkNumberOutTx(linkNumberTxInput),
    167                                                  .linkNumberOutRx(linkNumberRxInput),
    168                                                  .width(width),
    169                                                  .ReceiverpresetHintDSPIn(ReceiverpresetHintDSPIn),
    170                                                  .TransmitterPresetHintDSPIn(TransmitterPresetHintDSPIn),
    171                                                  .ReceiverpresetHintUSPIn(ReceiverpresetHintUSPIn),
    172                                                  .TransmitterPresetHintUSPIn(TransmitterPresetHintUSPIn),
    173                                                  .writeReceiverpresetHintDSP(writeReceiverpresetHintDSP),
    174                                                  .writeTransmitterPresetHintDSP(writeTransmitterPresetHintDSP),
    175                                                  .writeReceiverpresetHintUSP(writeReceiverpresetHintUSP),
    176                                                  .writeTransmitterPresetHintUSP(writeTransmitterPresetHintUSP),
    177                                                  .directed_speed_change_In(directed_speed_change_In),
    178                                                  .write_directed_speed_change(write_directed_speed_change),
    179                                                  .LocalTxPresetCoefficients(LocalTxPresetCoefficients),
    180                                                  .LocalFS(LocalFS),
    181                                                  .LocalLF(LocalLF),
    182                                                  .LocalTxCoefficientsValid(LocalTxCoefficientsValid),
    183                                                  .LinkEvaluationFeedbackDirectionChange(LinkEvaluationFeedbackDirectionChange),
    184                                                  .TxDeemph(TxDeemph),
    185                                                  .LocalPresetIndex(LocalPresetIndex),
    186                                                  .GetLocalPresetCoeffcients(GetLocalPresetCoeffcients),
    187                                                  .LF(LF),
    188                                                  .FS(FS),
    189                                                  .RxEqEval(RxEqEval),
    190                                                  .InvalidRequest(InvalidRequest),
    191                                                  .directed_speed_change(directed_speed_change),
    192                                                  .ReceiverpresetHintDSP(ReceiverpresetHintDSP),
    193                                                  .TransmitterPresetHintDSP(TransmitterPresetHintDSP),
    194                                                  .ReceiverpresetHintUSP(ReceiverpresetHintUSP),
    195                                                  .TransmitterPresetHintUSP(TransmitterPresetHintUSP),
    196                                                  .LF_register(LF_register),
    197                                                  .FS_register(FS_register),
    198                                                  .CursorCoff(CursorCoff),
    199                                                  .PreCursorCoff(PreCursorCoff),
    200                                                  .PostCursorCoff(PostCursorCoff),
    201                                                  .trainToGen(trainToGen),
    202                                                  .LFDSP(LFDSP),
    203                                                  .FSDSP(FSDSP),
    204                                                  .disableScrambler(disableScrambler),
    205                                                  .PCLKRate(PCLKRate),
    206                                                  .startSend16(startSend16),
    207                                                  .turnOffScrambler_flag(turnOffScrambler_flag)
    208                                              );
    209                                              
    210                                              RX #(.DEVICETYPE(DEVICETYPE),.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH),.GEN2_PIPEWIDTH(GEN2_PIPEWIDTH),.GEN3_PIPEWIDTH(GEN3_PIPEWIDTH),.GEN4_PIPEWIDTH(GEN4_PIPEWIDTH),.GEN5_PIPEWIDTH(GEN5_PIPEWIDTH))
    211                                              rx
    212                                              ( .reset(lpreset), 
    213                                              .clk(CLK), 
    214                                              .GEN(GEN), 
    215                                              .PhyStatus(PhyStatus), 
    216                                              .RxValid(RxDataValid),
    217                                              .RxStartBlock(RxStartBlock), 
    218                                              .RxStatus(RxStatus),
    219                                              .RxSyncHeader(RxSyncHeader), 
    220                                              .RxElectricalIdle(RxElectricalIdle),
    221                                              .RxData(RxData), 
    222                                              .RxDataK(RxDataK),
    223                                              .numberOfDetectedLanes(numberOfDetectedLanes),
    224                                              .substate(RXsubstate),
    225                                              .linkNumber(linkNumberRxInput),
    226                                              .pl_tlpstart(pl_tlpstart), 
    227                                              .pl_dllpstart(pl_dlpstart), 
    228                                              .pl_tlpend(pl_tlpend),
    229                                              .pl_dllpend(pl_dlpend), 
    230                                              .pl_tlpedb(pl_tlpedb), 
    231                                              .pl_valid(pl_valid), 
    232                                              .pl_data(pl_data),
    233                                              .pl_speedmode(pl_speedmode), 
    234                                              .rateid(rateid),
    235                                              .linkup(pl_linkUp),
    236                                              .upConfigureCapability(upConfigureCapability),
    237                                              .finish( RXfinish),
    238                                              .exitTo(RXexitTo),
    239                                              .witeUpconfigureCapability(witeUpconfigureCapability),
    240                                              .writerateid(writerateid),
    241                                              .linkNumberOut(linkNumberRxOutput),
    242                                              .writeLinkNumber(WriteLinkNumFlagRx),
    243                                              .ReceiverpresetHintDSPout(ReceiverpresetHintDSPIn),
    244                                              .TransmitterPresetHintDSPout(TransmitterPresetHintDSPIn),
    245                                              .ReceiverpresetHintUSPout(ReceiverpresetHintUSPIn),
    246                                              .TransmitterPresetHintUSPout(TransmitterPresetHintUSPIn),
    247                                              .ReceiverpresetHintDSP(ReceiverpresetHintDSP),
    248                                              .TransmitterPresetHintDSP(TransmitterPresetHintDSP),
    249                                              .ReceiverpresetHintUSP(ReceiverpresetHintUSP),
    250                                              .TransmitterPresetHintUSP(TransmitterPresetHintUSP),
    251                                              .writeReceiverpresetHintDSP(writeReceiverpresetHintDSP),
    252                                              .writeTransmitterPresetHintDSP(writeTransmitterPresetHintDSP),
    253                                              .writeReceiverpresetHintUSP(writeReceiverpresetHintUSP),
    254                                              .writeTransmitterPresetHintUSP(writeTransmitterPresetHintUSP),
    255                                              .LFDSP(LFDSP),
    256                                              .FSDSP(FSDSP),
    257                                              .CursorCoff(CursorCoff),
    258                                              .PreCursorCoff(PreCursorCoff),
    259                                              .PostCursorCoff(PostCursorCoff),
    260                                              .directed_speed_change(directed_speed_change),
    261                                              .trainToGen(trainToGen),
    262                                              .disableScrambler(disableScrambler)
    263                                              );
    264                                              
    265                                              TOP_MODULE #
    266                                              (
    267                                              .MAXPIPEWIDTH(MAXPIPEWIDTH),
    268                                              .DEVICETYPE(DEVICETYPE), //0 for downstream 1 for upstream
    269                                              .LANESNUMBER(LANESNUMBER),
    270                                              .GEN1_PIPEWIDTH(GEN1_PIPEWIDTH),	
    271                                              .GEN2_PIPEWIDTH (GEN2_PIPEWIDTH) ,	
    272                                              .GEN3_PIPEWIDTH (GEN3_PIPEWIDTH),	
    273                                              .GEN4_PIPEWIDTH (GEN4_PIPEWIDTH) ,	
    274                                              .GEN5_PIPEWIDTH (GEN5_PIPEWIDTH),	
    275                                              .MAX_GEN(MAX_GEN))
    276                                              TX
    277                                              (.pclk(CLK),
    278                                              .reset_n(lpreset),
    279                                              .pl_trdy(pl_trdy),
    280                                              .lp_irdy(lp_irdy),
    281                                              .lp_data(lp_data),
    282                                              .lp_valid(lp_valid),
    283                                              .lp_dlpstart(lp_dlpstart),
    284                                              .lp_dlpend(lp_dlpend),
    285                                              .lp_tlpstart(lp_tlpstart),
    286                                              .lp_tlpend(lp_tlpend),
    287                                              .RxStatus(RxStatus),
    288                                              .NumberDetectLanes(NumberDetectLanesfromtx),
    289                                              .TxDetectRx_Loopback(TxDetectRx_Loopback),
    290                                              .PowerDown(PowerDown),
    291                                              .PhyStatus(PhyStatus),
    292                                              .TxElecIdle(TxElecIdle),
    293                                              .WriteDetectLanesFlag(WriteDetectLanesFlag),
    294                                              .SetTXState(SetTXState),
    295                                              .TXFinishFlag(TXFinishFlag),
    296                                              .TXExitTo(TXExitTo), /////////////////////////
    297                                              .WriteLinkNum(linkNumberTxOutput),//////////////////////////////
    298                                              .WriteLinkNumFlag(WriteLinkNumFlagTx),
    299                                              .ReadLinkNum(linkNumberTxInput),
    300                                              .rateIdIn(rateIdInTx),
    301                                              .upConfigureCapabilityIn(upConfigureCapabilityInTX),
    302                                              .MainLTSSMGen(GEN),
    303                                              .TxData16(TxData[31:0]),
    304                                              .TxData15(TxData[63:32]),
    305                                              .TxData14(TxData[95:64]),
    306                                              .TxData13(TxData[127:96]),
    307                                              .TxData12(TxData[159:128]),
    308                                              .TxData11(TxData[191:160]),
    309                                              .TxData10(TxData[223:192]),
    310                                              .TxData9(TxData[255:224]),
    311                                              .TxData8(TxData[287:256]),
    312                                              .TxData7(TxData[319:288]),
    313                                              .TxData6(TxData[351:320]),
    314                                              .TxData5(TxData[383:352]),
    315                                              .TxData4(TxData[415:384]),
    316                                              .TxData3(TxData[447:416]),
    317                                              .TxData2(TxData[479:448]),
    318                                              .TxData1(TxData[511:480]),
    319                                              .TxDataValid16(TxDataValid[0]),
    320                                              .TxDataValid15(TxDataValid[1]),
    321                                              .TxDataValid14(TxDataValid[2]),
    322                                              .TxDataValid13(TxDataValid[3]),
    323                                              .TxDataValid12(TxDataValid[4]),
    324                                              .TxDataValid11(TxDataValid[5]),
    325                                              .TxDataValid10(TxDataValid[6]),
    326                                              .TxDataValid9(TxDataValid[7]),
    327                                              .TxDataValid8(TxDataValid[8]),
    328                                              .TxDataValid7(TxDataValid[9]),
    329                                              .TxDataValid6(TxDataValid[10]),
    330                                              .TxDataValid5(TxDataValid[11]),
    331                                              .TxDataValid4(TxDataValid[12]),
    332                                              .TxDataValid3(TxDataValid[13]),
    333                                              .TxDataValid2(TxDataValid[14]),
    334                                              .TxDataValid1(TxDataValid[15]),
    335                                              .TxDataK16(TxDataK[3:0]),
    336                                              .TxDataK15(TxDataK[7:4]),
    337                                              .TxDataK14(TxDataK[11:8]),
    338                                              .TxDataK13(TxDataK[15:12]),
    339                                              .TxDataK12(TxDataK[19:16]),
    340                                              .TxDataK11(TxDataK[23:20]),
    341                                              .TxDataK10(TxDataK[27:24]),
    342                                              .TxDataK9(TxDataK[31:28]),
    343                                              .TxDataK8(TxDataK[35:32]),
    344                                              .TxDataK7(TxDataK[39:36]),
    345                                              .TxDataK6(TxDataK[43:40]),
    346                                              .TxDataK5(TxDataK[47:44]),
    347                                              .TxDataK4(TxDataK[51:48]),
    348                                              .TxDataK3(TxDataK[55:52]),
    349                                              .TxDataK2(TxDataK[59:56]),
    350                                               .TxDataK1(TxDataK[63:60]),
    351                                              .TxSyncHeader1(TxSyncHeader[1:0]),
    352                                               .TxSyncHeader2(TxSyncHeader[3:2]),
    353                                               .TxSyncHeader3(TxSyncHeader[5:4]),
    354                                               .TxSyncHeader4(TxSyncHeader[7:6]),
    355                                               .TxSyncHeader5(TxSyncHeader[9:8]),
    356                                               .TxSyncHeader6(TxSyncHeader[11:10]),
    357                                               .TxSyncHeader7(TxSyncHeader[13:12]),
    358                                               .TxSyncHeader8(TxSyncHeader[15:14]),
    359                                               .TxSyncHeader9(TxSyncHeader[17:16]),
    360                                               .TxSyncHeader10(TxSyncHeader[19:18]),
    361                                               .TxSyncHeader11(TxSyncHeader[21:20]),
    362                                               .TxSyncHeader12(TxSyncHeader[23:22]),
    363                                               .TxSyncHeader13(TxSyncHeader[25:24]),
    364                                               .TxSyncHeader14(TxSyncHeader[27:26]),
    365                                               .TxSyncHeader15(TxSyncHeader[29:28]),
    366                                               .TxSyncHeader16(TxSyncHeader[31:30]),
    367                                               .TxStartBlock1(TxStartBlock[0]), 
    368                                               .TxStartBlock2(TxStartBlock[1]), 
    369                                               .TxStartBlock3(TxStartBlock[2]), 
    370                                               .TxStartBlock4(TxStartBlock[3]), 
    371                                               .TxStartBlock5(TxStartBlock[4]), 
    372                                               .TxStartBlock6(TxStartBlock[5]), 
    373                                               .TxStartBlock7(TxStartBlock[6]), 
    374                                               .TxStartBlock8(TxStartBlock[7]), 
    375                                               .TxStartBlock9(TxStartBlock[8]),
    376                                               .TxStartBlock10(TxStartBlock[9]), 
    377                                               .TxStartBlock11(TxStartBlock[10]),
    378                                               .TxStartBlock12(TxStartBlock[11]), 
    379                                               .TxStartBlock13(TxStartBlock[12]), 
    380                                               .TxStartBlock14(TxStartBlock[13]), 
    381                                               .TxStartBlock15(TxStartBlock[14]), 
    382                                               .TxStartBlock16(TxStartBlock[15]),
    383                                               .ReceiverpresetHintDSP(ReceiverpresetHintDSP), 
    384                                               .TransmitterPresetHintDSP(TransmitterPresetHintDSP),
    385                                               .ReceiverpresetHintUSP(ReceiverpresetHintUSP),
    386                                               .TransmitterPresetHintUSP(TransmitterPresetHintUSP),
    387                                               .LF_register(LF_register),
    388                                               .FS_register(FS_register),
    389                                               .CursorCoff_register(CursorCoff),
    390                                               .PreCursorCoff_register(PreCursorCoff),
    391                                               .PostCursorCoff_register(PostCursorCoff),
    392                                               .TrainToGen(trainToGen),
    393                                               .ReadDirectSpeedChange(directed_speed_change),
    394                                               .turnOff(disableScrambler),
    395                                               .RxStandby(RxStandby),
    396                                               .startSend16(startSend16),
    397                                               .turnOffScrambler_flag(turnOffScrambler_flag)
    398                                               );
    399                                              
    400                                              assign phy_reset = lpreset;
    401             1                         14     assign Rate = PCLKRate+1;
    402                                              
    403                                              
    404                                              endmodule
    405                                              
    406                                              
    407                                              
    408                                              
    409                                              module pcieTB;
    410                                                  parameter MAXPIPEWIDTH = 32;
    411                                              	parameter DEVICETYPE = 0; //0 for downstream 1 for upstream
    412                                              	parameter LANESNUMBER =16;
    413                                              	parameter GEN1_PIPEWIDTH = 8 ;	
    414                                              	parameter GEN2_PIPEWIDTH = 8 ;	
    415                                              	parameter GEN3_PIPEWIDTH = 8 ;								
    416                                              	parameter GEN4_PIPEWIDTH = 8 ;	
    417                                              	parameter GEN5_PIPEWIDTH = 8 ;	
    418                                              	parameter MAX_GEN = 1;
    419                                              reg CLK;
    420                                              reg reset;
    421                                              //output phy_reset,
    422                                              //PIPE interface width
    423                                              //output [1:0] width, ///////////////////which module
    424                                              //TX_signals
    425                                              wire [1:0] width1;
    426                                              wire [MAXPIPEWIDTH*LANESNUMBER-1:0]TxData1;
    427                                              wire [LANESNUMBER-1:0]TxDataValid1;
    428                                              wire [LANESNUMBER-1:0]TxElecIdle1;
    429                                              wire [LANESNUMBER-1:0]TxStartBlock1;
    430                                              wire [(MAXPIPEWIDTH/8)*LANESNUMBER-1:0]TxDataK1;
    431                                              wire [2*LANESNUMBER -1:0]TxSyncHeader1;
    432                                              wire [LANESNUMBER-1:0]TxDetectRx_Loopback1;
    433                                              //RX_signals
    434                                              
    435                                              wire [LANESNUMBER-1:0]RxDataValid1;////////////////////////////////////////
    436                                              
    437                                              wire[LANESNUMBER-1:0]RxStartBlock1;
    438                                              wire[2*LANESNUMBER -1:0]RxSyncHeader1;
    439                                              wire[LANESNUMBER-1:0]RxValid1;
    440                                              wire [15:0]RxStandby1;
    441                                              reg	[3*LANESNUMBER -1:0]RxStatus1;
    442                                              reg [15:0]RxElectricalIdle1;
    443                                              //commands and status signals
    444                                              wire [4*LANESNUMBER-1:0]PowerDown1;
    445                                              wire  [3:0]Rate1;
    446                                              reg [LANESNUMBER-1:0]PhyStatus1;
    447                                              
    448                                              //pclkcontrolsignal
    449                                              wire [4:0]PCLKRate1;
    450                                              wire PclkChangeAck1;
    451                                              reg  PclkChangeOk1;
    452                                              //eq_signals
    453                                              reg 	[18*LANESNUMBER -1:0]LocalTxPresetCoefficients1;
    454                                              wire 	[18*LANESNUMBER -1:0]TxDeemph1;
    455                                              reg 	[6*LANESNUMBER -1:0]LocalFS1;
    456                                              reg 	[6*LANESNUMBER -1:0]LocalLF1;
    457                                              wire 	[4*LANESNUMBER -1:0]LocalPresetIndex1;
    458                                              wire 	[LANESNUMBER -1:0]GetLocalPresetCoeffcients1;
    459                                              reg 	[LANESNUMBER -1:0]LocalTxCoefficientsValid1;
    460                                              wire 	[6*LANESNUMBER -1:0]LF1;
    461                                              wire 	[6*LANESNUMBER -1:0]FS1;
    462                                              wire 	[LANESNUMBER -1:0]RxEqEval1;
    463                                              wire 	[LANESNUMBER -1:0]InvalidRequest1;
    464                                              reg 	[6*LANESNUMBER -1:0]LinkEvaluationFeedbackDirectionChange1;
    465                                              wire    pl_trdy1;
    466                                              reg     lp_irdy1;
    467                                              reg     [512-1:0]lp_data1;
    468                                              reg     [64-1:0]lp_valid1;
    469                                              wire [512-1:0]pl_data1;
    470                                              wire [64-1:0] pl_valid1;
    471                                              reg  [3:0]lp_state_req1;
    472                                              wire [3:0]pl_state_sts1;
    473                                              wire [2:0]pl_speedmode1;////////////////////////////////////////
    474                                              reg lp_force_detect1;
    475                                              ////lPIF start & end of TLP DLLP
    476                                              reg [64-1:0]lp_dlpstart1;
    477                                              reg [64-1:0]lp_dlpend1;
    478                                              reg  [64-1:0]lp_tlpstart1;
    479                                              reg  [64-1:0]lp_tlpend1;
    480                                              wire [64-1:0]pl_dlpstart1;
    481                                              wire [64-1:0]pl_dlpend1;
    482                                              wire [64-1:0]pl_tlpstart1;
    483                                              wire [64-1:0]pl_tlpend1;
    484                                              wire [64-1:0]pl_tlpedb1;
    485                                              wire pl_linkUp1;
    486                                              //optional Message bus
    487                                              wire [7:0] M2P_MessageBus1;
    488                                              reg  [7:0] P2M_MessageBus1;
    489                                              
    490                                              
    491                                              
    492                                              wire [2:0] width2;
    493                                              wire [MAXPIPEWIDTH*LANESNUMBER-1:0]TxData2;
    494                                              wire [LANESNUMBER-1:0]TxDataValid2;
    495                                              wire [LANESNUMBER-1:0]TxElecIdle2;
    496                                              wire [LANESNUMBER-1:0]TxStartBlock2;
    497                                              wire [(MAXPIPEWIDTH/8)*LANESNUMBER-1:0]TxDataK2;
    498                                              wire [2*LANESNUMBER -1:0]TxSyncHeader2;
    499                                              wire [LANESNUMBER-1:0]TxDetectRx_Loopback2;
    500                                              //RX_signals
    501                                              
    502                                              wire [LANESNUMBER-1:0]RxDataValid2;
    503                                              
    504                                              wire[LANESNUMBER-1:0]RxStartBlock2;
    505                                              wire[2*LANESNUMBER -1:0]RxSyncHeader2;
    506                                              wire[LANESNUMBER-1:0]RxValid2;
    507                                              wire [15:0]RxStandby2;
    508                                              reg	[3*LANESNUMBER -1:0]RxStatus2;
    509                                              reg [15:0]RxElectricalIdle2;
    510                                              //commands and status signals
    511                                              wire [4*LANESNUMBER-1:0]PowerDown2;
    512                                              wire  [3:0]Rate2;
    513                                              reg [LANESNUMBER-1:0]PhyStatus2;
    514                                              
    515                                              //pclkcontrolsignal
    516                                              wire [4:0]PCLKRate2;
    517                                              wire PclkChangeAck2;
    518                                              reg  PclkChangeOk2;
    519                                              //eq_signals
    520                                              reg 	[18*LANESNUMBER -1:0]LocalTxPresetCoefficients2;
    521                                              wire 	[18*LANESNUMBER -1:0]TxDeemph2;
    522                                              reg 	[6*LANESNUMBER -1:0]LocalFS2;
    523                                              reg 	[6*LANESNUMBER -1:0]LocalLF2;
    524                                              wire 	[4*LANESNUMBER -1:0]LocalPresetIndex2;
    525                                              wire 	[LANESNUMBER -1:0]GetLocalPresetCoeffcients2;
    526                                              reg 	[LANESNUMBER -1:0]LocalTxCoefficientsValid2;
    527                                              wire 	[6*LANESNUMBER -1:0]LF2;
    528                                              wire 	[6*LANESNUMBER -1:0]FS2;
    529                                              wire 	[LANESNUMBER -1:0]RxEqEval2;
    530                                              wire 	[LANESNUMBER -1:0]InvalidRequest2;
    531                                              reg 	[6*LANESNUMBER -1:0]LinkEvaluationFeedbackDirectionChange2;
    532                                              wire    pl_trdy2;
    533                                              reg     lp_irdy2;
    534                                              reg     [512-1:0]lp_data2;
    535                                              reg     [64-1:0]lp_valid2;
    536                                              wire [512-1:0]pl_data2;
    537                                              wire [64-1:0] pl_valid2;
    538                                              reg  [3:0]lp_state_req2;
    539                                              wire [3:0]pl_state_sts2;
    540                                              wire [2:0]pl_speedmode2;
    541                                              reg lp_force_detect2;
    542                                              ////lPIF start & end of TLP DLLP
    543                                              reg [64-1:0]lp_dlpstart2;
    544                                              reg [64-1:0]lp_dlpend2;
    545                                              reg  [64-1:0]lp_tlpstart2;
    546                                              reg  [64-1:0]lp_tlpend2;
    547                                              wire [64-1:0]pl_dlpstart2;
    548                                              wire [64-1:0]pl_dlpend2;
    549                                              wire [64-1:0]pl_tlpstart2;
    550                                              wire [64-1:0]pl_tlpend2;
    551                                              wire [64-1:0]pl_tlpedb2;
    552                                              wire pl_linkUp2;
    553                                              //optional Message bus
    554                                              wire [7:0] M2P_MessageBus2;
    555                                              reg  [7:0] P2M_MessageBus2;
    556                                              
    557                                              
    558                                              
    559                                              
    560                                              localparam[1:0]
    561                                                      reset_   = 2'd0,
    562                                                      active_  = 2'd1,
    563                                                      retrain_ = 2'd2;
    564                                              integer i;
    565                                              
    566                                              initial
    567                                              begin
    568                                                  CLK = 0;
    569                                                  reset = 0;
    570                                                  #20
    571                                                  reset = 1;
    572                                                  #10
    573                                                  lp_state_req1 = reset_;
    574                                                  lp_state_req2 = reset_;
    575                                                  #10
    576                                                  wait(TxDetectRx_Loopback1);
    577                                                  #10
    578                                                  PhyStatus1={16{1'b1}};
    579                                                  RxStatus1={16{3'b011}};
    580                                                  PhyStatus2={16{1'b1}};
    581                                                  RxStatus2={16{3'b011}};    
    582                                                  #10
    583                                                  RxStatus1=16'd0;
    584                                                  RxStatus2=16'd0;
    585                                                  lp_state_req1 = active_;
    586                                                  lp_state_req2 = active_;    
    587                                                  //wait(pl_state_sts == 3)
    588                                                  //lp_state_req = retrain_;
    589                                              	wait(pl_linkUp1 && pl_state_sts1==active_ && pl_linkUp2 && pl_state_sts2==active_);
    590                                              	
    591                                              	    
    592                                                /* wait(GetLocalPresetCoeffcients1 == {16{1'b1}} && GetLocalPresetCoeffcients2 == {16{1'b1}});
    593                                                  LocalTxCoefficientsValid1 = {16{1'b1}};
    594                                                  LocalTxPresetCoefficients1={16*18{1'b1}};
    595                                                  LocalLF1={16*6{1'b1}};
    596                                                  LocalFS1={16*6{1'b1}};
    597                                                  LocalTxCoefficientsValid2 = {16{1'b1}};
    598                                                  LocalTxPresetCoefficients2={16*18{1'b1}};
    599                                                  LocalLF2={16*6{1'b1}};
    600                                                  LocalFS2={16*6{1'b1}}; */
    601                                              
    602                                              
    603                                              	@(negedge CLK);
    604                                              	lp_irdy1=1;
    605                                              	for (i=0;i<512;i=i+1) 
    606                                              	begin
    607                                              		lp_data1[i]=$random;
    608                                              		lp_tlpstart1[i]=0;
    609                                              		lp_tlpend1[i]=0;
    610                                              		lp_dlpend1[i]=0;
    611                                              		lp_dlpstart1[i]=0;
    612                                              	end
    613                                              	lp_valid1={2'b00, {62{1'b1}}};
    614                                              	lp_data1[15:4] = 62;
    615                                              	lp_tlpstart1[0]=1;
    616                                              	lp_tlpend1[61]=1;
    617                                                  // lp_dlpstart[0]=1;
    618                                                  // lp_dlpend[5]=1;
    619                                              	#10
    620                                              	lp_irdy1=0;
    621                                              	#75000
    622                                              	$finish();
    623                                              end
    624                                              always #5 CLK = ~CLK;
    625                                              
    626                                              
    627                                              PCIe #(
    628                                                  .MAXPIPEWIDTH(32),
    629                                                  .DEVICETYPE(0), // 0 for downstream, 1 for upstream
    630                                                  .LANESNUMBER(16),
    631                                                  .GEN1_PIPEWIDTH(32),
    632                                                  .GEN2_PIPEWIDTH(32),
    633                                                  .GEN3_PIPEWIDTH(32),
    634                                                  .GEN4_PIPEWIDTH(32),
    635                                                  .GEN5_PIPEWIDTH(32),
    636                                                  .MAX_GEN(1)
    637                                              ) pcie_dut1 (
    638                                                  // clk and reset
    639                                                  .CLK(CLK),
    640                                                  .lpreset(reset),
    641                                                  .phy_reset(phy_reset),
    642                                                  
    643                                                  // PIPE interface width
    644                                                  .width(width1),
    645                                                  
    646                                                  // TX signals
    647                                                  .TxData(TxData1),
    648                                                  .TxDataValid(TxDataValid1),
    649                                                  .TxElecIdle(TxElecIdle1),
    650                                                  .TxStartBlock(TxStartBlock1),
    651                                                  .TxDataK(TxDataK1),
    652                                                  .TxSyncHeader(TxSyncHeader1),
    653                                                  .TxDetectRx_Loopback(TxDetectRx_Loopback1),
    654                                                  
    655                                                  // RX signals
    656                                                  .RxData(TxData2),
    657                                                  .RxDataValid(TxDataValid2),
    658                                                  .RxDataK(TxDataK2),
    659                                                  .RxStartBlock(TxStartBlock2),
    660                                                  .RxSyncHeader(TxSyncHeader2),
    661                                                  .RxStatus(RxStatus1),
    662                                                  .RxElectricalIdle(RxElectricalIdle1),
    663                                                  
    664                                                  
    665                                                  // Commands and status signals
    666                                                  .PowerDown(PowerDown1),
    667                                                  .Rate(Rate1),
    668                                                  .PhyStatus(PhyStatus1),
    669                                                  
    670                                                  // PCLK control signal
    671                                                  .PCLKRate(PCLKRate1),
    672                                                  .PclkChangeAck(PclkChangeAck1),
    673                                                  .PclkChangeOk(PclkChangeOk1),
    674                                                  
    675                                                  // EQ signals
    676                                                  .LocalTxPresetCoefficients(LocalTxPresetCoefficients1),
    677                                                  .TxDeemph(TxDeemph1),
    678                                                  .LocalFS(LocalFS1),
    679                                                  .LocalLF(LocalLF1),
    680                                                  .LocalPresetIndex(LocalPresetIndex1),
    681                                                  .GetLocalPresetCoeffcients(GetLocalPresetCoeffcients1),
    682                                                  .LocalTxCoefficientsValid(LocalTxCoefficientsValid1),
    683                                                  .LF(LF1),
    684                                                  .FS(FS1),
    685                                                  .RxEqEval(RxEqEval1),
    686                                                  .InvalidRequest(InvalidRequest1),
    687                                                  .LinkEvaluationFeedbackDirectionChange(LinkEvaluationFeedbackDirectionChange1),
    688                                                  .pl_trdy(pl_trdy1),
    689                                                  .lp_irdy(lp_irdy1),
    690                                                  .lp_data(lp_data1),
    691                                                  .lp_valid(lp_valid1),
    692                                                  .pl_data(pl_data1),
    693                                                  .pl_valid(pl_valid1),
    694                                                  .lp_state_req(lp_state_req1),
    695                                                  .pl_state_sts(pl_state_sts1),
    696                                                  .pl_speedmode(pl_speedmode1),
    697                                                  .lp_force_detect(lp_force_detect1),
    698                                                  
    699                                                  // LPIF start & end of TLP DLLP
    700                                                  .lp_dlpstart(lp_dlpstart1),
    701                                                  .lp_dlpend(lp_dlpend1),
    702                                                  .lp_tlpstart(lp_tlpstart1),
    703                                                  .lp_tlpend(lp_tlpend1),
    704                                                  .pl_dlpstart(pl_dlpstart1),
    705                                                  .pl_dlpend(pl_dlpend1),
    706                                                  .pl_tlpstart(pl_tlpstart1),
    707                                                  .pl_tlpend(pl_tlpend1),
    708                                                  .pl_tlpedb(pl_tlpedb1),
    709                                                  .pl_linkUp(pl_linkUp1),
    710                                                  
    711                                                  // Optional Message bus
    712                                                  .M2P_MessageBus(M2P_MessageBus1),
    713                                                  .P2M_MessageBus(P2M_MessageBus1),
    714                                                  .RxStandby(RxStandby1)
    715                                              );
    716                                              
    717                                              PCIe #(
    718                                                  .MAXPIPEWIDTH(32),
    719                                                  .DEVICETYPE(1), // 0 for downstream, 1 for upstream
    720                                                  .LANESNUMBER(16),
    721                                                  .GEN1_PIPEWIDTH(32),
    722                                                  .GEN2_PIPEWIDTH(32),
    723                                                  .GEN3_PIPEWIDTH(32),
    724                                                  .GEN4_PIPEWIDTH(32),
    725                                                  .GEN5_PIPEWIDTH(32),
    726                                                  .MAX_GEN(1)
    727                                              ) pcie_dut2 (
    728                                                  // clk and reset
    729                                                  .CLK(CLK),
    730                                                  .lpreset(reset),
    731                                                  .phy_reset(phy_reset),
    732                                                  
    733                                                  // PIPE interface width
    734                                                  .width(width2),
    735                                                  
    736                                                  // TX signals
    737                                                  .TxData(TxData2),
    738                                                  .TxDataValid(TxDataValid2),
    739                                                  .TxElecIdle(TxElecIdle2),
    740                                                  .TxStartBlock(TxStartBlock2),
    741                                                  .TxDataK(TxDataK2),
    742                                                  .TxSyncHeader(TxSyncHeader2),
    743                                                  .TxDetectRx_Loopback(TxDetectRx_Loopback2),
    744                                                  
    745                                                  // RX signals
    746                                                  .RxData(TxData1),
    747                                                  .RxDataValid(TxDataValid1),
    748                                                  .RxDataK(TxDataK1),
    749                                                  .RxStartBlock(TxStartBlock1),
    750                                                  .RxSyncHeader(TxSyncHeader1),
    751                                                  .RxStatus(RxStatus2),
    752                                                  .RxElectricalIdle(RxElectricalIdle2),
    753                                                  
    754                                                  
    755                                                  
    756                                                  // Commands and status signals
    757                                                  .PowerDown(PowerDown2),
    758                                                  .Rate(Rate2),
    759                                                  .PhyStatus(PhyStatus2),
    760                                                  
    761                                                  // PCLK control signal
    762                                                  .PCLKRate(PCLKRate2),
    763                                                  .PclkChangeAck(PclkChangeAck2),
    764                                                  .PclkChangeOk(PclkChangeOk2),
    765                                                  
    766                                                  // EQ signals
    767                                                  .LocalTxPresetCoefficients(LocalTxPresetCoefficients2),
    768                                                  .TxDeemph(TxDeemph2),
    769                                                  .LocalFS(LocalFS2),
    770                                                  .LocalLF(LocalLF2),
    771                                                  .LocalPresetIndex(LocalPresetIndex2),
    772                                                  .GetLocalPresetCoeffcients(GetLocalPresetCoeffcients2),
    773                                                  .LocalTxCoefficientsValid(LocalTxCoefficientsValid2),
    774                                                  .LF(LF2),
    775                                                  .FS(FS2),
    776                                                  .RxEqEval(RxEqEval2),
    777                                                  .InvalidRequest(InvalidRequest2),
    778                                                  .LinkEvaluationFeedbackDirectionChange(LinkEvaluationFeedbackDirectionChange2),
    779                                                  .pl_trdy(pl_trdy2),
    780                                                  .lp_irdy(lp_irdy2),
    781                                                  .lp_data(lp_data2),
    782                                                  .lp_valid(lp_valid2),
    783                                                  .pl_data(pl_data2),
    784                                                  .pl_valid(pl_valid2),
    785                                                  .lp_state_req(lp_state_req2),
    786                                                  .pl_state_sts(pl_state_sts2),
    787                                                  .pl_speedmode(pl_speedmode2),
    788                                                  .lp_force_detect(lp_force_detect2),
    789                                                  
    790                                                  // LPIF start & end of TLP DLLP
    791                                                  .lp_dlpstart(lp_dlpstart2),
    792                                                  .lp_dlpend(lp_dlpend2),
    793                                                  .lp_tlpstart(lp_tlpstart2),
    794                                                  .lp_tlpend(lp_tlpend2),
    795                                                  .pl_dlpstart(pl_dlpstart2),
    796                                                  .pl_dlpend(pl_dlpend2),
    797                                                  .pl_tlpstart(pl_tlpstart2),
    798                                                  .pl_tlpend(pl_tlpend2),
    799                                                  .pl_tlpedb(pl_tlpedb2),
    800                                                  .pl_linkUp(pl_linkUp2),
    801                                                  
    802                                                  // Optional Message bus
    803                                                  .M2P_MessageBus(M2P_MessageBus2),
    804                                                  .P2M_MessageBus(P2M_MessageBus2),
    805                                                  .RxStandby(RxStandby2)
    806                                              );
    807                                              
    808                                              
    809                                              
    810                                              
    811                                              
    812                                              endmodule


=================================================================================
=== File: RTL/PIPE_Control.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           22        22         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/PIPE_Control.v --

    1                                                module PIPE_Control(substate, generation, pclk, reset_n, RxStatus, ElecIdle_req, Detect_req, PhyStatus, TxDetectRx_Loopback, PowerDown, Detect_status, TxElecIdle,RxStandbyRequest,RxStandby);
    2                                                
    3                                                
    4                                                parameter number_of_lanes= 4;
    5                                                parameter  DetectQuiet = 4'b0000, DetectActive = 4'b0001, PollingActive = 4'b0010,
    6                                                      PollingConfigration = 4'b0011, ConfigrationLinkWidthStart = 4'b0100, ConfigrationLinkWidthAccept= 4'b0101,
    7                                                            ConfigrationLaneNumWait = 4'b0110,  ConfigrationLaneNumActive = 4'b0111, ConfigrationComplete = 4'b1000,
    8                                                            ConfigrationIdle = 4'b1001,L0=4'b1010 ,Idle=4'b1111;
    9                                                
    10                                               input pclk, reset_n;
    11                                               input [4:0] substate;
    12                                               input [2:0] generation;
    13                                               input [2:0] RxStatus; 
    14                                               input ElecIdle_req, Detect_req, PhyStatus;
    15                                               input RxStandbyRequest;
    16                                               output reg TxDetectRx_Loopback;
    17                                               output reg [3:0] PowerDown;
    18                                               output reg Detect_status; 
    19                                               output reg TxElecIdle;
    20                                               output reg RxStandby;
    21                                               
    22                                               reg TxDetectRx_Loopback_reg;
    23                                               reg [2:0]last_gen   ;
    24                                               reg [4:0]last_substate; //marwan
    25              1                      11152     always @(posedge pclk or negedge reset_n) begin
    26                                               
    27                                                 //marwan//
    28                                                 if(last_gen <= 1)
    29              1                       5824         last_gen<=generation ;
    30                                               
    31                                                 //marwan
    32                                                 if (~reset_n) begin
    33              1                        288         last_gen=0;
    34              1                        288       	PowerDown= 2;
    35              1                        288       	Detect_status=0;
    36              1                        288       	TxElecIdle=1;
    37              1                        288       	TxDetectRx_Loopback_reg=0;
    38              1                        288         RxStandby = 1'b0;
    39                                                 end
    40                                               
    41                                                 else begin
    42                                                     
    43                                               
    44                                               
    45                                                     if (ElecIdle_req==1 || substate == DetectQuiet || substate == DetectActive) begin
    46              1                       4800                 TxElecIdle=1;
    47                                                     end
    48                                                     else if(substate > 1) begin
    49              1                       6016                 TxElecIdle=0;
    50                                                     end
    51                                               
    52                                                     if(substate == DetectQuiet || substate  == DetectActive) begin
    53              1                       4048             PowerDown = 2;
    54                                                     end
    55                                                     else if(substate > 1) begin
    56              1                       6768             PowerDown = 0;
    57                                                     end
    58                                                       
    59                                                     if (Detect_req==1 && Detect_status == 0) begin
    60              1                       1904               TxDetectRx_Loopback_reg =1;
    61                                                     end
    62                                               
    63                                                     if (PhyStatus==1 && RxStatus==3'b011 && TxDetectRx_Loopback_reg == 1) begin
    64                                                       //  TxDetectRx_Loopback_reg =0;
    65              1                       1120               Detect_status=1;      
    66                                                     end
    67                                                     else begin
    68              1                       9744               Detect_status=0;
    69                                                     end
    70                                               
    71                                                     if(RxStandbyRequest)
    72                                                     begin
    73              1                        384             RxStandby = 1'b1;
    74                                                     end
    75              1                      10480           else RxStandby = 1'b0;
    76                                               
    77                                                 end
    78                                               
    79                                               
    80                                                end
    81                                               
    82              1                       6112      always@* begin
    83                                               
    84                                                     //---marwan--//
    85                                                     if ( (substate == DetectQuiet) && (last_substate != 10)) begin
    86              1                        496                 TxDetectRx_Loopback=0;
    87                                                     end
    88                                                     else if((substate == DetectQuiet) && (last_gen > 1))begin
    89              1                         32                 TxDetectRx_Loopback=0;
    90                                                     end
    91                                                     else begin
    92              1                       5584             TxDetectRx_Loopback = TxDetectRx_Loopback_reg ;
    93                                                     end
    94              1                       6112           last_substate = substate;
    95                                                     //---marwan--//
    96                                               
    97                                                end
    98                                               
    99                                                endmodule


=================================================================================
=== File: RTL/PIPE_Data.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           20        15         5      75.0

================================Statement Details================================

Statement Coverage for file RTL/PIPE_Data.v --

    1                                                module PIPE_Data #(parameter pipe_width_gen1 = 8,
    2                                                                   parameter pipe_width_gen2 = 8,
    3                                                                   parameter pipe_width_gen3 = 16,
    4                                                                   parameter pipe_width_gen4 = 32,
    5                                                                   parameter pipe_width_gen5 = 32
    6                                                
    7                                                  )(generation, pclk, reset_n, scramblerDataOut, scramblerDataK, scramblerSyncHeader, scramblerDataValid, TxData, TxDataValid, TxDataK, TxSyncHeader, TxStartBlock);
    8                                                
    9                                                
    10                                               //reg [5:0] pipe_width;
    11                                               
    12                                               input pclk, reset_n;
    13                                               input [2:0] generation;
    14                                               input [31:0] scramblerDataOut;
    15                                               input [3:0] scramblerDataK;
    16                                               input [1:0] scramblerSyncHeader;
    17                                               input scramblerDataValid;
    18                                               
    19                                               output reg [31:0] TxData; 
    20                                               output reg TxDataValid, TxStartBlock; 
    21                                               output reg [3:0] TxDataK;
    22                                               output reg [1:0] TxSyncHeader;
    23                                               
    24              1                   17235576     always @(/*posedge pclk or negedge reset_n*/*) begin
    25                                                 if (~reset_n) begin
    26              1                        336       	TxData = 0;
    27              1                        336       	TxDataK = 0;
    28              1                        336       	TxDataValid = 0;
    29              1                        336         TxSyncHeader = 0;
    30              1                        336         TxStartBlock = 0;
    31                                                 end
    32                                                 else if (generation==1) begin
    33                                               //  		pipe_width=pipe_width_gen1;
    34              1                    4825104       		TxData= scramblerDataOut[pipe_width_gen1-1:0];
    35              1                    4825104       		TxDataK=scramblerDataK[(pipe_width_gen1/8)-1:0];
    36              1                    4825104       		TxDataValid= scramblerDataValid;
    37                                                 end
    38                                                /* else if (generation==2) begin
    39                                                 //  	pipe_width=pipe_width_gen2;
    40                                                 		TxData= scramblerDataOut[pipe_width_gen2-1:0];
    41                                                 		TxDataK=scramblerDataK[(pipe_width_gen2/8)-1:0];
    42                                                 		TxDataValid= scramblerDataValid;
    43                                                 end 
    44                                                 else if (generation==3) begin
    45                                                  // 	pipe_width=pipe_width_gen3;
    46                                                 		TxData= scramblerDataOut[pipe_width_gen3-1:0];
    47                                                 		TxDataK=scramblerDataK[(pipe_width_gen3/8)-1:0];
    48                                                 		TxDataValid= scramblerDataValid;
    49                                                     TxSyncHeader= scramblerSyncHeader;
    50                                                     if(scramblerSyncHeader==2'b10 || scramblerSyncHeader==2'b01)
    51                                                         TxStartBlock=1;
    52                                                     else 
    53                                                         TxStartBlock=0;
    54                                                 end 
    55                                                 else if (generation==4) begin
    56                                                   //	pipe_width=pipe_width_gen4;
    57                                                 		TxData= scramblerDataOut[pipe_width_gen4-1:0];
    58                                                 		TxDataK=scramblerDataK[(pipe_width_gen4/8)-1:0];
    59                                                 		TxDataValid= scramblerDataValid;
    60                                                     TxSyncHeader= scramblerSyncHeader;
    61                                                     if(scramblerSyncHeader==2'b10 || scramblerSyncHeader==2'b01)
    62                                                         TxStartBlock=1;
    63                                                     else 
    64                                                         TxStartBlock=0;      
    65                                                 end*/
    66                                                 else if (generation==5) begin
    67                                                     //	pipe_width=pipe_width_gen5;
    68              1                   12410136       		TxData= scramblerDataOut[pipe_width_gen5-1:0];
    69              1                   12410136       		TxDataK=scramblerDataK[(pipe_width_gen5/8)-1:0];
    70              1                   12410136       		TxDataValid= scramblerDataValid;
    71              1                   12410136           TxSyncHeader= scramblerSyncHeader;   
    72                                                     if(scramblerSyncHeader==2'b10 || scramblerSyncHeader==2'b01)
    73              1                    3122712               TxStartBlock=1;
    74                                                     else 
    75              1                    9287424               TxStartBlock=0;   
    76                                                 end  
    77                                                 else begin
    78              1                    ***0***       		TxData=0;
    79              1                    ***0***       		TxDataK=0;
    80              1                    ***0***       		TxDataValid=0;
    81              1                    ***0***           TxSyncHeader= 0;
    82              1                    ***0***           TxStartBlock = 0;
    83                                                 end
    84                                               end
    85                                               endmodule
    86                                               


=================================================================================
=== File: RTL/PIPE_Rx_Data.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           20        20         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/PIPE_Rx_Data.v --

    1                                                module PIPE_Rx_Data #(parameter GEN1_PIPEWIDTH = 8, parameter GEN2_PIPEWIDTH = 16, parameter GEN3_PIPEWIDTH = 32, parameter GEN4_PIPEWIDTH = 8,
    2                                                					 parameter GEN5_PIPEWIDTH = 8)(input wire reset, input wire clk, input wire [2:0]GEN, input wire PhyStatus, input wire RxValid,
    3                                                												input wire RxStartBlock, input wire [2:0]RxStatus, input wire [1:0]RxSyncHeader, input wire RxElectricalIdle,
    4                                                												input wire [31:0]RxData, input wire [3:0]RxDataK, output wire [1:0]PIPESyncHeader, output [5:0]PIPEWIDTH,
    5                                                												output wire PIPEElectricalIdle, output wire PIPEDataValid, output wire [31:0]PIPEData, output wire [3:0]PIPEDataK);
    6                                                	
    7                                                	reg  dataValid, dataValid_next;
    8                                                	reg [1:0]syncHeader, syncHeader_next;
    9                                                	reg [5:0] pipeWidth;
    10                                               	reg [31:0] data, data_next;
    11                                               	reg [3:0]dataK, dataK_next;
    12              1                   12125280     	always@(posedge clk or negedge reset)
    13                                               	if(!reset)
    14                                               	begin
    15              1                        288     		data <= 0;
    16              1                        288     		dataK <= 0;
    17              1                        288     		dataValid <= 0;
    18              1                        288     		syncHeader <= 0;
    19                                               	end
    20                                               	else 
    21                                               	begin
    22              1                   12124992     		data <= data_next;
    23              1                   12124992     		dataK <= dataK_next;
    24              1                   12124992     		dataValid <= dataValid_next;
    25              1                   12124992     		syncHeader <= syncHeader_next;
    26                                               	end
    27                                               
    28              1                    9739200     	always@*
    29                                               		begin
    30                                               		if(RxStatus == 0)
    31              1                    9738560     			dataValid_next = RxValid;
    32                                               		else 
    33              1                        640     			dataValid_next = 0;
    34                                               
    35                                               		if(RxStartBlock == 1)
    36              1                     862016     			syncHeader_next = RxSyncHeader;
    37                                               		else 
    38              1                    8877184     			syncHeader_next = 0;
    39                                               
    40                                               		if(GEN == 1)
    41                                               			begin
    42              1                    4639280     			data_next = RxData[GEN1_PIPEWIDTH-1:0];
    43              1                    4639280     			dataK_next = RxDataK[(GEN1_PIPEWIDTH/8)-1:0];
    44              1                    4639280     			pipeWidth = GEN1_PIPEWIDTH;
    45                                               			end
    46                                               		/*else if(GEN == 2)
    47                                               			begin
    48                                               			data_next = RxData[GEN2_PIPEWIDTH-1:0];
    49                                               			dataK_next = RxDataK[(GEN2_PIPEWIDTH/8)-1:0];
    50                                               			pipeWidth = GEN2_PIPEWIDTH;
    51                                               			end
    52                                               		else if(GEN == 3)
    53                                               			begin
    54                                               			data_next = RxData[GEN3_PIPEWIDTH-1:0];
    55                                               			dataK_next = RxDataK[(GEN3_PIPEWIDTH/8)-1:0];
    56                                               			pipeWidth = GEN3_PIPEWIDTH;
    57                                               			end
    58                                               		else if(GEN == 4)
    59                                               			begin
    60                                               			data_next = RxData[GEN4_PIPEWIDTH-1:0];
    61                                               			dataK_next = RxDataK[(GEN4_PIPEWIDTH/8)-1:0];
    62                                               			pipeWidth = GEN4_PIPEWIDTH;
    63                                               			end*/
    64                                               		else if(GEN == 5)
    65                                               			begin
    66              1                    5099920     			data_next = RxData[GEN5_PIPEWIDTH-1:0];
    67              1                    5099920     			dataK_next = RxDataK[(GEN5_PIPEWIDTH/8)-1:0];
    68              1                    5099920     			pipeWidth = GEN5_PIPEWIDTH;
    69                                               			end
    70                                               
    71                                               		end
    72                                               
    73                                               	assign PIPEData = data_next;
    74                                               	assign PIPEDataK = dataK_next;
    75                                               	assign PIPEWIDTH = pipeWidth;
    76                                               	assign PIPEDataValid = dataValid_next;
    77                                               	assign PIPESyncHeader = syncHeader_next;
    78                                               	assign PIPEElectricalIdle = RxElectricalIdle;
    79                                               
    80                                               endmodule


=================================================================================
=== File: RTL/RxLTSSM.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            5         5         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/RxLTSSM.v --

    1                                                module RxLTSSM #(
    2                                                parameter DEVICETYPE=0,
    3                                                parameter Width = 32,
    4                                                parameter GEN1_PIPEWIDTH = 8 ,	
    5                                                parameter GEN2_PIPEWIDTH = 8 ,	
    6                                                parameter GEN3_PIPEWIDTH = 8 ,	
    7                                                parameter GEN4_PIPEWIDTH = 8 ,	
    8                                                parameter GEN5_PIPEWIDTH = 8)
    9                                                 (
    10                                               input [2:0]Gen,
    11                                               input clk,
    12                                               input reset,
    13                                               input [2047:0] orderedSets,
    14                                               input [4:0]numberOfDetectedLanes,
    15                                               input [4:0]substate,
    16                                               input [7:0]linkNumber,
    17                                               input directed_speed_change,
    18                                               input [2:0] trainToGen,
    19                                               input rxElectricalIdle,
    20                                               input validOrderedSets,
    21                                               output [7:0] rateId,
    22                                               output [7:0] linkNumberOut,
    23                                               output upConfigureCapability,
    24                                               output finish,
    25                                               output [4:0]exitTo,
    26                                               output witeUpconfigureCapability,
    27                                               output writerateid,
    28                                               output writeLinkNumber,
    29                                               output [3:0]lpifStatus,
    30                                               output [3*16-1:0] ReceiverpresetHintDSPout,
    31                                               output [4*16-1:0] TransmitterPresetHintDSPout,
    32                                               output [3*16-1:0] ReceiverpresetHintUSPout,
    33                                               output [4*16-1:0] TransmitterPresetHintUSPout,
    34                                               input [3*16-1:0] ReceiverpresetHintDSP,
    35                                               input [4*16-1:0] TransmitterPresetHintDSP,
    36                                               input [3*16-1:0] ReceiverpresetHintUSP,
    37                                               input [4*16-1:0] TransmitterPresetHintUSP,
    38                                               output writeReceiverpresetHintDSP,
    39                                               output writeTransmitterPresetHintDSP,
    40                                               output writeReceiverpresetHintUSP,
    41                                               output writeTransmitterPresetHintUSP,
    42                                               output [16*6-1:0]LFDSP,
    43                                               output [16*6-1:0]FSDSP,
    44                                               input  [6*16-1:0]CursorCoff,
    45                                               input  [6*16-1:0]PreCursorCoff,
    46                                               input  [6*16-1:0]PostCursorCoff
    47                                               );
    48                                               
    49                                               wire [15:0]resetOsCheckers;
    50                                               wire [15:0]countUp,resetCounters;
    51                                               wire [127:0]rateIds;
    52                                               wire [127:0]linkNumbers;
    53                                               wire [15:0]upConfigurebits;
    54                                               wire [79:0]countersValues;
    55                                               wire [4:0] checkValues;
    56                                               wire [15:0]comparisonValues;
    57                                               wire  enableTimer,startTimer,resetTimer,timeOut;
    58                                               wire [2:0]setTimer;
    59                                               wire [15:0]RcvrCfgToidle;
    60                                               wire [15:0]detailedRecoverySubstates;
    61                                               wire PAD_TS;
    62                                               
    63                                               genvar i;
    64                                               generate
    65                                                  for (i=0; i <= 15; i=i+1) 
    66                                                  begin
    67                                                    osChecker #(.DEVICETYPE(DEVICETYPE),.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH),.GEN2_PIPEWIDTH(GEN2_PIPEWIDTH),
    68                                                    .GEN3_PIPEWIDTH(GEN3_PIPEWIDTH),.GEN4_PIPEWIDTH(GEN4_PIPEWIDTH),.GEN5_PIPEWIDTH(GEN5_PIPEWIDTH))
    69                                                    osChecker( 
    70                                                     .clk(clk),
    71                                                     .linkNumber(linkNumber),
    72                                                     .laneNumber(i[7:0]),
    73                                                     .orderedset(orderedSets[(i*128)+127:i*128]),
    74                                                     .valid(validOrderedSets),
    75                                                     .substate(substate),
    76                                                     .reset(resetOsCheckers[i]),
    77                                                     .directed_speed_change(directed_speed_change),
    78                                                     .detailedRecoverySubstates(detailedRecoverySubstates[i]),
    79                                                     .gen(Gen),
    80                                                     .trainToGen(trainToGen),
    81                                                     .countup(countUp[i]),
    82                                                     .resetcounter(resetCounters[i]),
    83                                                     .rateid(rateIds[(i*8)+7:i*8]),
    84                                                     .linkNumberOut(linkNumbers[(i*8)+7:i*8]),
    85                                                     .upconfigure_capability(upConfigurebits[i]),
    86                                                     .RcvrCfgToidle(RcvrCfgToidle[i]),
    87                                                     .ReceiverpresetHintDSPout(ReceiverpresetHintDSPout[(i*3)+2:i*3]),
    88                                                     .TransmitterPresetHintDSPout(TransmitterPresetHintDSPout[(i*4)+3:i*4]),
    89                                                     .ReceiverpresetHintUSPout(ReceiverpresetHintUSPout[(i*3)+2:i*3]),
    90                                                     .TransmitterPresetHintUSPout(TransmitterPresetHintUSPout[(i*4)+3:i*4]),
    91                                                     .ReceiverpresetHintDSP(ReceiverpresetHintDSP[(i*3)+2:i*3]),
    92                                                     .TransmitterPresetHintDSP(TransmitterPresetHintDSP[(i*4)+3:i*4]),
    93                                                     .ReceiverpresetHintUSP(ReceiverpresetHintUSP[(i*3)+2:i*3]),
    94                                                     .TransmitterPresetHintUSP(TransmitterPresetHintUSP[(i*4)+3:i*4]),
    95                                                     .FSDSP(FSDSP[(i*6)+5:i*6]),
    96                                                     .LFDSP(LFDSP[(i*6)+5:i*6]),
    97                                                     .CursorCoff(CursorCoff[(i*6)+5:i*6]),
    98                                                     .PreCursorCoff(PreCursorCoff[(i*6)+5:i*6]),
    99                                                     .PostCursorCoff(PostCursorCoff[(i*6)+5:i*6]),
    100                                                    .PAD_TS(PAD_TS)
    101                                                   );
    102                                              
    103                                                   counter counter(
    104                                                   resetCounters[i],
    105                                                   clk,
    106                                                   countUp[i],
    107                                                   countersValues[(i*5)+4:i*5]);
    108                                              
    109                                                   comparator comparator(
    110                                                   countersValues[(i*5)+4:i*5],
    111                                                   checkValues,
    112                                                   comparisonValues[i]);
    113                                              
    114                                                   
    115                                                 end
    116                                              endgenerate
    117                                              
    118                                              
    119                                              masterRxLTSSM#(.DEVICETYPE(DEVICETYPE),.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH),.GEN2_PIPEWIDTH(GEN2_PIPEWIDTH),
    120                                              .GEN3_PIPEWIDTH(GEN3_PIPEWIDTH),.GEN4_PIPEWIDTH(GEN4_PIPEWIDTH),.GEN5_PIPEWIDTH(GEN5_PIPEWIDTH)) 
    121                                              masterRxLTSSM(
    122                                                  .clk(clk),
    123                                                  .numberOfDetectedLanes(numberOfDetectedLanes),
    124                                                  .substate(substate),
    125                                                  .countersComparators(comparisonValues),
    126                                                  .rxElectricalIdle(rxElectricalIdle),
    127                                                  .timeOut(timeOut),
    128                                                  .reset(reset),
    129                                                  .RcvrCfgToidle(RcvrCfgToidle),
    130                                                  .detailedRecoverySubstates(detailedRecoverySubstates),
    131                                                  .finish(finish),
    132                                                  .exitTo(exitTo),
    133                                                  .resetOsCheckers(resetOsCheckers),
    134                                                  .lpifStatus(lpifStatus),
    135                                                  .timeToWait(setTimer),
    136                                                  .enableTimer(enableTimer),
    137                                                  .startTimer(startTimer),
    138                                                  .resetTimer(resetTimer),
    139                                                  .comparatorsCount(checkValues),
    140                                                  .trainToGen(trainToGen),
    141                                                  .gen(Gen),
    142                                                  .PAD_TS(PAD_TS));
    143                                               
    144                                              Timer #(
    145                                              Width,
    146                                              GEN1_PIPEWIDTH,	
    147                                              GEN2_PIPEWIDTH,	
    148                                              GEN3_PIPEWIDTH,	
    149                                              GEN4_PIPEWIDTH,	
    150                                              GEN5_PIPEWIDTH
    151                                              )
    152                                              timer
    153                                              (
    154                                              Gen,
    155                                              resetTimer,
    156                                              clk,
    157                                              enableTimer,
    158                                              startTimer,
    159                                              setTimer,
    160                                              timeOut
    161                                              );
    162                                              
    163             1                      11900     assign writerateid= (finish &&(exitTo == 4'd4|| exitTo == 4'd9))? 1'b1 : 1'b0;
    164             1                      11900     assign witeUpconfigureCapability=(finish &&(exitTo == 4'd4|| exitTo == 4'd9))? 1'b1 : 1'b0;
    165             1                       5706     assign writeLinkNumber = (finish && (exitTo == 4'd5) && DEVICETYPE)? 1'b1:1'b0;
    166                                              assign {rateId,upConfigureCapability,linkNumberOut} = {rateIds[7:0],upConfigurebits[0],linkNumbers[7:0]};
    167             1                       5881     assign {writeReceiverpresetHintDSP,writeTransmitterPresetHintDSP} = (DEVICETYPE&&substate ==4'd12&&finish&&exitTo == 4'd13)? 2'b11:2'b00;
    168             1                       6367     assign {writeReceiverpresetHintUSP,writeTransmitterPresetHintUSP} = (!DEVICETYPE&&substate ==4'd12&&finish&&exitTo == 4'd13)? 2'b11:2'b00;
    169                                              
    170                                              endmodule


=================================================================================
=== File: RTL/Scrambler.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           33        33         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/Scrambler.v --

    1                                                module Scrambler (input wire pclk, input wire reset_n, input wire turnOff, input wire [5:0]PIPEWIDTH,state, input wire [1:0]LMCSyncHeader_1,
    2                                                				  input wire [23:0]seedValue, input wire [31:0]dataout_1, input wire [3:0]d_k_out_1, input wire data_valid_out_1, 
    3                                                				  input wire [2:0]GEN , output wire [31:0]scramblerDataOut, output wire [3:0]scramblerDataK, output wire scramblerDataValid,
    4                                                				  output wire [1:0]scramblerSyncHeader);
    5                                                
    6                                                	wire patternReset;
    7                                                	wire [3:0]advance;
    8                                                	wire [1:0]lfsrSel;
    9                                                	wire [3:0]scramblingEnable;
    10                                               	wire [31:0]lfsrOut_8, lfsrOut_16, lfsrOut_32, lfsrOut_8_gen3, lfsrOut_16_gen3, lfsrOut_32_gen3;
    11                                               	reg [7:0] reg1, reg2, reg3, reg4;
    12                                               	reg [31:0]data, lfsrOut;
    13                                               
    14                                               //sync header: 01 -> data block , 10 -> OS
    15                                               
    16                                               // seedValue of Lane 1 = 1dbfbc
    17                                               // seedValue of Lane 2 = 0607bb
    18                                               // seedValue of Lane 3 = 1ec760
    19                                               // seedValue of Lane 4 = 18c0db
    20                                               // seedValue of Lane 5 = 010f12
    21                                               // seedValue of Lane 6 = 19cfc9
    22                                               // seedValue of Lane 7 = 0277ce
    23                                               // seedValue of Lane 8 = 1bb807
    24                                               
    25                                               
    26                                               	LFSR_8 lfsr_8(.scrambler_reset(patternReset), .reset_n(reset_n), .pclk(pclk), .data_out(lfsrOut_8[7:0]));
    27                                               	LFSR_16 lfsr_16(.scrambler_reset(patternReset), .reset_n(reset_n), .pclk(pclk), .data_out(lfsrOut_16[15:0]));
    28                                               	LFSR_32 lfsr_32(.scrambler_reset(patternReset), .reset_n(reset_n), .pclk(pclk), .data_out(lfsrOut_32));					
    29                                               
    30                                               
    31                                               	LFSR_8_gen3 lfsr_8_gen3(.seedValue(seedValue), .scrambler_reset(patternReset), .reset_n(reset_n), .pclk(pclk), .data_out(lfsrOut_8_gen3[7:0]));
    32                                               	LFSR_16_gen3 lfsr_16_gen3(.seedValue(seedValue), .scrambler_reset(patternReset), .reset_n(reset_n), .pclk(pclk), .data_out(lfsrOut_16_gen3[15:0]));
    33                                               	LFSR_32_gen3 lfsr_32_gen3(.seedValue(seedValue), .scrambler_reset(patternReset), .reset_n(reset_n), .pclk(pclk), .data_out(lfsrOut_32_gen3));					
    34                                               
    35                                               
    36                                               	Master_Tx master_tx(.turnOff(turnOff), .syncHeader(LMCSyncHeader_1), .PIPEWIDTH(PIPEWIDTH), .masterData(dataout_1),.masterDataValid(data_valid_out_1),.TX_State(state),.masterDataK(d_k_out_1) ,.GEN(GEN),
    37                                               				 .patternReset(patternReset), .LFSRSel(lfsrSel), .advance(advance), .scramblingEnable(scramblingEnable));
    38                                               
    39              1                   40508768     	always@*
    40                                               
    41                                               	if(GEN < 3) begin
    42                                               		if(lfsrSel == 0)
    43              1                          E     			lfsrOut = lfsrOut_8;
    44                                               		else if(lfsrSel == 1)
    45              1                          E     			lfsrOut = lfsrOut_16;
    46                                               		else 
    47              1                   30044032     			lfsrOut = lfsrOut_32;
    48                                               	end
    49                                               	else begin
    50                                               		if(lfsrSel == 0)
    51              1                          E     			lfsrOut = lfsrOut_8_gen3;
    52                                               		else if(lfsrSel == 1)
    53              1                          E     			lfsrOut = lfsrOut_16_gen3;
    54                                               		else 
    55              1                   10464736     			lfsrOut = lfsrOut_32_gen3;
    56                                               	end
    57                                               
    58                                               
    59              1                    5282464     	always@(*)
    60                                               		if(!reset_n)
    61                                               			begin
    62              1                        512     			reg1 <= 0;
    63              1                        512     			reg2 <= 0;
    64              1                        512     			reg3 <= 0;
    65              1                        512     			reg4 <= 0;
    66              1                        512     			data <=0;
    67              1                        512     			lfsrOut <=0;
    68                                               			end
    69                                               		else 
    70                                               			begin
    71                                               			if(advance[0] == 1)
    72              1                    5281808     				reg1 <= lfsrOut[7:0];
    73                                               			if(advance[1] == 1)
    74              1                    5281808     				reg2 <= lfsrOut[15:8];
    75                                               			if(advance[2] == 1)
    76              1                    5281808     				reg3 <= lfsrOut[23:16];
    77                                               			if(advance[3] == 1)
    78              1                    5281808     				reg4 <= lfsrOut[31:24];
    79                                               			end
    80                                               
    81              1                   13497784     	always@*
    82                                               		begin
    83                                               			if(GEN < 3)
    84                                               			begin
    85                                               				if(d_k_out_1[0] == 0)
    86              1                    4488032     					data[7:0] = reg1 ^ dataout_1[7:0];
    87                                               				else 
    88              1                     320336     					data[7:0] = dataout_1[7:0];
    89                                               				if(d_k_out_1[1] == 0)
    90              1                    3732112     					data[15:8] = reg2 ^ dataout_1[15:8];
    91                                               				else 
    92              1                    1076256     					data[15:8] = dataout_1[15:8];
    93                                               				if(d_k_out_1[2] == 0)
    94              1                    3774192     					data[23:16] = reg3 ^ dataout_1[23:16];
    95                                               				else 
    96              1                    1034176     					data[23:16] = dataout_1[23:16];
    97                                               				if(d_k_out_1[3] == 0)
    98              1                    3458608     					data[31:24] = reg4 ^ dataout_1[31:24];
    99                                               				else 
    100             1                    1349760     					data[31:24] = dataout_1[31:24];
    101                                              			end
    102                                              		end
    103                                              			
    104             1                   14793048     	always@*
    105                                              		begin
    106                                              			if(GEN >= 3)
    107                                              			begin
    108                                              				if(scramblingEnable[0])
    109             1                    9927400     					data[7:0] = reg1 ^ dataout_1[7:0];
    110                                              				else
    111             1                      57248     					data[7:0] = dataout_1[7:0];
    112                                              				if(scramblingEnable[1])
    113             1                    9927400     					data[15:8] = reg2 ^ dataout_1[15:8];
    114                                              				else 
    115             1                      57248     					data[15:8] = dataout_1[15:8];
    116                                              				if(scramblingEnable[2])
    117             1                    9927400     					data[23:16] = reg3 ^ dataout_1[23:16];
    118                                              				else 
    119             1                      57248     					data[23:16] = dataout_1[23:16];
    120                                              				if(scramblingEnable[3])
    121             1                    7985032     					data[31:24] = reg4 ^ dataout_1[31:24];
    122                                              				else 
    123             1                    1999616     					data[31:24] = dataout_1[31:24];
    124                                              			end
    125                                              		end
    126                                              			
    127                                              
    128             1                   22950512     	 assign scramblerDataOut =   (turnOff == 1 && GEN < 3)? dataout_1 : 
    129                                              								(PIPEWIDTH ==8)? {24'b0, data[7:0]} :
    130                                              								(PIPEWIDTH ==16)? {16'b0, data[15:0]} :
    131                                              								(PIPEWIDTH ==32)? data : 32'b0 ;
    132                                              
    133                                              
    134                                              	assign scramblerDataK = d_k_out_1;	
    135                                              	assign scramblerDataValid = data_valid_out_1;
    136                                              	assign scramblerSyncHeader = LMCSyncHeader_1;
    137                                              
    138                                              endmodule
    139                                              
    140                                              
    141                                              
    142                                              
    143                                              
    144                                              module tb_Scrambler;
    145                                              
    146                                              // Inputs
    147                                              reg pclk;
    148                                              reg reset_n;
    149                                              reg turnOff;
    150                                              reg [5:0] PIPEWIDTH;
    151                                              reg [1:0] LMCSyncHeader_1;
    152                                              reg [23:0] seedValue;
    153                                              reg [31:0] dataout_1;
    154                                              reg [3:0] d_k_out_1;
    155                                              reg data_valid_out_1;
    156                                              reg [2:0] GEN;
    157                                              
    158                                              // Outputs
    159                                              wire [31:0] scramblerDataOut;
    160                                              wire [3:0] scramblerDataK;
    161                                              wire scramblerDataValid;
    162                                              wire [1:0] scramblerSyncHeader;
    163                                              
    164                                              // Instantiate the Scrambler module
    165                                              Scrambler uut (
    166                                                  .pclk(pclk),
    167                                                  .reset_n(reset_n),
    168                                                  .turnOff(turnOff),
    169                                                  .PIPEWIDTH(PIPEWIDTH),
    170                                                  .LMCSyncHeader_1(LMCSyncHeader_1),
    171                                                  .seedValue(seedValue),
    172                                                  .dataout_1(dataout_1),
    173                                                  .d_k_out_1(d_k_out_1),
    174                                                  .data_valid_out_1(data_valid_out_1),
    175                                                  .GEN(GEN),
    176                                                  .scramblerDataOut(scramblerDataOut),
    177                                                  .scramblerDataK(scramblerDataK),
    178                                                  .scramblerDataValid(scramblerDataValid),
    179                                                  .scramblerSyncHeader(scramblerSyncHeader)
    180                                              );
    181                                              
    182                                              // Clock generation
    183                                              always #5 pclk = ~pclk; // 100 MHz clock
    184                                              
    185                                              initial begin
    186                                                  // Initialize Inputs
    187                                                  pclk = 0;
    188                                                  reset_n = 0;
    189                                                  turnOff = 0;
    190                                                  PIPEWIDTH = 32;
    191                                                  LMCSyncHeader_1 = 2'b00; // Data block
    192                                                  seedValue = 24'h1dbfbc;  // Example seed
    193                                                  data_valid_out_1 = 1;
    194                                                  GEN = 3'd1;  // Example GEN value
    195                                              
    196                                                  // Reset sequence
    197                                                  #10;
    198                                                  reset_n = 1; // Deassert reset
    199                                              
    200                                                  // Apply test vectors
    201                                                  #20;
    202                                                  dataout_1 = {8'b111_11101,16'hBABA,8'b111_11011};
    203                                                  d_k_out_1 = 4'b1001;
    204                                              
    205                                              
    206                                              
    207                                              
    208                                              end
    209                                              
    210                                              // Monitor signals
    211                                              initial begin
    212                                                  $monitor("At time %0t, scramblerDataOut = %h, scramblerDataK = %b, scramblerDataValid = %b, scramblerSyncHeader = %b", 
    213                                                           $time, scramblerDataOut, scramblerDataK, scramblerDataValid, scramblerSyncHeader);
    214                                              end
    215                                              
    216                                              endmodule


=================================================================================
=== File: RTL/TX .v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/TX .v --

    1                                                module TOP_MODULE #
    2                                                (
    3                                                parameter MAXPIPEWIDTH = 32,
    4                                                parameter DEVICETYPE = 0, //0 for downstream 1 for upstream
    5                                                parameter LANESNUMBER =16,
    6                                                parameter GEN1_PIPEWIDTH = 8 ,	
    7                                                parameter GEN2_PIPEWIDTH = 8 ,	
    8                                                parameter GEN3_PIPEWIDTH = 8 ,	
    9                                                parameter GEN4_PIPEWIDTH = 8 ,	
    10                                               parameter GEN5_PIPEWIDTH = 8 ,	
    11                                               parameter MAX_GEN = 1
    12                                               )
    13                                               (pclk,reset_n,NumberDetectLanes,pl_trdy,lp_irdy,lp_data,lp_valid,lp_dlpstart,lp_dlpend, lp_tlpstart,lp_tlpend,RxStatus,TxDetectRx_Loopback,PowerDown,
    14                                                PhyStatus,TxElecIdle,WriteDetectLanesFlag,SetTXState,TXFinishFlag,TXExitTo,WriteLinkNum,WriteLinkNumFlag,ReadLinkNum ,
    15                                               TxData1,TxData2,TxData3,TxData4,TxData5,TxData6,TxData7,TxData8,TxData9,TxData10,TxData11,TxData12,TxData13,TxData14,TxData15,TxData16,
    16                                               TxDataValid1,TxDataValid2,TxDataValid3,TxDataValid4,TxDataValid5,TxDataValid6,TxDataValid7,TxDataValid8,TxDataValid9,TxDataValid10,TxDataValid11,TxDataValid12,
    17                                               TxDataValid13,TxDataValid14,TxDataValid15,TxDataValid16,TxDataK1,TxDataK2,TxDataK3,TxDataK4,TxDataK5,TxDataK6,TxDataK7,TxDataK8,TxDataK9,TxDataK10,TxDataK11,
    18                                               TxDataK12,TxDataK13,TxDataK14,TxDataK15,TxDataK16,rateIdIn,upConfigureCapabilityIn,ReceiverpresetHintDSP, TransmitterPresetHintDSP,ReceiverpresetHintUSP,
    19                                               TransmitterPresetHintUSP,LF_register,FS_register,CursorCoff_register,PreCursorCoff_register,PostCursorCoff_register,TrainToGen,ReadDirectSpeedChange,MainLTSSMGen,
    20                                               TxSyncHeader1,TxSyncHeader2,TxSyncHeader3,TxSyncHeader4,TxSyncHeader5,TxSyncHeader6,TxSyncHeader7,TxSyncHeader8,TxSyncHeader9,TxSyncHeader10,TxSyncHeader11,
    21                                               TxSyncHeader12,TxSyncHeader13,TxSyncHeader14,TxSyncHeader15,TxSyncHeader16,
    22                                               TxStartBlock1,TxStartBlock2,TxStartBlock3,TxStartBlock4,TxStartBlock5,TxStartBlock6,TxStartBlock7,TxStartBlock8,TxStartBlock9,
    23                                               TxStartBlock10,TxStartBlock11,TxStartBlock12,TxStartBlock13,TxStartBlock14,TxStartBlock15,TxStartBlock16,turnOff,RxStandby,startSend16,turnOffScrambler_flag);
    24                                               
    25                                               //lane number 
    26                                               input [7:0] rateIdIn;
    27                                               input upConfigureCapabilityIn;
    28                                               output  [4:0] NumberDetectLanes;
    29                                               //lpif control
    30                                               wire hold;
    31                                               output turnOffScrambler_flag;
    32                                               //can not find it
    33                                               output pl_trdy;
    34                                               input  lp_irdy;
    35                                               ////// wr in tx control ??????
    36                                               
    37                                               input  [512-1:0]lp_data;
    38                                               input  [64-1:0]lp_valid;
    39                                               input [64-1:0]lp_dlpstart;
    40                                               input [64-1:0]lp_dlpend;
    41                                               input [64-1:0]lp_tlpstart;
    42                                               input [64-1:0]lp_tlpend;
    43                                               input [2:0]MainLTSSMGen;
    44                                               input turnOff;
    45                                               input startSend16;
    46                                               output [1:0]TxSyncHeader1,TxSyncHeader2,TxSyncHeader3,TxSyncHeader4,TxSyncHeader5,TxSyncHeader6,TxSyncHeader7,TxSyncHeader8,TxSyncHeader9,TxSyncHeader10,TxSyncHeader11,
    47                                               TxSyncHeader12,TxSyncHeader13,TxSyncHeader14,TxSyncHeader15,TxSyncHeader16;
    48                                               
    49                                               output TxStartBlock1,TxStartBlock2,TxStartBlock3,TxStartBlock4,TxStartBlock5,TxStartBlock6,TxStartBlock7,TxStartBlock8,TxStartBlock9,
    50                                               TxStartBlock10,TxStartBlock11,TxStartBlock12,TxStartBlock13,TxStartBlock14,TxStartBlock15,TxStartBlock16;
    51                                               output [15:0] RxStandby;
    52                                               wire [1:0]scramblerSyncHeader1,scramblerSyncHeader2,scramblerSyncHeader3,scramblerSyncHeader4,scramblerSyncHeader5,scramblerSyncHeader6,
    53                                               scramblerSyncHeader7,scramblerSyncHeader8,scramblerSyncHeader9,scramblerSyncHeader10,scramblerSyncHeader11,scramblerSyncHeader12,
    54                                               scramblerSyncHeader13,scramblerSyncHeader14,scramblerSyncHeader15,scramblerSyncHeader16;
    55                                               //fifo 
    56                                               wire [511:0] FIFO_dataIN;
    57                                               wire [63:0] FIFO_datavalid;
    58                                               wire [63:0] FIFO_datak;
    59                                               wire MuxSyncHeader;
    60                                               
    61                                               
    62                                               
    63                                               //mux
    64                                               wire sel;
    65                                               //output data signals
    66                                               output [31:0] TxData1,TxData2,TxData3,TxData4,TxData5,TxData6,TxData7,TxData8,TxData9,TxData10,TxData11,TxData12,TxData13,TxData14,TxData15,TxData16;
    67                                               output  TxDataValid1,TxDataValid2,TxDataValid3,TxDataValid4,TxDataValid5,TxDataValid6,TxDataValid7,TxDataValid8,TxDataValid9,TxDataValid10,TxDataValid11,TxDataValid12,TxDataValid13,TxDataValid14,TxDataValid15,TxDataValid16;
    68                                               output [3:0]  TxDataK1,TxDataK2,TxDataK3,TxDataK4,TxDataK5,TxDataK6,TxDataK7,TxDataK8,TxDataK9,TxDataK10,TxDataK11,TxDataK12,TxDataK13,TxDataK14,TxDataK15,TxDataK16;
    69                                               //common
    70                                               wire [2:0] gen;
    71                                               input pclk;
    72                                               input reset_n;
    73                                               //os generator internal signals
    74                                               wire [2:0] os_type;
    75                                               wire [1:0]lane_number;
    76                                               wire [7:0]link_number;
    77                                               wire [2:0] rate;
    78                                               wire loopback;
    79                                               wire start;
    80                                               wire finish;
    81                                               wire busy;
    82                                               wire [15:0]RxStandbyRequest;
    83                                               //Gen3 
    84                                               wire [1:0] EC;
    85                                               wire ResetEIEOSCount;
    86                                               wire [4* LANESNUMBER-1:0] TXPreset;
    87                                               wire [3* LANESNUMBER-1:0] RXPreset;
    88                                               wire [LANESNUMBER-1:0] UsePresetCoff;
    89                                               wire [6* LANESNUMBER-1:0] FS;
    90                                               wire [6* LANESNUMBER-1:0] LF;
    91                                               wire [6* LANESNUMBER-1:0] PreCursorCoff;
    92                                               wire [6* LANESNUMBER-1:0] CursorCoff;
    93                                               wire [6* LANESNUMBER-1:0] PostCursorCoff;
    94                                               wire [ LANESNUMBER-1:0] RejectCoff;
    95                                               wire SpeedChange;
    96                                               wire ReqEq;
    97                                               wire EQTS2;
    98                                               
    99                                               ///main ltssm
    100                                              wire [15:0]detected_lanes;
    101                                              output  WriteDetectLanesFlag;
    102                                              input  [4:0] SetTXState;
    103                                              output  TXFinishFlag;
    104                                              output  [4:0] TXExitTo;
    105                                              output [7:0] WriteLinkNum;
    106                                              output  WriteLinkNumFlag;
    107                                              input [7:0] ReadLinkNum;
    108                                              // new 
    109                                              input [2:0] TrainToGen;
    110                                              input ReadDirectSpeedChange;
    111                                              input  [47:0] ReceiverpresetHintDSP;
    112                                              input [63:0] TransmitterPresetHintDSP;
    113                                              input  [47:0] ReceiverpresetHintUSP;
    114                                              input  [63:0] TransmitterPresetHintUSP;
    115                                              input  [6*16-1:0]LF_register;
    116                                              input  [6*16-1:0]FS_register;
    117                                              input  [6*16-1:0]CursorCoff_register;
    118                                              input  [6*16-1:0]PreCursorCoff_register;
    119                                              input  [6*16-1:0]PostCursorCoff_register;
    120                                              //scrambler  
    121                                              wire [31:0]scramblerDataOut1,scramblerDataOut2, scramblerDataOut3,scramblerDataOut4, scramblerDataOut5,scramblerDataOut6,scramblerDataOut7,scramblerDataOut8,scramblerDataOut9,scramblerDataOut10, scramblerDataOut11, scramblerDataOut12,scramblerDataOut13, scramblerDataOut14,scramblerDataOut15,scramblerDataOut16;
    122                                              wire [3:0] scramblerDataK1, scramblerDataK2, scramblerDataK3, scramblerDataK4, scramblerDataK5, scramblerDataK6, scramblerDataK7, scramblerDataK8, scramblerDataK9, scramblerDataK10, scramblerDataK11, scramblerDataK12, scramblerDataK13, scramblerDataK14, scramblerDataK15,scramblerDataK16;
    123                                              wire  scramblerDataValid1,scramblerDataValid2,scramblerDataValid3,scramblerDataValid4,scramblerDataValid5,scramblerDataValid6,scramblerDataValid7,scramblerDataValid8,scramblerDataValid9,scramblerDataValid10,scramblerDataValid11,scramblerDataValid12,scramblerDataValid13,scramblerDataValid14,scramblerDataValid15,scramblerDataValid16;
    124                                              
    125                                              wire[511:0] os_data;
    126                                              wire [63:0] os_datak;
    127                                              wire [63:0] os_datavalid;
    128                                              wire[511:0] data_muxout;
    129                                              wire [63:0] datak_muxout;
    130                                              wire [63:0] datavalid_muxout;
    131                                              wire  datavalid_lmcout1,datavalid_lmcout2,datavalid_lmcout3,datavalid_lmcout4,datavalid_lmcout5,datavalid_lmcout6,datavalid_lmcout7,datavalid_lmcout8,datavalid_lmcout9,datavalid_lmcout10,datavalid_lmcout11,datavalid_lmcout12,datavalid_lmcout13,datavalid_lmcout14,datavalid_lmcout15,datavalid_lmcout16;
    132                                              wire [31:0] data_lmc1,data_lmc2,data_lmc3,data_lmc4,data_lmc5,data_lmc6,data_lmc7,data_lmc8,data_lmc9,data_lmc10,data_lmc11,data_lmc12,data_lmc13,data_lmc14,data_lmc15,data_lmc16;
    133                                              wire [3:0]  datak_lmc1,datak_lmc2,datak_lmc3,datak_lmc4,datak_lmc5,datak_lmc6,datak_lmc7,datak_lmc8,datak_lmc9,datak_lmc10,datak_lmc11,datak_lmc12,datak_lmc13,datak_lmc14,datak_lmc15,datak_lmc16;
    134                                              wire [5:0] pipewidth;
    135                                              wire [1:0]LMCSyncHeader1,LMCSyncHeader2,LMCSyncHeader3,LMCSyncHeader4,LMCSyncHeader5,LMCSyncHeader6,LMCSyncHeader7,LMCSyncHeader8,LMCSyncHeader9,LMCSyncHeader10,LMCSyncHeader11,LMCSyncHeader12,LMCSyncHeader13,LMCSyncHeader14,LMCSyncHeader15,LMCSyncHeader16;
    136                                              //pipe control
    137                                              wire [ LANESNUMBER-1:0]DetectReq;
    138                                              wire [ LANESNUMBER-1:0]ElecIdleReq;
    139                                              wire  [ LANESNUMBER-1:0]DetectStatus;
    140                                              input	[3*LANESNUMBER -1:0]RxStatus;
    141                                              output [LANESNUMBER-1:0]TxDetectRx_Loopback;
    142                                              input [ LANESNUMBER-1:0]PhyStatus;
    143                                              output [4*LANESNUMBER-1:0]PowerDown;
    144                                              output [LANESNUMBER-1:0]TxElecIdle;
    145                                              
    146                                              // wires of os generator 
    147                                              
    148             1                          2     reg [191:0]seedValue = {24'h1dbfbc, 24'h0607bb, 24'h1ec760, 24'h18c0db, 24'h010f12, 24'h19cfc9, 24'h0277ce, 24'h1bb807};
    149                                              
    150                                              
    151                                              
    152                                              Tx_CTRL 
    153                                              #(.MAXPIPEWIDTH(MAXPIPEWIDTH),.LANESNUMBER(LANESNUMBER),.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH),
    154                                              .GEN2_PIPEWIDTH(GEN2_PIPEWIDTH),.GEN3_PIPEWIDTH(GEN3_PIPEWIDTH),.GEN4_PIPEWIDTH(GEN4_PIPEWIDTH),.GEN5_PIPEWIDTH(GEN5_PIPEWIDTH)) 
    155                                              LPIF_CTRL
    156                                              (.reset_n(reset_n),.data_in(lp_data),.wr(lp_irdy),.wr_valid(lp_valid),.pclk(pclk),.STP_IN(lp_tlpstart),.SDP_IN(lp_dlpstart)
    157                                              ,.END_IN(lp_tlpend|lp_dlpend),.Gen(gen),.DetectedLanes(detected_lanes),.Hold(hold),.DataOut(FIFO_dataIN),.ValidOut(FIFO_datavalid),.DKOut(FIFO_datak),.full(pl_trdy));
    158                                              genvar i;
    159                                              generate 
    160                                              for(i=0;i<LANESNUMBER;i=i+1)
    161                                              begin
    162                                              PIPE_Control PIPE_CTL(.substate(SetTXState),.generation(gen), .pclk(pclk), .reset_n(reset_n), .RxStatus(RxStatus[3*i+:3]),
    163                                               .ElecIdle_req(ElecIdleReq[i]), .Detect_req(DetectReq[i]), .PhyStatus(PhyStatus[i]), .TxDetectRx_Loopback(TxDetectRx_Loopback[i]),
    164                                               .PowerDown(PowerDown[4*i+:4]), .Detect_status(DetectStatus[i]), .TxElecIdle(TxElecIdle[i]),.RxStandbyRequest(RxStandbyRequest[i])
    165                                               ,.RxStandby(RxStandby[i]));
    166                                              end
    167                                              
    168                                              endgenerate
    169                                              
    170                                              TX_LTSSM #(.DEVICETYPE(DEVICETYPE),.MAXPIPEWIDTH(MAXPIPEWIDTH),.LANESNUMBER(LANESNUMBER),.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH),.MAX_GEN(MAX_GEN),
    171                                              .GEN2_PIPEWIDTH(GEN2_PIPEWIDTH),.GEN3_PIPEWIDTH(GEN3_PIPEWIDTH),.GEN4_PIPEWIDTH(GEN4_PIPEWIDTH),.GEN5_PIPEWIDTH(GEN5_PIPEWIDTH)) txltssm (.Pclk(pclk),.Reset(reset_n),.Gen(gen),.TXFinishFlag(TXFinishFlag),.TXExitTo(TXExitTo),.DetectLanes(detected_lanes),.WriteDetectLanesFlag(WriteDetectLanesFlag),.SetTXState(SetTXState)
    172                                              ,.WriteLinkNum(WriteLinkNum),.WriteLinkNumFlag(WriteLinkNumFlag),.ReadLinkNum(ReadLinkNum),.HoldFIFOData(hold),.FIFOReady(),.OSType(os_type),.LaneNumber(lane_number),.LinkNumber( link_number),
    173                                              .Rate(rate),.Loopback(loopback),.OSGeneratorStart(start),.OSGeneratorBusy(busy),.OSGeneratorFinish(finish),. EC(EC),.ResetEIEOSCount(ResetEIEOSCount),.TXPreset(TXPreset),.RXPreset(RXPreset),.UsePresetCoff(UsePresetCoff),
    174                                              .FS(FS),.LF(LF),.PreCursorCoff(PreCursorCoff),.CursorCoff(CursorCoff),.PostCursorCoff(PostCursorCoff),.RejectCoff(RejectCoff),.SpeedChange(SpeedChange),.ReqEq(ReqEq),.EQTS2(EQTS2),.MuxSel(sel),.DetectReq(DetectReq),
    175                                              .ElecIdleReq(ElecIdleReq),.DetectStatus(DetectStatus),
    176                                              .NumberDetectLanes(NumberDetectLanes),.TrainToGen(TrainToGen),.ReadDirectSpeedChange(ReadDirectSpeedChange),.ReceiverpresetHintDSP(ReceiverpresetHintDSP),.TransmitterPresetHintDSP(TransmitterPresetHintDSP),.ReceiverpresetHintUSP(ReceiverpresetHintUSP),
    177                                              .TransmitterPresetHintUSP(TransmitterPresetHintUSP),.LF_register(LF_register),.FS_register(FS_register),.CursorCoff_register(CursorCoff_register),.PreCursorCoff_register(PreCursorCoff_register),.PostCursorCoff_register(PostCursorCoff_register),
    178                                              .MainLTSSMGen(MainLTSSMGen),.RxStandby(RxStandbyRequest),.startSend16(startSend16),.turnOffScrambler_flag(turnOffScrambler_flag)
    179                                              );
    180                                              
    181                                              
    182                                              OS_GENERATOR #(.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH),.GEN2_PIPEWIDTH(GEN2_PIPEWIDTH),.GEN3_PIPEWIDTH(GEN3_PIPEWIDTH),
    183                                              .GEN4_PIPEWIDTH(GEN4_PIPEWIDTH),.GEN5_PIPEWIDTH(GEN5_PIPEWIDTH),.no_of_lanes(LANESNUMBER))
    184                                              block1 (pclk, reset_n, os_type, lane_number, link_number, rate, loopback , detected_lanes, gen, start,EQTS2,EC,ResetEIEOSCount  ,TXPreset ,RXPreset ,UsePresetCoff   ,FS,LF,PreCursorCoff   ,CursorCoff  ,PostCursorCoff   ,RejectCoff,ReqEq,SpeedChange, finish, os_data, os_datak, busy, os_datavalid);
    185                                              MUX block2 (sel,FIFO_datavalid, os_datavalid, FIFO_dataIN, os_data, FIFO_datak, os_datak,data_muxout,datak_muxout,datavalid_muxout,MuxSyncHeader);
    186                                              LMC  #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    187                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    188                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    189                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    190                                              .pipe_width_gen5(GEN5_PIPEWIDTH),
    191                                              .number_of_lanes(LANESNUMBER)
    192                                                    )block3 ( reset_n, pclk, gen, datavalid_muxout, data_muxout, datak_muxout,MuxSyncHeader,pipewidth,datavalid_lmcout1,datavalid_lmcout2,datavalid_lmcout3,datavalid_lmcout4,datavalid_lmcout5,datavalid_lmcout6,datavalid_lmcout7,datavalid_lmcout8,datavalid_lmcout9,datavalid_lmcout10,datavalid_lmcout11,datavalid_lmcout12,datavalid_lmcout13,datavalid_lmcout14,datavalid_lmcout15,datavalid_lmcout16,datak_lmc1,datak_lmc2,datak_lmc3,datak_lmc4,datak_lmc5,datak_lmc6,datak_lmc7,datak_lmc8,datak_lmc9,datak_lmc10,datak_lmc11,datak_lmc12,datak_lmc13,datak_lmc14,datak_lmc15,datak_lmc16,data_lmc1,data_lmc2,data_lmc3,data_lmc4,data_lmc5,data_lmc6,data_lmc7,data_lmc8,data_lmc9,data_lmc10,data_lmc11,data_lmc12,data_lmc13,data_lmc14,data_lmc15,data_lmc16,LMCSyncHeader1,LMCSyncHeader2,LMCSyncHeader3,LMCSyncHeader4,LMCSyncHeader5,LMCSyncHeader6,LMCSyncHeader7,LMCSyncHeader8,LMCSyncHeader9,LMCSyncHeader10,LMCSyncHeader11,LMCSyncHeader12,LMCSyncHeader13,LMCSyncHeader14,LMCSyncHeader15,LMCSyncHeader16);
    193                                              Scrambler lane1 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader1,seedValue[0+:24],data_lmc1,datak_lmc1, datavalid_lmcout1,gen,scramblerDataOut1,scramblerDataK1,scramblerDataValid1,scramblerSyncHeader1);
    194                                              Scrambler lane2 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader2,seedValue[24+:24],data_lmc2,datak_lmc2, datavalid_lmcout2,gen,scramblerDataOut2,scramblerDataK2,scramblerDataValid2,scramblerSyncHeader2);
    195                                              Scrambler lane3 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader3,seedValue[48+:24],data_lmc3,datak_lmc3, datavalid_lmcout3,gen,scramblerDataOut3,scramblerDataK3,scramblerDataValid3,scramblerSyncHeader3);
    196                                              Scrambler lane4 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader4,seedValue[72+:24],data_lmc4,datak_lmc4, datavalid_lmcout4,gen,scramblerDataOut4,scramblerDataK4,scramblerDataValid4,scramblerSyncHeader4);
    197                                              Scrambler lane5 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader5,seedValue[96+:24],data_lmc5,datak_lmc5, datavalid_lmcout5,gen,scramblerDataOut5,scramblerDataK5,scramblerDataValid5,scramblerSyncHeader5);
    198                                              Scrambler lane6 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader6,seedValue[120+:24],data_lmc6,datak_lmc6, datavalid_lmcout6,gen,scramblerDataOut6,scramblerDataK6,scramblerDataValid6,scramblerSyncHeader6);
    199                                              Scrambler lane7 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader7,seedValue[144+:24],data_lmc7,datak_lmc7, datavalid_lmcout7,gen,scramblerDataOut7,scramblerDataK7,scramblerDataValid7,scramblerSyncHeader7);
    200                                              Scrambler lane8 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader8,seedValue[168+:24],data_lmc8,datak_lmc8, datavalid_lmcout8,gen,scramblerDataOut8,scramblerDataK8,scramblerDataValid8,scramblerSyncHeader8);
    201                                              Scrambler lane9 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader9,seedValue[0+:24],data_lmc9,datak_lmc9, datavalid_lmcout9,gen,scramblerDataOut9,scramblerDataK9,scramblerDataValid9,scramblerSyncHeader9);
    202                                              Scrambler lane10 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader10,seedValue[24+:24],data_lmc10,datak_lmc10, datavalid_lmcout10,gen,scramblerDataOut10,scramblerDataK10,scramblerDataValid10,scramblerSyncHeader10);
    203                                              Scrambler lane11 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader11,seedValue[48+:24],data_lmc11,datak_lmc11, datavalid_lmcout11,gen,scramblerDataOut11,scramblerDataK11,scramblerDataValid11,scramblerSyncHeader11);
    204                                              Scrambler lane12 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader12,seedValue[72+:24],data_lmc12,datak_lmc12, datavalid_lmcout12,gen,scramblerDataOut12,scramblerDataK12,scramblerDataValid12,scramblerSyncHeader12);
    205                                              Scrambler lane13 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader13,seedValue[96+:24],data_lmc13,datak_lmc13, datavalid_lmcout13,gen,scramblerDataOut13,scramblerDataK13,scramblerDataValid13,scramblerSyncHeader13);
    206                                              Scrambler lane14 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader14,seedValue[120+:24],data_lmc14,datak_lmc14, datavalid_lmcout14,gen,scramblerDataOut14,scramblerDataK14,scramblerDataValid14,scramblerSyncHeader14);
    207                                              Scrambler lane15 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader15,seedValue[144+:24],data_lmc15,datak_lmc15, datavalid_lmcout15,gen,scramblerDataOut15,scramblerDataK15,scramblerDataValid15,scramblerSyncHeader15);
    208                                              Scrambler lane16 (pclk,reset_n,turnOff,pipewidth,SetTXState,LMCSyncHeader16,seedValue[168+:24],data_lmc16,datak_lmc16, datavalid_lmcout16,gen,scramblerDataOut16,scramblerDataK16,scramblerDataValid16,scramblerSyncHeader16);
    209                                              
    210                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    211                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    212                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    213                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    214                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane1(gen, pclk, reset_n, scramblerDataOut1, scramblerDataK1, scramblerSyncHeader1, scramblerDataValid1, TxData1, TxDataValid1, TxDataK1, TxSyncHeader1, TxStartBlock1);
    215                                              
    216                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    217                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    218                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    219                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    220                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane2(gen, pclk, reset_n, scramblerDataOut2, scramblerDataK2, scramblerSyncHeader2, scramblerDataValid2, TxData2, TxDataValid2, TxDataK2, TxSyncHeader2, TxStartBlock2);
    221                                              
    222                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    223                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    224                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    225                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    226                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane3(gen, pclk, reset_n, scramblerDataOut3, scramblerDataK3, scramblerSyncHeader3, scramblerDataValid3, TxData3, TxDataValid3, TxDataK3, TxSyncHeader3, TxStartBlock3);
    227                                              
    228                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    229                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    230                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    231                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    232                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane4(gen, pclk, reset_n, scramblerDataOut4, scramblerDataK4, scramblerSyncHeader4, scramblerDataValid4, TxData4, TxDataValid4, TxDataK4, TxSyncHeader4, TxStartBlock4);
    233                                              
    234                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    235                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    236                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    237                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    238                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane5(gen, pclk, reset_n, scramblerDataOut5, scramblerDataK5, scramblerSyncHeader5, scramblerDataValid5, TxData5, TxDataValid5, TxDataK5, TxSyncHeader5, TxStartBlock5);
    239                                              
    240                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    241                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    242                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    243                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    244                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane6(gen, pclk, reset_n, scramblerDataOut6, scramblerDataK6, scramblerSyncHeader6, scramblerDataValid6, TxData6, TxDataValid6, TxDataK6, TxSyncHeader6, TxStartBlock6);
    245                                              
    246                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    247                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    248                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    249                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    250                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane7(gen, pclk, reset_n, scramblerDataOut7, scramblerDataK7, scramblerSyncHeader7, scramblerDataValid7, TxData7, TxDataValid7, TxDataK7, TxSyncHeader7, TxStartBlock7);
    251                                              
    252                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    253                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    254                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    255                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    256                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane8(gen, pclk, reset_n, scramblerDataOut8, scramblerDataK8, scramblerSyncHeader8, scramblerDataValid8, TxData8, TxDataValid8, TxDataK8, TxSyncHeader8, TxStartBlock8);
    257                                              
    258                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    259                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    260                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    261                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    262                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane9(gen, pclk, reset_n, scramblerDataOut9, scramblerDataK9, scramblerSyncHeader9, scramblerDataValid9, TxData9, TxDataValid9, TxDataK9, TxSyncHeader9, TxStartBlock9);
    263                                              
    264                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    265                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    266                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    267                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    268                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane10(gen, pclk, reset_n, scramblerDataOut10, scramblerDataK10, scramblerSyncHeader10, scramblerDataValid10, TxData10, TxDataValid10, TxDataK10, TxSyncHeader10, TxStartBlock10);
    269                                              
    270                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    271                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    272                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    273                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    274                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane11(gen, pclk, reset_n, scramblerDataOut11, scramblerDataK11, scramblerSyncHeader11, scramblerDataValid11, TxData11, TxDataValid11, TxDataK11, TxSyncHeader11, TxStartBlock11);
    275                                              
    276                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    277                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    278                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    279                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    280                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane12(gen, pclk, reset_n, scramblerDataOut12, scramblerDataK12, scramblerSyncHeader12, scramblerDataValid12, TxData12, TxDataValid12, TxDataK12, TxSyncHeader12, TxStartBlock12);
    281                                              
    282                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    283                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    284                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    285                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    286                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane13(gen, pclk, reset_n, scramblerDataOut13, scramblerDataK13, scramblerSyncHeader13, scramblerDataValid13, TxData13, TxDataValid13, TxDataK13, TxSyncHeader13, TxStartBlock13);
    287                                              
    288                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    289                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    290                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    291                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    292                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane14(gen, pclk, reset_n, scramblerDataOut14, scramblerDataK14, scramblerSyncHeader14, scramblerDataValid14, TxData14, TxDataValid14, TxDataK14, TxSyncHeader14, TxStartBlock14);
    293                                              
    294                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    295                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    296                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    297                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    298                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane15(gen, pclk, reset_n, scramblerDataOut15, scramblerDataK15, scramblerSyncHeader15, scramblerDataValid15, TxData15, TxDataValid15, TxDataK15, TxSyncHeader15, TxStartBlock15);
    299                                              
    300                                              PIPE_Data #(.pipe_width_gen1(GEN1_PIPEWIDTH),
    301                                              .pipe_width_gen2(GEN2_PIPEWIDTH),
    302                                              .pipe_width_gen3(GEN3_PIPEWIDTH),
    303                                              .pipe_width_gen4(GEN4_PIPEWIDTH),
    304                                              .pipe_width_gen5(GEN5_PIPEWIDTH)) Lane16(gen, pclk, reset_n, scramblerDataOut16, scramblerDataK16, scramblerSyncHeader16, scramblerDataValid16, TxData16, TxDataValid16, TxDataK16, TxSyncHeader16, TxStartBlock16);
    305                                              
    306                                              
    307                                              endmodule


=================================================================================
=== File: RTL/Timer.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           13        13         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/Timer.v --

    1                                                module Timer #(
    2                                                parameter Width = 32,
    3                                                
    4                                                parameter GEN1_PIPEWIDTH = 8 ,	
    5                                                parameter GEN2_PIPEWIDTH = 8 ,	
    6                                                parameter GEN3_PIPEWIDTH = 8 ,	
    7                                                parameter GEN4_PIPEWIDTH = 8 ,	
    8                                                parameter GEN5_PIPEWIDTH = 8 	
    9                                                
    10                                               )
    11                                               (
    12                                               input [2:0]Gen,
    13                                               input Reset,
    14                                               input Pclk,
    15                                               input Enable,
    16                                               input Start,
    17                                               input [2:0]TimerIntervalCode, //001 -> 12ms
    18                                               output TimeOut
    19                                               );
    20                                               reg [Width-1:0] Tick;
    21                                               reg [Width-1:0] TimerIntervalBase;
    22                                               reg [Width-1:0] TimerInterval;
    23                                               parameter Gen1 = 3'b001,Gen2 = 3'b010,Gen3 = 3'b011,Gen4 = 3'b100,Gen5 = 3'b101;
    24                                               parameter t12ms= 3'b001,t24ms = 3'b010,t48ms = 3'b011,t2ms = 3'b100,t8ms = 3'b101,t0ms = 3'b000;
    25              1                        396     always @ *
    26                                               begin
    27                                               	case({TimerIntervalCode})
    28                                               		t12ms:begin  
    29              1                         27     			TimerIntervalBase= 32'h000B71AF/100 ;//750000 cycle => Gen1 32bit width , 12ms //marwan
    30                                               		end
    31                                               		
    32                                               		t24ms:begin  
    33              1                        100     			TimerIntervalBase= (32'h16E360/100) -5 ;//1500000 cycle => Gen1 32bit width , 24ms 
    34                                               		end
    35                                               
    36                                               		t48ms:begin  
    37              1                         66     			TimerIntervalBase= 32'h2DC2D8/100 ;//3000000cycle => Gen1 48bit width , 48ms //marwan
    38                                               		end
    39                                               //		t8ms:begin  
    40                                               //			TimerIntervalBase= 32'h7A120/100 ;//500000cycle => Gen1 48bit width , 48ms 
    41                                               //		end
    42                                               
    43                                               		t2ms:begin  
    44              1                         58     			TimerIntervalBase= 32'h1E848/100 ;//125000 cycle => Gen1 32bit width , 2ms 
    45                                               		end	
    46                                               		t0ms:begin  
    47              1                        145     			TimerIntervalBase= 32'h00000000;//0cycle => Gen1 32bit width , 0ms 
    48                                               		end
    49                                               	endcase
    50                                               end
    51                                               
    52                                               //for higher Generation multiply the base value by 2 (shift left)
    53              1                        418     always @ *
    54                                               begin
    55                                               	case(Gen)
    56                                               		Gen1:begin //Gen1  
    57                                               			 case(GEN1_PIPEWIDTH)
    58              1                        360     			 32:TimerInterval=TimerIntervalBase<<0<<0 ; //multiply base by 1 (Gen1 32 bit)
    59                                               			 16:TimerInterval=TimerIntervalBase<<0<<1 ; //multiply base by 2 (Gen1 16 bit)
    60                                               			 8 :TimerInterval=TimerIntervalBase<<0<<2 ; //multiply base by 4 (Gen1 8 bit)
    61                                               			 endcase
    62                                               		end
    63                                               		Gen5:begin //Gen3  
    64                                               			 case(GEN5_PIPEWIDTH)
    65              1                         58     			 32:TimerInterval=TimerIntervalBase<<4<<0 ; //multiply base by 4 for Gen2 (Gen3 32 bit)
    66                                               			 16:TimerInterval=TimerIntervalBase<<4<<1 ; //multiply base by 4 for Gen2 and another 2 for 16 bit width (Gen3 16 bit)
    67                                               			 8 :TimerInterval=TimerIntervalBase<<4<<2 ; //multiply base by 4 for Gen2 and another 4 for 16 bit width (Gen3 32 bit)
    68                                               			 endcase
    69                                               		end
    70                                               	endcase
    71                                               end
    72              1                    1055423     assign TimeOut = (Start)? 0:(Tick >= TimerInterval)? 1:0 ;
    73              1                    1054975     always @(posedge Pclk)
    74                                               begin
    75                                               if (!Reset||Start) begin
    76              1                      12205     Tick <= 0;
    77                                               end
    78                                               else if (Enable)begin
    79              1                    1042740     Tick <=Tick +1;
    80                                               end
    81                                               end
    82                                               endmodule


=================================================================================
=== File: RTL/TxLtssm.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          365       342        23      93.6

================================Statement Details================================

Statement Coverage for file RTL/TxLtssm.v --

    1                                                module TX_LTSSM #
    2                                                (
    3                                                parameter MAXPIPEWIDTH = 32,
    4                                                parameter DEVICETYPE = 0, //0 for downstream 1 for upstream
    5                                                parameter LANESNUMBER =16,
    6                                                parameter GEN1_PIPEWIDTH = 8 ,	
    7                                                parameter GEN2_PIPEWIDTH = 8 ,	
    8                                                parameter GEN3_PIPEWIDTH = 8 ,	
    9                                                parameter GEN4_PIPEWIDTH = 8 ,	
    10                                               parameter GEN5_PIPEWIDTH = 8 ,	
    11                                               parameter MAX_GEN = 1
    12                                               )
    13                                               (
    14                                               input Pclk,
    15                                               input Reset, //active low
    16                                               output  [2:0]Gen ,
    17                                               output reg [4:0] NumberDetectLanes,
    18                                               output reg [LANESNUMBER-1:0] DetectLanes,
    19                                               output reg WriteDetectLanesFlag,
    20                                               // main LTSSM interface
    21                                               input [2:0] MainLTSSMGen,
    22                                               input  [4:0] SetTXState,
    23                                               output reg TXFinishFlag,
    24                                               output reg [4:0] TXExitTo,
    25                                               output reg[7:0] WriteLinkNum,
    26                                               output reg WriteLinkNumFlag,
    27                                               input [7:0] ReadLinkNum,
    28                                               input [2:0] TrainToGen,
    29                                               input ReadDirectSpeedChange,
    30                                               input  [47:0] ReceiverpresetHintDSP,
    31                                               input [63:0] TransmitterPresetHintDSP,
    32                                               input  [47:0] ReceiverpresetHintUSP,
    33                                               input  [63:0] TransmitterPresetHintUSP,
    34                                               input  [6*16-1:0]LF_register,
    35                                               input  [6*16-1:0]FS_register,
    36                                               input  [6*16-1:0]CursorCoff_register,
    37                                               input  [6*16-1:0]PreCursorCoff_register,
    38                                               input  [6*16-1:0]PostCursorCoff_register,
    39                                               
    40                                               //input ReadCompleteEqualizationVariable, //////ask Emad 
    41                                               // LPIF TX control & data flow interface 
    42                                               output reg HoldFIFOData,
    43                                               input FIFOReady,
    44                                               // OS generator interface 
    45                                               output reg [2:0] OSType,
    46                                               output reg[1:0] LaneNumber, 
    47                                               output reg[7:0] LinkNumber,
    48                                               output reg[2:0] Rate,
    49                                               output reg Loopback,
    50                                               //OS generator interface communication
    51                                               output reg OSGeneratorStart,
    52                                               input OSGeneratorBusy,
    53                                               input OSGeneratorFinish,
    54                                               input startSend16,
    55                                               //OS generator interface equalization 
    56                                               output reg [1:0] EC,
    57                                               output reg ResetEIEOSCount,
    58                                               output reg [4* LANESNUMBER-1:0] TXPreset,
    59                                               output reg [3* LANESNUMBER-1:0] RXPreset,
    60                                               output reg [LANESNUMBER-1:0] UsePresetCoff,
    61                                               output reg [6* LANESNUMBER-1:0] FS,
    62                                               output reg [6* LANESNUMBER-1:0] LF,
    63                                               output reg [6* LANESNUMBER-1:0] PreCursorCoff,
    64                                               output reg [6* LANESNUMBER-1:0] CursorCoff,
    65                                               output reg [6* LANESNUMBER-1:0] PostCursorCoff,
    66                                               output reg [ LANESNUMBER-1:0] RejectCoff,
    67                                               output reg SpeedChange,
    68                                               output reg ReqEq,
    69                                               output reg EQTS2,
    70                                               output reg[15:0] RxStandby,
    71                                               output reg turnOffScrambler_flag,
    72                                               //mux
    73                                               output reg MuxSel,
    74                                               //Lane Management control 
    75                                               //PIPE TX Control
    76                                               output reg [ LANESNUMBER-1:0]DetectReq,
    77                                               output reg [ LANESNUMBER-1:0]ElecIdleReq,
    78                                               input  [ LANESNUMBER-1:0]DetectStatus
    79                                               );
    80                                               
    81                                               // states encoding
    82                                                parameter  DetectQuiet = 5'd0, DetectActive = 5'd1, PollingActive = 5'd2,
    83                                               	    PollingConfigration = 5'd3, ConfigrationLinkWidthStart = 5'd4, ConfigrationLinkWidthAccept= 5'd5,
    84                                                           ConfigrationLaneNumWait = 5'd6,  ConfigrationLaneNumActive = 5'd7, ConfigrationComplete = 5'd8,
    85                                                           ConfigrationIdle = 5'd9,L0=5'd10,RecoveryRcvrLock=5'd11,RecoveryRcvrCfg=5'd12, RecoverySpeed=5'd13,Ph0=5'd14,Ph1=5'd15,Ph2=5'd16,Ph3=5'd17,RecoveryIdle= 5'd18, Idle=5'd31,recoverySpeedeieos = 5'd19,
    86                                                       recoverywait = 5'd20;
    87                                               //Device type 
    88                                               parameter DownStream = 0 ,UpStream = 1;
    89                                               //time 
    90                                               parameter t12ms= 3'b001,t0ms = 3'b000 ,t24ms=3'b010, t1ms=3'b110,t48ms = 3'b011;
    91                                               //Generation
    92                                               parameter Gen1 = 3'b001,Gen2 = 3'b010,Gen3 = 3'b011,Gen4 = 3'b100,Gen5 = 3'b101; // TODO edited
    93                                               //internal Register 
    94                                               reg idleCounts;
    95                                               reg [4:0]State;
    96                                               wire [4:0]NextState;
    97                                               reg [4:0] ExitToState;
    98                                               reg ExitToFlag;
    99                                               //internal Register 
    100                                              reg [15:0]OSCount;
    101                                              reg [2:0]CurrentGen;
    102                                              //
    103                                              reg WriteDetectLanesFlagReg;
    104                                              //Timer interface
    105                                              reg TimerEnable;
    106                                              reg TimerStart;
    107                                              reg [2:0]TimerIntervalCode;
    108                                              reg turnOffScrambler_flag_next,turnOffScrambler_flag_next2;
    109                                              wire TimeOut;
    110                                              reg SDSFlag,SKPFlag,sending_idle;
    111             1                          2     reg[2:0] C = 0;
    112                                              
    113                                              Timer #(.Width(32),.GEN1_PIPEWIDTH(GEN1_PIPEWIDTH),.GEN2_PIPEWIDTH(GEN2_PIPEWIDTH),.GEN3_PIPEWIDTH(GEN3_PIPEWIDTH),.GEN4_PIPEWIDTH(GEN4_PIPEWIDTH),.GEN5_PIPEWIDTH(GEN5_PIPEWIDTH)) 
    114                                              				T(.Gen(Gen),.Reset(Reset),.Pclk(Pclk),.Enable(TimerEnable),.Start(TimerStart),.TimerIntervalCode(TimerIntervalCode),.TimeOut(TimeOut));
    115                                              
    116                                              //assignment
    117                                              assign NextState = SetTXState; 
    118                                              
    119                                              //----------marwan----------//
    120             1                          2     reg [2:0] SDS_counter=0,SKP_counter=0;
    120             2                          2     
    121                                              //------------------------//
    122             1                          2     reg first_time = 0;
    123                                              
    124                                              ///lanes number
    125             1                          2     always @ *
    126                                              begin 
    127             1                          2     if(DetectLanes[15]) NumberDetectLanes=15+1;
    128             1                    ***0***     else if (DetectLanes[14]) NumberDetectLanes=14+1;
    129             1                    ***0***     else if (DetectLanes[13]) NumberDetectLanes=13+1;
    130             1                    ***0***     else if (DetectLanes[12]) NumberDetectLanes=12+1;
    131             1                    ***0***     else if (DetectLanes[11]) NumberDetectLanes=11+1;
    132             1                    ***0***     else if (DetectLanes[10]) NumberDetectLanes=10+1;
    133             1                    ***0***     else if (DetectLanes[9]) NumberDetectLanes=9+1;
    134             1                    ***0***     else if (DetectLanes[8]) NumberDetectLanes=8+1;
    135             1                    ***0***     else if (DetectLanes[7]) NumberDetectLanes=7+1;
    136             1                    ***0***     else if (DetectLanes[6]) NumberDetectLanes=6+1;
    137             1                    ***0***     else if (DetectLanes[5]) NumberDetectLanes=5+1;
    138             1                    ***0***     else if (DetectLanes[4]) NumberDetectLanes=4+1;
    139             1                    ***0***     else if (DetectLanes[3]) NumberDetectLanes=3+1;
    140             1                    ***0***     else if (DetectLanes[2]) NumberDetectLanes=2+1;
    141             1                    ***0***     else if (DetectLanes[1]) NumberDetectLanes=1+1;
    142             1                    ***0***     else if (DetectLanes[0]) NumberDetectLanes=0+1;
    143             1                    ***0***     else   NumberDetectLanes=0;
    144                                              end 
    145                                              //exit to logic combinational
    146             1                     264627     always @ * begin
    147                                              //default value for outputs (synthesis)
    148                                              	//ExitToState = 4'd0;  Youssef
    149             1                     264627     	ExitToFlag  = 0 ;
    150                                              
    151                                              	case(State)
    152                                              		DetectQuiet:begin
    153                                              			//turnOffScrambler_flag_next=1'b1;//marwan
    154                                              			//ExitToState = DetectActive;//marwan
    155                                              			if (TimeOut==1) begin
    156             1                         15     				ExitToState = DetectActive;
    157             1                         15     				ExitToFlag  =  1 ;
    158             1                         15     				sending_idle = 0;
    159                                              			end
    160                                              		end	
    161                                              		DetectActive:begin
    162                                              			//turnOffScrambler_flag_next=1'b1;//marwan
    163                                              					/*CurrentGen=Gen1;
    164                                              					WriteDetectLanesFlag<=0;*/
    165             1                        109     					SDSFlag=0;
    166             1                        109     					SKPFlag=0;
    167             1                        109     					SKP_counter= 0;
    168             1                        109     					SDS_counter = 0 ;
    169                                              					/*idleCounts<=0;
    170                                              					ExitToState<=0;
    171                                              					ExitToFlag<=0;
    172                                              					OSCount<=0;*/
    173                                              			if (DetectStatus == {LANESNUMBER{1'b1}} )begin
    174             1                         28     				DetectLanes = DetectStatus;
    175             1                         28     				WriteDetectLanesFlagReg<=1;
    176             1                         28     				ExitToState = PollingActive;
    177             1                         28     				ExitToFlag  = 1 ;
    178                                              			end	
    179                                              			else if (TimeOut && DetectStatus == {LANESNUMBER{1'b0}} )begin
    180             1                    ***0***     				ExitToState = DetectQuiet;
    181             1                    ***0***     				ExitToFlag  = 1 ;
    182                                              			end	
    183                                              		end
    184                                              		PollingActive:begin
    185                                              			//turnOffScrambler_flag_next=1'b1;//marwan
    186                                              		 if(OSCount >= 1024)begin
    187             1                       5929     			ExitToState = PollingConfigration;
    188             1                       5929     			ExitToFlag  = 1 ;
    189                                              		 end
    190                                              		end
    191                                              		PollingConfigration:begin
    192                                              			//turnOffScrambler_flag_next=1'b1;//marwan
    193                                              		 if(OSCount > 17)begin
    194             1                      19952     			ExitToState = ConfigrationLinkWidthStart;
    195             1                      19952     			ExitToFlag  = 1 ;
    196                                              		 end
    197                                              		end
    198                                              		ConfigrationLinkWidthAccept:begin
    199                                              			//turnOffScrambler_flag_next=1'b1;//marwan
    200                                              		if(OSGeneratorFinish)begin
    201             1                         77     			ExitToState = ConfigrationLaneNumWait;
    202             1                         77     			ExitToFlag  = 1 ;
    203                                              		end
    204                                              		end
    205                                              		ConfigrationComplete:begin
    206                                              		  
    207                                              		  //turnOffScrambler_flag_next=1'b1;//marwan
    208                                              		if(OSCount >= 25 && !DEVICETYPE)begin //Youssef
    209             1                        746     			ExitToState = ConfigrationIdle;
    210             1                        746     			ExitToFlag  = 1 ;
    211                                              		 end
    212                                              		 
    213                                              		 if(OSCount >= 18 && DEVICETYPE)begin //Youssef
    214             1                        390     			ExitToState = ConfigrationIdle;
    215             1                        390     			ExitToFlag  = 1 ;
    216                                              		 end
    217                                              		 
    218                                              
    219                                              		 
    220                                              		end
    221                                              		ConfigrationIdle:begin
    222                                              
    223                                              			/*if(!DEVICETYPE)
    224                                              			     turnOffScrambler_flag_next=1'b0;//marwan
    225                                              			
    226                                              			     
    227                                              			if(DEVICETYPE && C==4)
    228                                              			     turnOffScrambler_flag_next=1'b0;//marwan*/
    229                                              
    230                                              		if(startSend16 && OSCount-idleCounts > 6)begin
    231             1                         12     			ExitToState = L0;
    232             1                         12     			ExitToFlag  = 1 ;
    233                                              		 end
    234                                              		end
    235                                              		RecoveryRcvrLock:begin //////////////TODO ask Emad 
    236                                              			/*if(OSGeneratorFinish)begin 
    237                                              				ExitToState<=RecoveryRcvrCfg;
    238                                              				ExitToFlag<=1;				
    239                                              			end */
    240             1                      10289     			first_time=1;
    241             1                      10289     			turnOffScrambler_flag_next=1'b1; //marwan
    242                                              		 if(OSCount >= 8)begin //Youssef 11/17/2024
    243             1                        633     			ExitToState = RecoveryRcvrCfg;
    244             1                        633     			ExitToFlag  = 1 ;
    245             1                        633     			OSCount = 0 ;
    246                                              		 end
    247                                              		//marwan//
    248                                              		if (TimeOut  )begin
    249                                              
    250             1                       5096     			ExitToState = DetectQuiet;
    251             1                       5096     			ExitToFlag  = 1 ;
    252                                              
    253                                              		end	
    254                                              		//marwan //
    255                                              
    256                                              
    257                                              		end
    258                                              		RecoveryRcvrCfg:begin
    259                                              			//turnOffScrambler_flag_next=1'b1;//marwan
    260                                              			if(( OSCount >= 20 ) && (DEVICETYPE))begin  
    261                                              				if(ReadDirectSpeedChange && OSCount >= 33)begin
    262             1                       9938     					ExitToState<=RecoverySpeed;
    263             1                       9938     					ExitToFlag<=1;
    264                                              
    265                                              				end
    266                                              				else begin
    267             1                        132     					ExitToState<=RecoveryIdle;
    268             1                        132     					ExitToFlag <= 1;
    269                                              				end
    270                                              			end
    271                                              			else if( ( OSCount >= 18 ) && (!DEVICETYPE))begin  
    272                                              			if(ReadDirectSpeedChange && OSCount >= 33)begin
    273                                              
    274             1                       9938     				ExitToState<=RecoverySpeed;
    275             1                       9938     				ExitToFlag<=1;
    276                                              
    277                                              			end
    278                                              			else begin
    279                                              
    280             1                        152     				ExitToState<=RecoveryIdle;
    281             1                        152     				ExitToFlag <= 1;
    282                                              			end
    283                                              			end
    284                                              			//******marwan******//	
    285                                              			if(TimeOut)begin
    286             1                       9998     					ExitToState<=DetectQuiet;
    287             1                       9998     					ExitToFlag <= 1;
    288                                              					
    289                                              				end//******marwan******//
    290                                              		
    291                                              		end
    292                                              		RecoverySpeed:begin
    293                                              			if(TimeOut && OSCount >= 2)begin
    294                                              				if(TrainToGen>=Gen3)begin
    295             1                      40029     					ExitToState<=Ph0;
    296             1                      40029     					ExitToFlag<=1;
    297                                              				end
    298                                              				else begin
    299             1                    ***0***     					ExitToState<=RecoveryRcvrLock;
    300             1                    ***0***     					ExitToFlag<=1;
    301                                              				end
    302                                              			end
    303                                              		end
    304                                              		RecoveryIdle:begin
    305             1                      13424     			turnOffScrambler_flag_next=1'b0; //marwan
    306                                              		if( OSCount >= 18 && sending_idle)begin
    307             1                      13260     					ExitToState<=L0;
    308             1                      13260     					ExitToFlag<=1;
    309                                              		end		
    310                                              		end
    311                                              
    312                                              		recoverywait:begin
    313                                              			if(RxStandby)
    314                                              			begin
    315             1                         21     				ExitToState<=recoverySpeedeieos;
    316             1                         21     				ExitToFlag<=1;
    317                                              			end
    318                                              		end
    319                                              
    320                                              	endcase
    321                                              end
    322                                              assign Gen = MainLTSSMGen;
    323                                              integer i;
    324             1                     544612     always @(posedge Pclk) begin
    325                                              	//Default values of outputs
    326                                              	//Gen <= CurrentGen;
    327             1                     544612     	ElecIdleReq <= {LANESNUMBER{1'b0}};
    328             1                     544612     	DetectReq<= {LANESNUMBER{1'b0}};
    329             1                     544612     	OSGeneratorStart <=0;
    330             1                     544612     	WriteLinkNumFlag <=0;
    331             1                     544612     	SpeedChange<=1'b0;
    332             1                     544612     	UsePresetCoff<=1'b0;
    333             1                     544612     	ResetEIEOSCount<=1'b0;
    334             1                     544612     	RejectCoff<=1'b0;
    335             1                     544612     	ReqEq <= 1'b0;
    336             1                     544612     	RxStandby<=16'b0;
    337                                              
    338                                              	case(State)
    339                                              		DetectQuiet:begin
    340             1                        107     			turnOffScrambler_flag_next<=1'b1;
    341             1                        107     			HoldFIFOData <= 1;
    342             1                        107     			ElecIdleReq <= {LANESNUMBER{1'b1}};
    343                                              			//**marwan**//
    344                                              			if(CurrentGen <= 1 )begin
    345                                              
    346             1                        107     				EQTS2<=0;
    347                                              
    348                                              			end
    349                                              
    350                                              			//**marwan**//
    351                                              		end
    352                                              		DetectActive:begin
    353             1                      22671     			turnOffScrambler_flag_next<=1'b1;
    354             1                      22671     			HoldFIFOData<=1;
    355             1                      22671     			DetectReq<= {LANESNUMBER{1'b1}};
    356                                              			//**marwan**//
    357                                              			if(CurrentGen <= 1 )begin
    358                                              
    359             1                      22671     				EQTS2<=0;
    360                                              
    361                                              			end
    362                                              
    363                                              			//**marwan**//
    364                                              		end
    365                                              		 PollingActive:begin
    366             1                     126600     			turnOffScrambler_flag_next<=1'b1;
    367             1                     126600     			HoldFIFOData<=1;
    368             1                     126600     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    369                                              			if(!OSGeneratorBusy)begin //it is supposed that
    370             1                      63300     			OSType<=2'b00;
    371             1                      63300     		   LaneNumber<=2'b00;
    372             1                      63300     			LinkNumber<=8'b0;
    373             1                      63300     			Rate<=MAX_GEN;
    374             1                      63300     			Loopback<=1;
    375             1                      63300     			OSGeneratorStart<=1;
    376                                              			end
    377                                              		end
    378                                              		PollingConfigration:begin
    379             1                      41744     			turnOffScrambler_flag_next<=1'b1;
    380             1                      41744     			HoldFIFOData<=1;
    381             1                      41744     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    382                                              			if(!OSGeneratorBusy)begin //it is supposed that
    383             1                      20860     			OSType<=2'b01; //TS2
    384             1                      20860     		   LaneNumber<=2'b00;
    385             1                      20860     			LinkNumber<=8'b0;
    386             1                      20860     			Rate<=MAX_GEN;
    387             1                      20860     			OSGeneratorStart<=1;
    388                                              			end
    389                                              		end
    390                                              		ConfigrationLinkWidthStart:begin
    391             1                      20394     			turnOffScrambler_flag_next<=1'b1;
    392             1                      20394     			HoldFIFOData<=1;
    393             1                      20394     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    394                                              			if(!OSGeneratorBusy)begin //it is supposed that
    395             1                      10198     			OSType<=2'b00; //TS1
    396             1                      10198     		   LaneNumber<=2'b00;
    397             1                      10198     			Rate<=MAX_GEN;
    398                                              			if(DEVICETYPE==DownStream)begin
    399             1                       5132     				LinkNumber<=8'b01;
    400             1                       5132     				WriteLinkNum <= 8'b01;
    401             1                       5132     				WriteLinkNumFlag <= 1;
    402                                              			end
    403                                              			else begin
    404             1                       5066     				LinkNumber<=8'b00; //pad
    405                                              			end
    406             1                      10198     			OSGeneratorStart<=1;
    407                                              			end
    408                                              		end
    409                                              		
    410                                              		ConfigrationLinkWidthAccept:begin
    411             1                        309     			turnOffScrambler_flag_next<=1'b1;
    412             1                        309     			HoldFIFOData<=1;
    413             1                        309     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    414                                              			if(!OSGeneratorBusy)begin //it is supposed that
    415             1                        154     			OSType<=2'b00; //TS1
    416             1                        154     		   LinkNumber<=ReadLinkNum;
    417             1                        154     			Rate<=MAX_GEN;
    418                                              			if(DEVICETYPE==DownStream)begin
    419             1                         22     				LaneNumber<=2'b01; //num_seq
    420                                              			end
    421                                              			else begin
    422             1                        132     				LaneNumber<=8'b00; //pad
    423                                              			end
    424             1                        154     			OSGeneratorStart<=1;
    425                                              			end
    426                                              		end
    427                                              		ConfigrationLaneNumWait:begin
    428             1                       3013     			turnOffScrambler_flag_next<=1'b1;
    429             1                       3013     			HoldFIFOData<=1;
    430             1                       3013     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    431                                              			if(!OSGeneratorBusy)begin //it is supposed that
    432             1                       1508     			OSType<=2'b00; //TS1
    433             1                       1508     		   LinkNumber<=ReadLinkNum;
    434             1                       1508     			Rate<=MAX_GEN;
    435             1                       1508     			LaneNumber<=2'b01; //num_seq
    436             1                       1508     			OSGeneratorStart<=1;
    437                                              			end
    438                                              		end
    439                                              		ConfigrationLaneNumActive:begin
    440             1                        149     			turnOffScrambler_flag_next<=1'b1;
    441             1                        149     			HoldFIFOData<=1;
    442             1                        149     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    443                                              			if(!OSGeneratorBusy)begin //it is supposed that
    444             1                         74     			OSType<=2'b00; //TS1
    445             1                         74     		   LinkNumber<=ReadLinkNum;
    446             1                         74     			Rate<=MAX_GEN;
    447             1                         74     			LaneNumber<=2'b01; //num_seq
    448             1                         74     			OSGeneratorStart<=1;
    449                                              			end
    450                                              		end
    451                                              		
    452                                              		ConfigrationComplete:begin
    453             1                       3724     			turnOffScrambler_flag_next<=1'b1;
    454             1                       3724     			HoldFIFOData<=1;
    455             1                       3724     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    456                                              			/* if(!OSGeneratorBusy && OSCount < 19 && DEVICETYPE)begin //it is supposed that
    457                                              			OSType<=2'b01; //TS2
    458                                              		  LinkNumber<=ReadLinkNum;
    459                                              			Rate<=MAX_GEN;
    460                                              			LaneNumber<=2'b01; //num_seq
    461                                              			OSGeneratorStart<=1;
    462                                              			end			*/
    463                                              			
    464                                              			if(!OSGeneratorBusy /*&& OSCount < 26 && !DEVICETYPE*/)begin //it is supposed that
    465             1                       1856     			OSType<=2'b01; //TS2
    466             1                       1856     		  LinkNumber<=ReadLinkNum;
    467             1                       1856     			Rate<=MAX_GEN;
    468             1                       1856     			LaneNumber<=2'b01; //num_seq
    469             1                       1856     			OSGeneratorStart<=1;
    470                                              			end
    471                                              		end
    472                                              		ConfigrationIdle:begin
    473             1                       2019     			HoldFIFOData<=1;
    474             1                       2019     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    475                                              			if(!OSGeneratorBusy)begin //it is supposed that
    476                                              			
    477                                              			if((!DEVICETYPE) && (!first_time))
    478             1                         16     			     turnOffScrambler_flag_next<=1'b0;
    479                                              
    480                                              			else if((!DEVICETYPE) && (first_time))begin
    481             1                        488     				turnOffScrambler_flag_next<=0;
    482             1                        488     				turnOffScrambler_flag_next2<=0;
    483             1                        488     				turnOffScrambler_flag<=0;
    484                                              			end
    485                                              			     
    486                                              			if(DEVICETYPE && C==4 /*&& !first_time*/)
    487             1                        488     			     turnOffScrambler_flag_next<=1'b0;
    488                                              			/*else if(DEVICETYPE && C==3 && first_time)		
    489                                              			     turnOffScrambler_flag<=1'b0;*/
    490                                              
    491                                              
    492             1                       1006     			OSType<=3'b100; //IDLE
    493             1                       1006     			OSGeneratorStart<=1;
    494                                              			end
    495                                              		end
    496                                              		L0:begin
    497             1                         47     			turnOffScrambler_flag_next<=1'b0;
    498                                              			if(Gen<3'b011)begin 
    499             1                         35     			HoldFIFOData<=0;
    500             1                         35     			MuxSel <=1;
    501                                              			end
    502                                              			
    503                                              			else if(Gen>=3'b011)begin
    504                                              				/*if(!OSGeneratorBusy && !SDSFlag)begin
    505                                              					HoldFIFOData<=1;
    506                                              					MuxSel <=0;
    507                                              					OSType<=3'b110;
    508                                              					OSGeneratorStart<=1;
    509                                              					SDSFlag<=1;					
    510                                              				end */
    511                                              				
    512                                              				if(/*SDSFlag &&*/ OSGeneratorFinish)begin
    513             1                          3     					HoldFIFOData<=0;
    514             1                          3     					MuxSel <=1;
    515                                              				end
    516                                              			end
    517                                              			 //TODO : check is it 1 or 0 for orderset
    518                                              		end
    519                                              		RecoveryRcvrLock: begin
    520             1                      20580     			HoldFIFOData<=1;
    521                                              			//turnOffScrambler_flag_next<=1'b1;  /// Youssef
    522             1                      20580     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    523                                              			if(!OSGeneratorBusy)begin //it is supposed that /// youssef 11/17/2024
    524             1                      10286     				OSType<=3'b000; //TS1
    525             1                      10286     				LinkNumber<=ReadLinkNum;
    526             1                      10286     				Rate<=MAX_GEN;
    527             1                      10286     				EQTS2<=0;
    528             1                      10286     				LaneNumber<=2'b01; //num_seq
    529             1                      10286     				SpeedChange<=ReadDirectSpeedChange;
    530             1                      10286     				EC<=2'b00;
    531             1                      10286     				OSGeneratorStart<=1;
    532                                              			end
    533                                              		end
    534                                              		
    535                                              		
    536                                              		RecoveryRcvrCfg:begin
    537             1                      41361     			HoldFIFOData<=1;
    538                                              			//turnOffScrambler_flag_next<=1'b1;  /// Youssef
    539             1                      41361     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset			
    540                                              			if(!OSGeneratorBusy)begin //it is supposed that
    541             1                      20676     				OSType<=3'b001; //TS2
    542             1                      20676     				LinkNumber<=ReadLinkNum;
    543             1                      20676     				Rate<=MAX_GEN;
    544             1                      20676     				LaneNumber<=2'b01; //num_seq
    545             1                      20676     				SpeedChange<=ReadDirectSpeedChange;
    546             1                      20676     				EC<=2'b00;
    547                                              				if (TrainToGen >= Gen3 && DEVICETYPE ==DownStream && ReadDirectSpeedChange )
    548                                              				begin 
    549             1                      10262     					EQTS2<=1;
    550             1                      10262     					for(i=0;i<LANESNUMBER;i=i+1)begin
    550             2                     164192     
    551             1                     164192     						RXPreset[3*i+:3]<=ReceiverpresetHintDSP[3*i+:3];
    552             1                     164192     						TXPreset[4*i+:4]<=TransmitterPresetHintDSP[4*i+:4];
    553                                              					end 
    554                                              				end
    555             1                      20676     				OSGeneratorStart<=1;
    556                                              			end
    557                                              		end
    558                                              		RecoverySpeed:begin
    559             1                      60094     			HoldFIFOData<=1;
    560             1                      60094     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    561                                              			//ElecIdleReq <= {LANESNUMBER{1'b1}};
    562                                              			if(!OSGeneratorBusy)begin 
    563             1                      40054     				OSType<=3'b011; //eios
    564             1                      40054     				OSGeneratorStart<=1;
    565                                              			end
    566                                              		end
    567                                              	//3'b101
    568                                              		recoverySpeedeieos:begin
    569             1                        112     			HoldFIFOData<=1;
    570             1                        112     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    571                                              			//ElecIdleReq <= {LANESNUMBER{1'b1}};
    572                                              			if(!OSGeneratorBusy)begin 
    573             1                         60     				OSType<=3'b101; //eieos
    574             1                         60     				OSGeneratorStart<=1;
    575                                              			end
    576                                              		end
    577                                              
    578                                              		recoverySpeedeieos:begin
    579                                              			HoldFIFOData<=1;
    580                                              			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    581                                              			//ElecIdleReq <= {LANESNUMBER{1'b1}};
    582                                              			if(!OSGeneratorBusy)begin 
    583                                              				OSType<=3'b101; //eieos
    584                                              				OSGeneratorStart<=1;
    585                                              			end
    586                                              		end
    587                                              
    588                                              		recoverywait:begin
    589             1                         33     			HoldFIFOData<=1;
    590             1                         33     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    591                                              			if(!OSGeneratorBusy)begin
    592             1                         29     			ElecIdleReq <= {LANESNUMBER{1'b1}};
    593             1                         29     			RxStandby <= {LANESNUMBER{1'b1}};
    594                                              			end
    595                                              		end
    596                                              
    597                                              		Ph0:begin
    598             1                     161360     			HoldFIFOData<=1;
    599             1                     161360     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    600                                              			if(DEVICETYPE==UpStream)begin/////////////////****************************************************************////////Youssef
    601                                              				if(!OSGeneratorBusy)begin //it is supposed that
    602             1                      40339     					OSType<=3'b000; //TS1
    603             1                      40339     					LinkNumber<=ReadLinkNum;
    604             1                      40339     					Rate<=MAX_GEN;
    605             1                      40339     					LaneNumber<=2'b01; //num_seq
    606             1                      40339     					SpeedChange<=ReadDirectSpeedChange;
    607             1                      40339     					EC<=2'b00;
    608             1                      40339     					for(i=0;i<LANESNUMBER;i=i+1)begin
    608             2                     645424     
    609             1                     645424     						TXPreset[4*i+:4]<=TransmitterPresetHintUSP[4*i+:4];
    610             1                     645424     						PreCursorCoff[6*i+:6] <=PreCursorCoff_register[6*i+:6];//[23:18][5:0]       [35:0][17:0]
    611             1                     645424     						CursorCoff[6*i+:6]    <=CursorCoff_register[6*i+:6];//[29:24][11:6]
    612             1                     645424     	 					PostCursorCoff[6*i+:6]<=PostCursorCoff_register[6*i+:6];//[35:30][17:12]
    613                                              					  //LF[6*i+:6] <= LocalLF[(6*LANESNUMBER-6)-6*i+:6];
    614                                              						//FS[6*i+:6] <= LocalFS[(6*LANESNUMBER-6)-6*i+:6];
    615                                              					end 
    616                                              
    617             1                      40339     					OSGeneratorStart<=1;
    618                                              				end
    619                                              			end
    620                                              			
    621                                              			
    622                                              			
    623                                              			else if(DEVICETYPE==DownStream)begin/////////////////****************************************************************////////Youssef
    624                                              				if(!OSGeneratorBusy)begin //it is supposed that
    625             1                      40340     					OSType<=3'b000; //TS1
    626             1                      40340     					LinkNumber<=ReadLinkNum;
    627             1                      40340     					Rate<=MAX_GEN;
    628             1                      40340     					LaneNumber<=2'b01; //num_seq
    629             1                      40340     					SpeedChange<=ReadDirectSpeedChange;
    630             1                      40340     					EC<=2'b01;
    631             1                      40340     					for(i=0;i<LANESNUMBER;i=i+1)begin
    631             2                     645440     
    632             1                     645440     						TXPreset[4*i+:4]<=TransmitterPresetHintUSP[4*i+:4];
    633             1                     645440     						PreCursorCoff[6*i+:6] <=PreCursorCoff_register[6*i+:6];//[23:18][5:0]       [35:0][17:0]
    634             1                     645440     						CursorCoff[6*i+:6]    <=CursorCoff_register[6*i+:6];//[29:24][11:6]
    635             1                     645440     	 					PostCursorCoff[6*i+:6]<=PostCursorCoff_register[6*i+:6];//[35:30][17:12]
    636             1                     645440     					  LF[6*i+:6] <= LF_register[(6*LANESNUMBER-6)-6*i+:6];
    637             1                     645440     						FS[6*i+:6] <= FS_register[(6*LANESNUMBER-6)-6*i+:6];
    638                                              					end 
    639                                              
    640             1                      40340     					OSGeneratorStart<=1;
    641                                              				end
    642                                              			end
    643                                              			
    644                                              			
    645                                              		end
    646                                              		Ph1:begin
    647             1                         36     			HoldFIFOData<=1;
    648             1                         36     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    649                                              			if(DEVICETYPE==DownStream)begin
    650                                              				
    651                                              				if(!OSGeneratorBusy)begin //it is supposed that
    652             1                          2     					OSType<=3'b000; //TS1
    653             1                          2     					LinkNumber<=ReadLinkNum;
    654             1                          2     					Rate<=MAX_GEN;
    655             1                          2     					LaneNumber<=2'b01; //num_seq
    656             1                          2     					SpeedChange<=ReadDirectSpeedChange;
    657             1                          2     					EC<=2'b00;    // Youssef //need to redit
    658             1                          2     					for(i=0;i<LANESNUMBER;i=i+1)begin
    658             2                         32     
    659             1                         32     						TXPreset[4*i+:4]<=TransmitterPresetHintDSP[4*i+:4];
    660                                              						//PreCursorCoff[6*i+5:6*i] <=LocalTxPresetCoefficients[18*LANESNUMBER-18*i-12-1:18*LANESNUMBER-18*i-18];//[23:18][5:0]       [35:0][17:0]
    661                                              						//CursorCoff[6*i+5:6*i] <=LocalTxPresetCoefficients[18*LANESNUMBER-18*i-6-1:18*LANESNUMBER-18*i-12];//[29:24][11:6]
    662             1                         32     	 					PostCursorCoff[6*i+:6] <=PostCursorCoff_register[6*i+:6];//[35:30][17:12]
    663             1                         32     						LF[6*i+:6] <= LF_register[6*i+:6];
    664             1                         32     						FS[6*i+:6] <= FS_register[6*i+:6];
    665                                              					end 
    666             1                          2     					OSGeneratorStart<=1;
    667                                              				end
    668                                              			end
    669                                              			else if(DEVICETYPE==UpStream)begin
    670                                              			if(!OSGeneratorBusy)begin //it is supposed that
    671             1                         16     					OSType<=3'b000; //TS1
    672             1                         16     					LinkNumber<=ReadLinkNum;
    673             1                         16     					Rate<=MAX_GEN;
    674             1                         16     					LaneNumber<=2'b01; //num_seq
    675             1                         16     					SpeedChange<=ReadDirectSpeedChange;
    676             1                         16     					EC<=2'b01;    // Youssef //need to redit
    677             1                         16     					for(i=0;i<LANESNUMBER;i=i+1)begin
    677             2                        256     
    678             1                        256     						TXPreset[4*i+:4]<=TransmitterPresetHintUSP[4*i+:4];
    679                                              						//PreCursorCoff[6*i+5:6*i] <=LocalTxPresetCoefficients[18*LANESNUMBER-18*i-12-1:18*LANESNUMBER-18*i-18];//[23:18][5:0]       [35:0][17:0]
    680                                              						//CursorCoff[6*i+5:6*i] <=LocalTxPresetCoefficients[18*LANESNUMBER-18*i-6-1:18*LANESNUMBER-18*i-12];//[29:24][11:6]
    681             1                        256     	 					PostCursorCoff[6*i+:6] <=PostCursorCoff_register[6*i+:6];//[35:30][17:12]
    682             1                        256     						LF[6*i+:6] <= LF_register[6*i+:6];
    683             1                        256     						FS[6*i+:6] <= FS_register[6*i+:6];
    684                                              					end 
    685             1                         16     					OSGeneratorStart<=1;
    686                                              				end
    687                                              			
    688                                              			
    689                                              			
    690                                              			end
    691                                              		
    692                                              		
    693                                              		end
    694                                              		RecoveryIdle:begin
    695             1                      40246     			HoldFIFOData<=1;
    696             1                      40246     			MuxSel <=0; //TODO : check is it 1 or 0 for orderset
    697             1                      40246     			ElecIdleReq <= {LANESNUMBER{1'b1}};
    698                                              			//turnOffScrambler_flag_next<=1'b0;
    699                                              
    700                                              			if(!OSGeneratorBusy)begin
    701                                              				//--------marwan------// 
    702                                              				if(Gen>=3'b011 && !SKPFlag)begin
    703             1                          8     					OSType<=3'b010; //sds
    704                                              					if(SKP_counter >= 1)begin
    705             1                          4     						SKPFlag<=1;
    706                                              					end
    707             1                          8     					SKP_counter<=SKP_counter+1;
    708                                              				end
    709                                              				//--------marwan------// 	
    710                                              				else if(Gen>=3'b011 && !SDSFlag)begin
    711             1                          8     					OSType<=3'b110; //sds
    712                                              					if(SDS_counter >= 1)begin
    713             1                          4     						SDSFlag<=1;	
    714                                              					end
    715             1                          8     					SDS_counter<=SDS_counter+1;
    716             1                          8     					OSCount<=0;
    717                                              				end
    718                                              				else begin
    719             1                      13400     					OSType<=3'b100; //idle
    720             1                      13400     					sending_idle = 1;
    721                                              					/*if(SDS_counter>=)begin
    722                                              						OSCount=0;
    723                                              						SDSFlag=0;
    724                                              					end*/
    725                                              
    726                                              				end
    727             1                      13416     				OSGeneratorStart<=1;
    728                                              			end
    729                                              
    730                                              		end
    731                                              	
    732                                              	endcase 
    733                                              end
    734                                              
    735                                              
    736                                              //on trasition to different state initialize orderset_count and any other variable need to be initialized
    737             1                     264850     always @(posedge Pclk)
    738                                              	begin
    739             1                     264850     	TimerStart <= 0;
    740                                              	case(State)
    741                                              		DetectQuiet:begin
    742                                              			if( NextState == DetectActive)begin
    743             1                         35     				TimerEnable <= 1;
    744             1                         35     				TimerStart  <= 1;
    745             1                         35     				TimerIntervalCode <= t12ms;
    746                                              			end
    747                                              			else if (NextState == PollingActive || NextState == PollingConfigration 
    748                                              			|| NextState == ConfigrationComplete ||NextState == ConfigrationIdle)begin
    749             1                    ***0***     				OSCount<=0;		
    750                                              			end
    751                                              			if(TimeOut)begin
    752             1                         17     				TimerEnable <= 0;
    753                                              			end
    754                                              		end		
    755                                              		
    756                                              		DetectActive:begin
    757             1                        116     			C = 0 ;
    758                                              			if(NextState == DetectQuiet)begin
    759             1                          6     				TimerEnable <= 1;
    760             1                          6     				TimerStart  <= 1;
    761             1                          6     				TimerIntervalCode <= t12ms;
    762                                              			end
    763                                              			else if (NextState == PollingActive || NextState == PollingConfigration 
    764                                              			|| NextState == ConfigrationComplete ||NextState == ConfigrationIdle)begin
    765             1                         28     				OSCount<=0;		
    766                                              			end			
    767                                              		   if(TimeOut)begin
    768             1                    ***0***     				TimerEnable <= 0;
    769                                              			end
    770                                              		end		
    771                                              
    772                                              		PollingActive:begin
    773                                              			if(OSGeneratorFinish)begin
    774             1                      31622     				OSCount<=OSCount+1;		
    775                                              			end
    776                                              			if(NextState == DetectQuiet || NextState == DetectActive)begin
    777             1                          2     				TimerEnable <= 1;
    778             1                          2     				TimerStart  <= 1;
    779             1                          2     				TimerIntervalCode <= t12ms;
    780                                              			end
    781                                              			else if ( NextState == PollingConfigration || NextState == ConfigrationComplete 
    782                                              			||NextState == ConfigrationIdle)begin
    783             1                         26     				OSCount<=0;		
    784                                              			end			
    785                                              		end		
    786                                              		
    787                                              		PollingConfigration :begin
    788                                              			if(OSGeneratorFinish)begin
    789             1                      10430     				OSCount<=OSCount+1;		
    790                                              			end
    791                                              			if(NextState == DetectQuiet || NextState == DetectActive)begin
    792             1                          2     				TimerEnable <= 1;
    793             1                          2     				TimerStart  <= 1;
    794             1                          2     				TimerIntervalCode <= t12ms;
    795                                              			end
    796                                              			else if (NextState == PollingActive  
    797                                              			|| NextState == ConfigrationComplete ||NextState == ConfigrationIdle)begin
    798             1                    ***0***     				OSCount<=0;		
    799                                              			end			
    800                                              		end		
    801                                              	
    802                                              		ConfigrationComplete:begin
    803                                              			if(OSGeneratorFinish)begin
    804             1                        928     				OSCount<=OSCount+1;		
    805                                              			end
    806                                              			if(NextState == DetectQuiet || NextState == DetectActive)begin
    807             1                          3     				TimerEnable <= 1;
    808             1                          3     				TimerStart  <= 1;
    809             1                          3     				TimerIntervalCode <= t12ms;
    810                                              			end
    811                                              			else if (NextState == PollingActive || NextState == PollingConfigration 
    812                                              			||NextState == ConfigrationIdle)begin
    813             1                         14     				OSCount<=0;		
    814                                              			end			
    815                                              		end		
    816                                              
    817                                              		ConfigrationIdle:begin
    818                                              			if(OSGeneratorFinish)begin
    819             1                        503     				OSCount<=OSCount+1;		
    820                                              			end
    821                                              			if(NextState == DetectQuiet || NextState == DetectActive)begin
    822             1                          2     				TimerEnable <= 1;
    823             1                          2     				TimerStart  <= 1;
    824             1                          2     				TimerIntervalCode <= t12ms;
    825                                              			end
    826                                              			
    827                                              			else if (NextState == PollingActive || NextState == PollingConfigration 
    828                                              			|| NextState == ConfigrationComplete || NextState == L0 )begin
    829             1                         12     				OSCount<=0;		
    830                                              			end			
    831                                              		end		
    832                                              		
    833                                              			
    834                                              		
    835                                              		RecoveryRcvrLock:begin  /// youssef 11/17/2024
    836                                              			if(OSGeneratorFinish)begin
    837             1                       5136     				OSCount <= OSCount + 1;		
    838                                              			end
    839                                              			if(TimeOut)begin
    840             1                       5102     				TimerEnable <= 0;
    841                                              			end
    842                                              			
    843                                              		 if(NextState==RecoveryRcvrCfg)begin
    844             1                         14     				TimerEnable <= 1;
    845             1                         14     				TimerStart  <= 1;
    846             1                         14     				TimerIntervalCode <= t24ms; //marwan
    847             1                         14     				OSCount<= 0;
    848                                              			end
    849                                              			
    850                                              			
    851                                              		end
    852                                              		
    853                                              		
    854                                              		RecoveryRcvrCfg:begin
    855                                              		  
    856                                              		  if(OSGeneratorFinish)begin
    857             1                      10338     				OSCount<=OSCount+1;		
    858                                              			end
    859                                              			
    860                                              			if(NextState==RecoverySpeed)begin
    861             1                          8     				TimerEnable <= 1;
    862             1                          8     				TimerStart  <= 1;
    863             1                          8     				TimerIntervalCode <= t0ms;
    864             1                          8     				OSCount<= 0;
    865                                              			end
    866                                              			else if (NextState==RecoveryIdle)begin
    867             1                          4     				OSCount<= 0;
    868             1                          4     				SDSFlag<=0;
    869                                              			end
    870                                              		end
    871                                              		
    872                                              				
    873                                              		
    874                                              		
    875                                              		RecoverySpeed:begin
    876                                              			if(OSGeneratorFinish)begin
    877             1                      20028     				OSCount <= OSCount + 1;		
    878                                              			end
    879                                              			if(TimeOut)begin
    880             1                      40070     				TimerEnable <= 0;
    881                                              			end
    882                                              		end
    883                                              		RecoveryIdle:begin
    884                                              			if(OSGeneratorFinish)begin
    885             1                       6708     				OSCount<=OSCount+1;		
    886                                              			end
    887                                              			if(NextState == DetectQuiet || NextState == DetectActive)begin
    888             1                          1     				TimerEnable <= 1;
    889             1                          1     				TimerStart  <= 1;
    890             1                          1     				TimerIntervalCode <= t12ms;
    891                                              			end
    892                                              			
    893                                              			
    894                                              			else if (NextState == PollingActive || NextState == PollingConfigration 
    895                                              			|| NextState == ConfigrationComplete || NextState==L0  )begin
    896             1                          3     				OSCount<=0;		
    897             1                          3     				SDSFlag<=0;
    898                                              			end			
    899                                              		end		
    900                                              		default:begin
    901                                              			if(NextState == DetectQuiet || NextState == DetectActive)begin
    902             1                         31     				TimerEnable <= 1;
    903             1                         31     				TimerStart  <= 1;
    904             1                         31     				TimerIntervalCode <= t12ms;
    905                                              			end
    906                                              			else if (NextState == PollingActive || NextState == PollingConfigration 
    907                                              			|| NextState == ConfigrationComplete ||NextState == ConfigrationIdle || NextState == RecoverySpeed || NextState == Ph1 )begin
    908             1                         41     				OSCount<=0;		
    909                                              			end			
    910                                              		end		
    911                                              	endcase
    912                                              end
    913                                              // outputs
    914             1                     140404     always @ (posedge Pclk)
    915                                              begin
    916                                              	if(!Reset) begin
    917             1                          8     		turnOffScrambler_flag<= 1'b1;
    918             1                          8     		State <= Idle;
    919             1                          8     		TXExitTo <= DetectQuiet;
    920             1                          8     		TXFinishFlag <= 0;
    921             1                          8     		CurrentGen=Gen1;
    922             1                          8     		WriteDetectLanesFlag<=0;
    923             1                          8     		SDSFlag<=0;
    924             1                          8     		SKPFlag<=0;
    925             1                          8     		SKP_counter<= 0;
    926             1                          8     		SDS_counter <= 0 ;
    927             1                          8     		idleCounts<=0;
    928             1                          8     		ExitToState<=0;
    929             1                          8     		ExitToFlag<=0;
    930             1                          8     		OSCount<=0;
    931                                              		//WriteDetectLanesFlagReg<=0;
    932             1                          8     		TimerEnable<=0;
    933             1                          8     		TimerStart<=0;
    934             1                          8     		TimerIntervalCode<=0;
    935             1                          8     		turnOffScrambler_flag_next<=0;
    936             1                          8     		turnOffScrambler_flag_next2<=0;
    937                                              		//resending_idle<=0;
    938             1                          8     		C <=0;
    939                                              	end
    940                                              	else begin
    941             1                     140396     		turnOffScrambler_flag <= turnOffScrambler_flag_next2;
    942             1                     140396     		turnOffScrambler_flag_next2<=turnOffScrambler_flag_next;
    943             1                     140396     		State   <= NextState;
    944             1                     140396     		TXExitTo<= ExitToState;
    945             1                     140396     		TXFinishFlag <= ExitToFlag;
    946             1                     140396     		WriteDetectLanesFlag<=WriteDetectLanesFlagReg;
    947                                              	end
    948                                              end
    949                                              
    950                                              
    951             1                         12     always @(posedge startSend16) 
    952                                              begin
    953             1                         12     	idleCounts = OSCount; 	
    954                                              end
    955                                              
    956                                              
    957             1                        433     always @(posedge Pclk) 
    958                                              begin
    959             1                         56       if(State == ConfigrationIdle && C <4 ) C <= C+1; 	
    960                                              end
    961                                              
    962                                              
    963                                              
    964                                              endmodule


=================================================================================
=== File: RTL/UnStriping.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           12        12         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/UnStriping.v --

    1                                                module UnStriping(input wire clk, input wire reset, input wire [5:0]PIPEWIDTH,  input wire [4:0]LANESNUMBER, input wire [63:0]strippedDataK,
    2                                                					input wire [511:0]strippedData, output wire[511:0]unstripedData, output wire [63:0]unstripedDataK);
    3                                                
    4                                                	reg [511:0]data, data_next;
    5                                                	reg [63:0]dataK, dataK_next;
    6                                                	
    7               1                     754420     	always@(posedge clk or negedge reset)
    8                                                		if(!reset)
    9                                                			begin
    10              1                         18     			data <= 0;
    11              1                         18     			dataK <= 0;
    12                                               			end
    13                                               		else 
    14                                               			begin
    15              1                     754402     			data <= data_next;
    16              1                     754402     			dataK <= dataK_next;
    17                                               			end
    18                                               
    19              1                    1024702     	always@*
    20                                               	begin	
    21                                               
    22                                               	 if(PIPEWIDTH == 32)
    23                                               		case(LANESNUMBER)
    24                                               		
    25                                               		16: 
    26                                               			begin
    27              1                    1024684     			data_next = {strippedData[7:0], strippedData[39:32], strippedData[71:64], strippedData[103:96], 
    28                                               						strippedData[135:128], strippedData[167:160], strippedData[199:192], strippedData[231:224],
    29                                               					 	strippedData[263:256], strippedData[295:288], strippedData[327:320], strippedData[359:352],
    30                                               				 		strippedData[391:384], strippedData[423:416], strippedData[455:448], strippedData[487:480], 
    31                                               
    32                                               						strippedData[15:8], strippedData[47:40], strippedData[79:72], strippedData[111:104], 
    33                                               						strippedData[143:136], strippedData[175:168], strippedData[207:200], strippedData[239:232], 
    34                                               						strippedData[271:264], strippedData[303:296], strippedData[335:328], strippedData[367:360], 
    35                                               						strippedData[399:392], strippedData[431:424], strippedData[463:456], strippedData[495:488],
    36                                                
    37                                               						strippedData[23:16], strippedData[55:48], strippedData[87:80], strippedData[119:112], 
    38                                               						strippedData[151:144], strippedData[183:176], strippedData[215:208], strippedData[247:240], 
    39                                               						strippedData[279:272], strippedData[311:304], strippedData[343:336], strippedData[375:368], 
    40                                               						strippedData[407:400], strippedData[439:432], strippedData[471:464], strippedData[503:496],
    41                                               	 
    42                                               						strippedData[31:24], strippedData[63:56], strippedData[95:88], strippedData[127:120], 
    43                                               						strippedData[159:152], strippedData[191:184], strippedData[223:216], strippedData[255:248], 
    44                                               						strippedData[287:280], strippedData[319:312], strippedData[351:344], strippedData[383:376], 
    45                                               						strippedData[415:408], strippedData[447:440], strippedData[479:472], strippedData[511:504]};
    46                                               
    47              1                    1024684     			dataK_next = {strippedDataK[0:0], strippedDataK[4:4], strippedDataK[8:8], strippedDataK[12:12], 
    48                                               						strippedDataK[16:16], strippedDataK[20:20], strippedDataK[24:24], strippedDataK[28:28], 
    49                                               						strippedDataK[32:32], strippedDataK[36:36], strippedDataK[40:40], strippedDataK[44:44], 
    50                                               						strippedDataK[48:48], strippedDataK[52:52], strippedDataK[56:56], strippedDataK[60:60], 
    51                                               
    52                                               						strippedDataK[1:1], strippedDataK[5:5], strippedDataK[9:9], strippedDataK[13:13], 
    53                                               						strippedDataK[17:17], strippedDataK[21:21], strippedDataK[25:25], strippedDataK[29:29], 
    54                                               						strippedDataK[33:33], strippedDataK[37:37], strippedDataK[41:41], strippedDataK[45:45], 
    55                                               						strippedDataK[49:49], strippedDataK[53:53], strippedDataK[57:57], strippedDataK[61:61], 
    56                                               
    57                                               						strippedDataK[2:2], strippedDataK[6:6], strippedDataK[10:10], strippedDataK[14:14], 
    58                                               						strippedDataK[18:18], strippedDataK[22:22], strippedDataK[26:26], strippedDataK[30:30], 
    59                                               						strippedDataK[34:34], strippedDataK[38:38], strippedDataK[42:42], strippedDataK[46:46], 
    60                                               						strippedDataK[50:50], strippedDataK[54:54], strippedDataK[58:58], strippedDataK[62:62], 
    61                                               
    62                                               						strippedDataK[3:3], strippedDataK[7:7], strippedDataK[11:11], strippedDataK[15:15], 
    63                                               						strippedDataK[19:19], strippedDataK[23:23], strippedDataK[27:27], strippedDataK[31:31], 
    64                                               						strippedDataK[35:35], strippedDataK[39:39], strippedDataK[43:43], strippedDataK[47:47], 
    65                                               						strippedDataK[51:51], strippedDataK[55:55], strippedDataK[59:59], strippedDataK[63:63]};
    66                                               					end
    67              1                         16     		default: begin data_next = 0; dataK_next = 0; end
    67              2                         16     
    68                                               		endcase
    69                                               		else 
    70                                               			begin
    71              1                          2     			data_next = 0;
    72              1                          2     			dataK_next = 0;
    73                                               			end
    74                                               	end
    75                                               
    76                                               	assign unstripedData = data;
    77                                               	assign unstripedDataK = dataK;
    78                                               
    79                                               endmodule
    80                                               
    81                                               


=================================================================================
=== File: RTL/comparator.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/comparator.v --

    1                                                module comparator(input[4:0]counterValue,input[4:0]checkValue ,output comparisonValue);
    2               1                     140532     assign comparisonValue = (counterValue >= checkValue)? 1'b1 : 1'b0;
    3                                                endmodule


=================================================================================
=== File: RTL/maintlssm.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          139       135         4      97.1

================================Statement Details================================

Statement Coverage for file RTL/maintlssm.v --

    1                                                module mainLTSSM  #(
    2                                                parameter MAX_GEN = 5,
    3                                                parameter DEVICETYPE=0,
    4                                                parameter Width = 32,
    5                                                parameter GEN1_PIPEWIDTH = 8 ,	
    6                                                parameter GEN2_PIPEWIDTH = 8 ,	
    7                                                parameter GEN3_PIPEWIDTH = 8 ,	
    8                                                parameter GEN4_PIPEWIDTH = 8 ,	
    9                                                parameter GEN5_PIPEWIDTH = 8 ,
    10                                               parameter LANESNUMBER = 16)
    11                                               (
    12                                                   input clk,
    13                                                   input reset,
    14                                                   input [3:0] lpifStateRequest,
    15                                                   input [4:0] numberOfDetectedLanesIn,
    16                                                   input [7:0] linkNumberInTx,
    17                                                   input [7:0] linkNumberInRx,
    18                                                   input [7:0] rateIdIn,
    19                                                   input upConfigureCapabilityIn,
    20                                                   input writeNumberOfDetectedLanes,
    21                                                   input writeLinkNumberTx,
    22                                                   input writeLinkNumberRx,
    23                                                   input writeUpconfigureCapability,
    24                                                   input writeRateId,
    25                                                   input finishTx,
    26                                                   input finishRx,
    27                                                   input [4:0] gotoTx,
    28                                                   input [4:0] gotoRx,
    29                                                   input forceDetect,
    30                                                   /***************eq****************/
    31                                                   input [47:0] ReceiverpresetHintDSPIn,
    32                                                   input [63:0] TransmitterPresetHintDSPIn,
    33                                                   input [47:0] ReceiverpresetHintUSPIn,
    34                                                   input [63:0] TransmitterPresetHintUSPIn,
    35                                                   input writeReceiverpresetHintDSP,
    36                                                   input writeTransmitterPresetHintDSP,
    37                                                   input writeReceiverpresetHintUSP,
    38                                                   input writeTransmitterPresetHintUSP,
    39                                                   input directed_speed_change_In,
    40                                                   input write_directed_speed_change,
    41                                                   input [18*16 -1:0]LocalTxPresetCoefficients,
    42                                                   input [6*16 -1:0]LocalFS,
    43                                                   input [6*16 -1:0]LocalLF,
    44                                                   input [16 -1:0]LocalTxCoefficientsValid,
    45                                                   input [6*16 -1:0]LinkEvaluationFeedbackDirectionChange,
    46                                                   input [16*6-1:0]FSDSP,
    47                                                   input [16*6-1:0]LFDSP,
    48                                                   input turnOffScrambler_flag,
    49                                                   output	reg[18*16 -1:0]TxDeemph,
    50                                                   output  reg[4*16 -1:0]LocalPresetIndex,
    51                                                   output 	reg[16 -1:0]GetLocalPresetCoeffcients,
    52                                                   output 	reg[6*16 -1:0]LF,
    53                                                   output 	reg[6*16 -1:0]FS,
    54                                                   output 	reg[16 -1:0]RxEqEval,
    55                                                   output 	reg[16 -1:0]InvalidRequest,
    56                                                   output  reg directed_speed_change,
    57                                                   output  reg[47:0] ReceiverpresetHintDSP,
    58                                                   output  reg[63:0] TransmitterPresetHintDSP,
    59                                                   output  reg[47:0] ReceiverpresetHintUSP,
    60                                                   output  reg[63:0] TransmitterPresetHintUSP,
    61                                                   output  reg[6*16-1:0]LF_register,
    62                                                   output  reg[6*16-1:0]FS_register,
    63                                                   output  reg[6*16-1:0]CursorCoff,
    64                                                   output  reg[6*16-1:0]PreCursorCoff,
    65                                                   output  reg[6*16-1:0]PostCursorCoff, 
    66                                                   /***************eq****************/
    67                                                   output reg linkUp,
    68                                                   output reg[2:0] GEN,
    69                                                   output [4:0] numberOfDetectedLanesOut,
    70                                                   output [7:0] linkNumberOutTx,
    71                                                   output [7:0] linkNumberOutRx,
    72                                                   output [7:0] rateIdOut,
    73                                                   output upConfigureCapabilityOut,
    74                                                   output reg[3:0] lpifStateStatus,
    75                                                   output reg[4:0] substateTx,
    76                                                   output reg[4:0] substateRx,
    77                                                   output reg[1:0] width,
    78                                                   output reg[2:0] trainToGen,
    79                                                   output reg disableScrambler,
    80                                                   output reg [4:0] PCLKRate,
    81                                                   output reg startSend16);
    82                                               //local signals
    83                                                   reg [4:0] numberOfDetectedLanes;
    84                                                   reg [7:0] linkNumber;
    85                                                   reg [7:0] rateId;
    86                                                   reg upConfigureCapability;
    87                                                   reg [3:0]currentState,nextState;
    88                                                   reg [4:0] substateTxnext,substateRxnext;
    89                                                   integer i;
    90                                                   
    91                                                   reg after_L0;
    92                                               //Local parameters
    93                                                   //LPIF STATES
    94                                               
    95                                               
    96                                               
    97                                                   localparam[3:0]
    98                                                       reset_   = 4'd0,
    99                                                       active_  = 4'd1,
    100                                                      retrain_ = 4'd11;
    101                                              
    102                                                  //Tx/Rx LTSSM states
    103                                                  localparam [4:0]
    104                                              	    detectQuiet =  5'd0,
    105                                                      detectActive = 5'd1,
    106                                                      pollingActive= 5'd2,
    107                                                      pollingConfiguration= 5'd3,
    108                                                      configurationLinkWidthStart = 5'd4,
    109                                                      configurationLinkWidthAccept = 5'd5,
    110                                                      configurationLanenumWait = 5'd6,
    111                                                      configurationLanenumAccept = 5'd7,
    112                                                      configurationComplete = 5'd8,
    113                                                      configurationIdle = 5'd9,
    114                                                      L0 = 5'd10,
    115                                                      recoveryRcvrLock = 5'd11,
    116                                                      recoveryRcvrCfg = 5'd12,
    117                                                      recoverySpeed = 5'd13,
    118                                                      phase0 = 5'd14,
    119                                                      phase1 = 5'd15,
    120                                                      phase2 = 5'd16,
    121                                                      phase3 =5'd17,
    122                                                      recoveryIdle = 5'd18,
    123                                                      recoverySpeedeieos = 5'd19,
    124                                                      recoverywait = 5'd20;
    125                                              
    126                                              
    127                                              
    128                                              
    129             1                        119         always @(posedge clk) 
    130                                                  begin
    131             1                         58             if(turnOffScrambler_flag)disableScrambler<=1'b1;
    132             1                         61             else disableScrambler<=1'b0;      
    133                                                  end
    134                                              
    135             1                      56004         always @(posedge clk or negedge reset)
    136                                                  begin
    137                                                      if(!reset || forceDetect)
    138                                                      begin
    139             1                         20                 numberOfDetectedLanes<= 0;
    140             1                         20                 linkNumber<= 0;
    141             1                         20                 rateId<= 0;
    142             1                         20                 upConfigureCapability<= 0;
    143             1                         20                 nextState<= 0;
    144             1                         20                 substateTxnext<= 0;
    145             1                         20                 substateRxnext<= 0;
    146             1                         20                 i<= 0;
    147                                                  
    148             1                         20                 after_L0<= 0;
    149             1                         20                 currentState <= reset_;
    150             1                         20                 ReceiverpresetHintDSP<=48'hAABBCCDD1122;
    151             1                         20                 TransmitterPresetHintDSP<=64'h11AA22BB33CC44DD;
    152             1                         20                 ReceiverpresetHintUSP<=48'h2211DDCCBBAA;
    153             1                         20                 TransmitterPresetHintUSP<=64'h11AA22BB33CC44DD;
    154             1                         20                 GEN <= 3'd1;
    155                                                          
    156                                                      end
    157                                                      else
    158                                                      begin
    159             1                      55984                 currentState <= nextState;
    160             1                      55984                 substateTx <= substateTxnext;
    161             1                      55984                 substateRx <= substateRxnext;
    162             1                      55967                 if(writeNumberOfDetectedLanes)numberOfDetectedLanes<=numberOfDetectedLanesIn;
    163             1                       2582                 if(writeLinkNumberTx)linkNumber<=linkNumberInTx;
    164             1                         22                 else if(writeLinkNumberRx)linkNumber<=linkNumberInRx;
    165             1                        124                 if(writeUpconfigureCapability)upConfigureCapability<=upConfigureCapabilityIn;
    166             1                          8                 if(writeReceiverpresetHintDSP)ReceiverpresetHintDSP <=ReceiverpresetHintDSPIn;
    167             1                         11                 if(writeReceiverpresetHintUSP)ReceiverpresetHintUSP <=ReceiverpresetHintUSPIn;
    168             1                         11                 if(writeTransmitterPresetHintUSP) TransmitterPresetHintUSP<=TransmitterPresetHintUSPIn;
    169             1                          8                 if(writeTransmitterPresetHintDSP)TransmitterPresetHintDSP <=TransmitterPresetHintDSPIn;
    170                                                   //       if(write_directed_speed_change) directed_speed_change <= directed_speed_change_In;
    171             1                        124                 if(writeRateId)rateId <= rateIdIn;
    172                                                      end    
    173                                                  end
    174                                              
    175                                              //next LPIF state handling
    176             1                      13062         always @(*)
    177                                                   begin
    178                                                     case (currentState)
    179                                                      reset_:
    180                                                      begin
    181                                                          if(finishTx&&gotoTx==L0&&finishRx&&gotoRx==L0&&lpifStateRequest==active_)
    182                                                          begin
    183             1                         12                     nextState <= active_;
    184                                                          end
    185                                                      end
    186                                                      active_:
    187                                                      begin
    188                                                          /*if(lpifStateRequest==reset_)
    189                                                          begin
    190                                                             nextState <= reset_; 
    191                                                          end//--------------------marwan---------------------//
    192                                                          else*/ if(((lpifStateRequest==retrain_) && (!DEVICETYPE) )|| ((trainToGen >= 3'd2) &&  (GEN !=trainToGen) && (!DEVICETYPE) ) )
    193                                                          begin
    194             1                          6                    nextState <= retrain_; 
    195                                                          end 
    196                                                          else if(  (DEVICETYPE) && finishRx && (gotoRx== recoveryRcvrLock) && ( GEN !=trainToGen) )  
    197                                                          begin
    198             1                          6                    nextState <= retrain_; 
    199                                                          end 
    200                                                        /*  else if(gotoRx==detectQuiet&&finishRx && after_L0)begin
    201                                                       //       nextState<=reset_;
    202                                                          end*/
    203                                                          //---------------------marwan------------------------//
    204                                                      end
    205                                                      retrain_:
    206                                                      begin
    207                                                          if(finishTx&&(gotoTx==L0)&&finishRx&&(gotoRx==L0))
    208                                                          begin
    209             1                          3                    nextState <= active_; 
    210                                                          end//--------------------marwan---------------------//
    211                                                          else if((gotoRx==detectQuiet)&&finishRx && after_L0)begin
    212             1                          7                     nextState<= reset_;
    213                                                          end
    214                                                          //---------------------marwan------------------------//
    215                                              
    216                                                      end 
    217                                                      default:
    218             1                    ***0***                 nextState <= reset_; 
    219                                                     endcase 
    220                                                      
    221                                                  end
    222                                              
    223                                              //check on gneration and adjust width reg 0 for 8bit 1 for 16bit 2 for 32bit
    224             1                         35     always @ (posedge clk)
    225                                              begin 
    226             1                          8     	if(!reset) begin width <= 0; end
    227                                              	else begin
    228                                              		if (GEN == 1)begin  
    229                                              			case(GEN1_PIPEWIDTH)
    230                                              			8:width<=0;
    231                                              			16:width<=1;
    232             1                         20     			32:width<=2;
    233                                              			endcase
    234                                              		end
    235                                              		else if (GEN == 5)begin  
    236                                              			case(GEN5_PIPEWIDTH)
    237                                              			8:width<=0;
    238                                              			16:width<=1;
    239             1                          6     			32:width<=2;
    240                                              			endcase
    241                                              		end
    242                                              		
    243                                              	end
    244                                              end
    245                                              
    246                                              //output handling block
    247             1                      13329         always @(*)
    248                                                  begin
    249                                                      //disableScrambler = 1'b1;
    250                                                     case (currentState)
    251                                                      reset_:
    252                                                      begin
    253                                                          case ({substateTx,substateRx})
    254                                                              {detectQuiet,detectQuiet}:
    255                                                              begin
    256             1                        108                         after_L0=0;
    257                                                                  //lpifStateStatus = reset_; //marwan
    258                                                                 if (/*finishTx&&*/finishRx&&/*gotoTx==detectActive&&*/gotoRx==detectActive) 
    259                                                                  begin
    260             1                         35                             {substateTxnext,substateRxnext} = {detectActive,detectActive};
    261             1                         35                             lpifStateStatus = reset_;
    262                                                                  end 
    263                                                              end
    264                                                              
    265                                                              {detectActive,detectActive}:
    266                                                              begin
    267                                                                  if (finishTx&&finishRx&&gotoTx==pollingActive&&gotoRx==pollingActive) 
    268                                                                      begin
    269             1                         28                                 {substateTxnext,substateRxnext} = {pollingActive,pollingActive};
    270             1                         28                                 lpifStateStatus = reset_;
    271                                                                      end
    272                                                               /*   else if((finishTx&&gotoTx==detectQuiet)||(finishRx&&gotoRx==detectQuiet))
    273                                                                      begin
    274                                                                          {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    275                                                                          lpifStateStatus = reset_;
    276                                                                      end*/
    277                                                              end
    278                                              
    279                                                              {pollingActive,pollingActive}:
    280                                                              begin
    281                                                                  if ((finishRx&&gotoRx==pollingConfiguration) && (gotoTx==pollingConfiguration&&finishTx)) 
    282                                                                      begin
    283             1                         26                                 {substateTxnext,substateRxnext}= {pollingConfiguration,pollingConfiguration};
    284             1                         26                                 lpifStateStatus = reset_;
    285                                                                      end
    286                                                                  else if((finishTx&&gotoTx==detectQuiet)||(finishRx&&gotoRx==detectQuiet))
    287                                                                      begin
    288             1                          2                                 {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    289             1                          2                                 lpifStateStatus = reset_;
    290                                                                      end
    291                                                              end
    292                                                              {pollingConfiguration,pollingConfiguration}:
    293                                                              begin
    294                                                                  if (finishTx&&finishRx&&gotoTx==configurationLinkWidthStart&&gotoRx==configurationLinkWidthStart) 
    295                                                                      begin
    296             1                         24                                 {substateTxnext,substateRxnext}= {configurationLinkWidthStart,configurationLinkWidthStart};
    297             1                         24                                 lpifStateStatus = reset_;
    298                                                                      end
    299                                                                  else if((finishTx&&gotoTx==detectQuiet)||(finishRx&&gotoRx==detectQuiet))
    300                                                                      begin
    301             1                          2                                 {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    302             1                          2                                 lpifStateStatus = reset_;
    303                                                                      end
    304                                                              end
    305                                                              {configurationLinkWidthStart,configurationLinkWidthStart}:
    306                                                              begin
    307                                                                  if (finishRx&&gotoRx==configurationLinkWidthAccept) 
    308                                                                      begin
    309             1                         22                                 {substateTxnext,substateRxnext}= {configurationLinkWidthAccept,configurationLinkWidthAccept};
    310             1                         22                                 lpifStateStatus = reset_;
    311                                                                      end
    312                                                                  else if((finishTx&&gotoTx==detectQuiet)||(finishRx&&gotoRx==detectQuiet))
    313                                                                      begin
    314             1                          2                                 {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    315             1                          2                                 lpifStateStatus = reset_;
    316                                                                      end
    317                                                              end
    318                                                              {configurationLinkWidthAccept,configurationLinkWidthAccept}:
    319                                                              begin
    320                                                                  if ( (!DEVICETYPE) && finishTx && (gotoTx==configurationLanenumWait) /*&& (gotoRx==configurationLanenumWait) && finishRx*/ )//in downstream the Rx doesn't make any thing
    321                                                                      begin
    322             1                         11                                 {substateTxnext,substateRxnext}= {configurationLanenumWait,configurationLanenumWait};
    323             1                         11                                 lpifStateStatus = reset_;
    324                                                                      end
    325                                                                  else if (DEVICETYPE&&finishTx&&finishRx&&(gotoTx==configurationLanenumWait)&&(gotoRx==configurationLanenumWait)) 
    326                                                                      begin
    327             1                         11                                 {substateTxnext,substateRxnext}= {configurationLanenumWait,configurationLanenumWait};
    328             1                         11                                 lpifStateStatus = reset_;
    329                                                                      end
    330                                                                  else if((finishTx&&gotoTx==detectQuiet)||(finishRx&&gotoRx==detectQuiet)) 
    331                                                                      begin
    332             1                    ***0***                                 {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    333             1                    ***0***                                 lpifStateStatus = reset_;
    334                                                                      end
    335                                                              end
    336                                                              {configurationLanenumWait,configurationLanenumWait}:
    337                                                                  if (finishRx&&gotoRx==configurationLanenumAccept) 
    338                                                                      begin
    339             1                         18                                 {substateTxnext,substateRxnext}= {configurationLanenumAccept,configurationLanenumAccept};
    340             1                         18                                 lpifStateStatus = reset_;
    341                                                                      end
    342                                                                  else if((finishTx&&gotoTx==detectQuiet)||(finishRx&&gotoRx==detectQuiet))
    343                                                                      begin
    344             1                          4                                 {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    345             1                          4                                 lpifStateStatus = reset_;
    346                                                                      end
    347                                                              {configurationLanenumAccept,configurationLanenumAccept}:
    348                                                                  if (finishRx&&gotoRx==configurationComplete) 
    349                                                                      begin
    350             1                         17                                 {substateTxnext,substateRxnext}= {configurationComplete,configurationComplete};
    351             1                         17                                 lpifStateStatus = reset_;
    352                                                                      end
    353                                                                  else if((finishTx&&gotoTx==detectQuiet)||(finishRx&&gotoRx==detectQuiet))
    354                                                                      begin
    355             1                          1                                 {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    356             1                          1                                 lpifStateStatus = reset_;
    357                                                                      end
    358                                                              {configurationComplete,configurationComplete}:
    359                                                                  if (finishRx&&gotoRx==configurationIdle&&finishTx&&gotoTx==configurationIdle) /// solved big mistake tx rather than rx
    360                                                                      begin
    361             1                         14                                 {substateTxnext,substateRxnext}= {configurationIdle,configurationIdle};
    362             1                         14                                 lpifStateStatus = reset_;
    363                                                                      end
    364                                                                  else if((finishTx&&gotoTx==detectQuiet)||(finishRx&&gotoRx==detectQuiet))
    365                                                                      begin
    366             1                          3                                 {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    367             1                          3                                 lpifStateStatus = reset_;
    368                                                                      end
    369                                                              {configurationIdle,configurationIdle}:
    370                                                              begin
    371                                                                  //disableScrambler = 1'b0;
    372             1                         24                         if (finishRx&&gotoRx==L0)startSend16<= 1'b1;
    373                                                                  if (finishTx&&gotoTx==L0) 
    374                                                                      begin
    375             1                         12                                 linkUp = 1'b1;
    376             1                         12                                 startSend16 <= 1'b0;
    377             1                         12                                 lpifStateStatus = reset_;
    378             1                         12                                 {substateTx,substateRx} <= {L0,L0};//ERASE THE COMMENT IF I CAN GOT TO L0 WITHOUT LPIF PERMISSION
    379                                                                      end
    380                                                                  else if((finishTx&&gotoTx==detectQuiet)||(finishRx&&gotoRx==detectQuiet))
    381                                                                      begin
    382             1                          2                                 {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    383             1                          2                                 lpifStateStatus = reset_;
    384                                                                      end
    385                                                              end
    386                                                                  
    387                                              
    388                                                              default:
    389                                                                  begin
    390             1                         21                             {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    391             1                         21                             lpifStateStatus = reset_;
    392             1                         21                             linkUp = 1'b0;
    393                                                                      //pl_speedmode = 3'd0;
    394                                                                  end
    395                                                          
    396                                                          endcase
    397                                                      end
    398                                                      active_:
    399                                                      begin
    400             1                         38                 {substateTxnext,substateRxnext}= {L0,L0};
    401             1                         38                 lpifStateStatus = active_;
    402             1                         38                 linkUp = 1'b1;
    403                                                         /* if((MAX_GEN==3'd3 && rateId[5:1] == 5'b00111)&&(GEN<3'd3)&&(!DEVICETYPE || (DEVICETYPE && finishRx &&gotoRx== recoveryRcvrLock)))
    404                                                          begin
    405                                                              directed_speed_change = 1'b1;
    406                                                              trainToGen = 3'd3;
    407                                                              {substateTxnext,substateRxnext}= {recoveryRcvrLock,recoveryRcvrLock};
    408                                                              
    409                                                          end
    410                                                          else if((MAX_GEN==3'd2 && rateId[5:1] == 5'b00011)&&(GEN<3'd2)&&(!DEVICETYPE || (DEVICETYPE && finishRx &&gotoRx== recoveryRcvrLock)))
    411                                                          begin
    412                                                              directed_speed_change = 1'b1;
    413                                                              trainToGen = 3'd2;
    414                                                              {substateTxnext,substateRxnext}= {recoveryRcvrLock,recoveryRcvrLock};
    415                                                          end             
    416                                              
    417                                                          else if((MAX_GEN==3'd4 && rateId[5:1] == 5'b01111)&&(GEN<3'd4)&&(!DEVICETYPE || (DEVICETYPE && finishRx &&gotoRx== recoveryRcvrLock)))
    418                                                          begin
    419                                                              directed_speed_change = 1'b1;
    420                                                              trainToGen = 3'd4;
    421                                                              {substateTxnext,substateRxnext}= {recoveryRcvrLock,recoveryRcvrLock};
    422                                                          end   
    423                                              
    424                                                          else*/if((MAX_GEN==3'd5 && rateId[5:1] == 5'b11111)&&(GEN<3'd5)&&(!DEVICETYPE || (DEVICETYPE && finishRx &&gotoRx== recoveryRcvrLock)))
    425                                                          begin
    426             1                         12                     directed_speed_change = 1'b1;
    427             1                         12                     trainToGen = 3'd5;
    428             1                         12                     {substateTxnext,substateRxnext}= {recoveryRcvrLock,recoveryRcvrLock};
    429                                                          end
    430                                                              
    431                                                                     
    432                                                      end
    433                                                      retrain_:
    434                                                      begin
    435             1                        930                lpifStateStatus = retrain_;
    436             1                        930                linkUp = 1'b1;
    437                                                         case({substateRx,substateTx})
    438                                                              {recoveryRcvrLock,recoveryRcvrLock}:
    439                                                              begin
    440                                                                  
    441                                              
    442                                                                  if(finishRx && gotoRx == recoveryRcvrCfg )
    443             1                         14                             {substateTxnext,substateRxnext}= {recoveryRcvrCfg,recoveryRcvrCfg};
    444                                              
    445                                              
    446                                                                  if((finishTx&&gotoTx==detectQuiet)&&(finishRx&&gotoRx==detectQuiet))
    447                                                                      begin
    448             1                          2                                 after_L0=1;
    449             1                          2                                 {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    450             1                          2                                 lpifStateStatus = reset_;
    451                                                                      end
    452                                              
    453                                              
    454                                                              end
    455                                                              {recoveryRcvrCfg,recoveryRcvrCfg}:
    456                                                              begin
    457             1                         75                         after_L0=1;
    458                                                                  if((finishRx && gotoRx == recoverySpeed) && (finishTx && gotoTx == recoverySpeed) )
    459             1                          8                             {substateTxnext,substateRxnext}= {recoverySpeed,recoverySpeed};
    460                                              
    461                                                                  else if((finishRx && gotoRx == recoveryIdle) && (finishTx && gotoTx == recoveryIdle))
    462             1                          4                             {substateTxnext,substateRxnext}= {recoveryIdle,recoveryIdle};
    463                                              
    464                                              
    465                                                                  //******marwan***************//
    466                                                                  if(/*(finishTx&&gotoTx==detectQuiet)||*/(finishRx&&gotoRx==detectQuiet))
    467                                                                      begin
    468             1                          2                                 {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    469             1                          2                                 lpifStateStatus = reset_;
    470                                                                      end
    471                                                                  //******marwan***************//
    472                                              
    473                                              
    474                                              
    475                                                              end
    476                                                              {recoverySpeed,recoverySpeed}:
    477                                                              begin
    478                                                                  if((finishRx&&gotoRx==recoverywait))
    479                                                                  begin
    480             1                          8                             {substateTxnext,substateRxnext}= {recoverywait,recoverywait};
    481             1                          8                             directed_speed_change = 1'b0;
    482                                                                  end
    483                                                                  //******marwan***************//
    484                                                                  if(finishRx&&gotoRx==detectQuiet)
    485                                                                      begin
    486             1                          2                                 {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    487             1                          2                                 lpifStateStatus = reset_;
    488                                                                      end
    489                                                                  //******marwan***************//                       
    490                                              
    491                                                              end
    492                                                              {recoverywait,recoverywait}:
    493                                                              begin
    494                                                                  if((finishTx&&gotoTx==recoverySpeedeieos))
    495                                                                  begin
    496             1                          8                             {substateTxnext,substateRxnext}= {recoverySpeedeieos,recoverySpeedeieos};
    497             1                          8                             GEN = trainToGen;
    498             1                          8                             directed_speed_change = 1'b0;
    499                                                                  end
    500                                                                  
    501                                                                  //******marwan***************/
    502                                                                  /*
    503                                                                  if((finishTx&&gotoTx==detectQuiet)||(finishRx&&gotoRx==detectQuiet))
    504                                                                      begin
    505                                                                          {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    506                                                                          lpifStateStatus = reset_;
    507                                                                      end*/
    508                                                                  //******marwan***************// 
    509                                                                               
    510                                              
    511                                                              end
    512                                              
    513                                                              {recoverySpeedeieos,recoverySpeedeieos}:
    514                                                              begin
    515                                                                  if(finishRx&&gotoRx==phase0)
    516                                                                  begin
    517             1                          8                             {substateTxnext,substateRxnext}= {phase0,phase0};
    518                                                                  end
    519                                                                  /*else if(finishRx&&gotoRx==recoveryRcvrLock)
    520                                                                  begin
    521                                                                      {substateTxnext,substateRxnext}= {recoveryRcvrLock,recoveryRcvrLock};
    522                                                                  end*/
    523                                              
    524                                                                  //******marwan***************//
    525                                                                 /* if((finishTx&&gotoTx==detectQuiet)||(finishRx&&gotoRx==detectQuiet))
    526                                                                      begin
    527                                                                          {substateTxnext,substateRxnext}= {detectQuiet,detectQuiet};
    528                                                                          lpifStateStatus = reset_;
    529                                                                      end*/
    530                                                                  //******marwan***************//                          
    531                                              
    532                                                              end
    533                                                              {phase0,phase0}:
    534                                                              begin
    535                                                                  //disableScrambler = 1'b0;
    536                                                                  //mapping tx preset to coeff.
    537             1                         24                         GetLocalPresetCoeffcients={16{1'b1}};
    538             1                         24     				    for(i=0;i<16;i=i+1)
    538             2                        384     
    539                                                                  begin
    540                                                                      if(DEVICETYPE)
    541             1                        192     					        LocalPresetIndex[(4*16-4)-i*4+:4]=TransmitterPresetHintUSP[4*i+:4];
    542                                                                      else
    543             1                        192                                 LocalPresetIndex[(4*16-4)-i*4+:4]=TransmitterPresetHintDSP[4*i+:4];
    544                                              				    end
    545                                              
    546                                                                  if(LocalTxCoefficientsValid=={16{1'b1}})
    547                                                                  begin
    548             1                         22                             for(i=0;i<16;i=i+1)
    548             2                        352     
    549                                                                      begin
    550             1                        352                                 PreCursorCoff[6*i+:6] =LocalTxPresetCoefficients[(18*16-18)-18*i+:6];//[23:18][5:0]       [35:0][17:0]
    551             1                        352                                 CursorCoff[6*i+:6]    =LocalTxPresetCoefficients[(18*16-18)-18*i+6+:6];//[29:24][11:6]
    552             1                        352                                 PostCursorCoff[6*i+:6]=LocalTxPresetCoefficients[(18*16-18)-18*i+12+:6];//[35:30][17:12]
    553             1                        352                                 LF_register[6*i+:6] = LocalLF[(6*LANESNUMBER-6)-6*i+:6];
    554             1                        352                                 FS_register[6*i+:6] = LocalFS[(6*LANESNUMBER-6)-6*i+:6];
    555                                              					    end
    556             1                         22                             TxDeemph =  LocalTxPresetCoefficients; //use received coeff.
    557                                                                  end
    558                                              
    559                                                                  if(finishRx && gotoRx == phase1)
    560             1                          4                              {substateTxnext,substateRxnext}= {phase1,phase1};
    561                                                                  //********marwan***************//
    562                                                                  if(finishRx&&gotoRx==recoverySpeed)
    563                                                                      begin
    564             1                          2                                 {substateTxnext,substateRxnext}= {recoverySpeed,recoverySpeed};
    565             1                          2                                 lpifStateStatus = retrain_;
    566                                                                      end
    567                                                                  //********marwan***************// 
    568                                                              end
    569                                                              {phase1,phase1}:
    570                                                              begin
    571                                                                  //disableScrambler = 1'b0;
    572             1                         12                         LF = LocalLF;
    573             1                         12                         FS = LocalFS;
    574                                                                  if(finishRx && gotoRx == recoveryRcvrLock)   //Youssef
    575             1                          4                              {substateTxnext,substateRxnext}= {recoveryRcvrLock,recoveryRcvrLock};
    576                                                                  //********marwan***************// 
    577                                                                 /* if(finishRx&&gotoRx==recoverySpeed)
    578                                                                      begin
    579                                                                          {substateTxnext,substateRxnext}= {recoverySpeed,recoverySpeed};
    580                                                                          lpifStateStatus = retrain_;
    581                                                                      end*/
    582                                                                  //********marwan***************// 
    583                                                              end
    584                                              
    585                                                              {recoveryIdle,recoveryIdle}:
    586                                                              begin
    587                                                                  //disableScrambler = 1'b0;
    588                                                                  if((finishRx && gotoRx == L0) && (finishTx && gotoTx == L0))
    589             1                          3                              {substateTxnext,substateRxnext}= {L0,L0};
    590                                                              end
    591                                                         endcase
    592                                              
    593                                                      end 
    594                                                      default:
    595             1                    ***0***                 nextState = reset_;
    596                                                     endcase 
    597                                                      
    598                                                  end
    599                                              
    600             1                         37     always @ (posedge clk)
    601                                              begin
    602                                                  if(~reset) 
    603                                                  begin 
    604             1                          8             PCLKRate <= 0; 
    605                                                  end
    606                                                  else begin
    607                                                  if (GEN == 1)begin
    608                                                      case(GEN1_PIPEWIDTH)
    609                                                          8:PCLKRate<=2; //250
    610                                                          16:PCLKRate<=1; //125
    611             1                         16                 32:PCLKRate<=0; //62.5
    612                                                      endcase
    613                                                  end
    614                                                 /* else if (GEN == 2)
    615                                                  begin
    616                                                      case(GEN2_PIPEWIDTH)
    617                                                          8:PCLKRate<=3; //500
    618                                                          16:PCLKRate<=2; //250
    619                                                          32:PCLKRate<=1; //125
    620                                                  endcase
    621                                                  end*/
    622                                                  else if (GEN == 5)begin
    623                                                      case(GEN5_PIPEWIDTH)
    624                                                          8:PCLKRate<=6; //4000
    625                                                          16:PCLKRate<=5; //2000
    626             1                         12                 32:PCLKRate<=4; //1000
    627                                                      endcase
    628                                                  end
    629                                                  end
    630                                              end
    631                                              
    632                                              
    633                                              
    634             1                         46         assign{numberOfDetectedLanesOut,linkNumberOutTx,linkNumberOutRx,rateIdOut,upConfigureCapabilityOut} = {numberOfDetectedLanes,linkNumber
    635                                                  ,linkNumber,rateId,upConfigureCapability};
    636                                                  
    637                                              endmodule


=================================================================================
=== File: RTL/osDecoder.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           48        48         0     100.0

================================Statement Details================================

Statement Coverage for file RTL/osDecoder.v --

    1                                                
    2                                                module osDecoder #(
    3                                                parameter Width = 32,
    4                                                parameter GEN1_PIPEWIDTH = 64 ,	
    5                                                parameter GEN2_PIPEWIDTH = 8 ,	
    6                                                parameter GEN3_PIPEWIDTH = 8 ,	
    7                                                parameter GEN4_PIPEWIDTH = 8 ,	
    8                                                parameter GEN5_PIPEWIDTH = 8 )
    9                                                (
    10                                               input clk,
    11                                               input [2:0]gen,
    12                                               input reset,
    13                                               input [4:0]numberOfDetectedLanes,
    14                                               input [511:0]data,
    15                                               input validFromLMC,	
    16                                               input linkUp,
    17                                               input [4:0] substate,
    18                                               input [2*16-1:0] syncHeader,
    19                                               output reg valid,
    20                                               output reg [2047:0]outOs);
    21                                               
    22                                               reg [9:0]width;
    23                                               reg [2047:0]orderedSets,orderedSetsnext,out;
    24                                               reg [2:0]numberOfShifts;
    25                                               reg found;
    26                                               reg validnext;
    27                                               reg [3:0] lane_iter;
    28                                               reg [6:0] index_iter;
    29                                               reg [11:0]capacity,capacitynext;
    30                                               integer i,j;
    31                                               parameter[7:0]
    32                                               COM = 	8'b10111100, //BC
    33                                               gen3TS1 = 8'h1E,
    34                                               gen3TS2 = 8'h2D,
    35                                               gen3SKIP =8'hAA,
    36                                               gen3EIOS = 8'h66,
    37                                               gen3EIEOSsymb1 = 8'h00,
    38                                               gen3EIEOSsymb2 = 8'hFF, 
    39                                               STP = 8'b11111011,
    40                                               SDP = 8'b01011100,
    41                                               SDS = 8'hE1;
    42                                               
    43                                               
    44                                               localparam [4:0]
    45                                               	detectQuiet =  5'd0,
    46                                               	detectActive = 5'd1,
    47                                               	pollingActive= 5'd2,
    48                                               	pollingConfiguration= 5'd3,
    49                                               	configurationLinkWidthStart = 5'd4,
    50                                               	configurationLinkWidthAccept = 5'd5,
    51                                               	configurationLanenumWait = 5'd6,
    52                                               	configurationLanenumAccept = 5'd7,
    53                                               	configurationComplete = 5'd8,
    54                                               	configurationIdle = 5'd9,
    55                                               	L0 = 5'd10,
    56                                               	recoveryRcvrLock = 5'd11,
    57                                               	recoveryRcvrCfg = 5'd12,
    58                                               	recoverySpeed = 5'd13,
    59                                               	phase0 = 5'd14,
    60                                               	phase1 = 5'd15,
    61                                               	phase2 = 5'd16,
    62                                               	phase3 =5'd17,
    63                                               	recoveryIdle = 5'd18,
    64                                               	recoverySpeedeieos = 5'd19,
    65                                               	recoverywait = 5'd20;
    66                                               
    67                                               
    68                                               
    69                                               parameter [175:0] lanesOffsets ={11'd1920,11'd1792,11'd1664,11'd1536,11'd1408,11'd1280,11'd1152
    70                                               ,11'd1024,11'd896,11'd768,11'd640,11'd512,11'd384,11'd256,11'd128,11'd0};
    71              1                     633415     always@(posedge clk or negedge reset)
    72                                               begin
    73                                               if(!reset)
    74                                               begin
    75              1                         18     orderedSets <=2048'b0;
    76              1                         18     capacity<=12'd0;
    77              1                         18     lane_iter <= 4'd0;
    78              1                         18     index_iter <= 7'd0;
    79              1                         18     valid<=1'b0;
    80                                               end
    81                                               else
    82                                               begin
    83              1                     633397     	capacity <= capacitynext;
    84              1                     633397     	orderedSets<=orderedSetsnext;
    85              1                     633397     	valid <= validnext;
    86                                               end
    87                                               end
    88                                               
    89                                               //marwan//
    90              1                     178690     always@(posedge clk )
    91                                               begin
    92                                               	if(  substate==recoverySpeed && gen ==3'd5 )
    93                                               	begin
    94              1                         28     		out<={256{8'h66}};
    95              1                         28     		validnext <= 1'b1;
    96                                               	end
    97                                               
    98                                               end
    99                                               //marwan//
    100                                              
    101             1                     677996     always@(*)
    102                                              begin
    103             1                     677996     validnext=1'b0;
    104             1                     677996     found = 1'b0;
    105                                              if(validFromLMC)
    106                                              begin
    107                                              		if(substate==5'd9 || substate==5'd18)begin
    108             1                      28606     			out ={4{data}};
    109             1                      28606     			valid =1'b1;
    110                                              
    111                                              		end
    112                                              		else
    113                                              		begin
    114                                              
    115                                              
    116                                              			if (substate == recoverySpeedeieos) begin
    117             1                         81     				for(i=0;i<=504;i=i+8)
    117             2                       5184     
    118                                              				begin
    119                                              	
    120                                              				if(substate == recoverySpeedeieos&&syncHeader == {8{4'hA}}&&data[i+:8]==gen3EIEOSsymb1&&!found)
    121                                              				begin
    122             1                         16     				found = 1'b1;
    123                                              				if((substate !=recoverySpeed && capacity+i>= 128<<numberOfShifts)
    124                                              					||(substate==recoverySpeed&&gen<3'd3&&capacity+i >= 32<<numberOfShifts))
    125                                              				begin
    126             1                          8     				validnext = 1'b1;
    127             1                          8     				out = orderedSets|(data)<<capacity;
    128                                              				end
    129             1                         16     				orderedSetsnext = data>>i;
    130             1                         16     				capacitynext = width-i;
    131                                              				end
    132                                              
    133                                              				end
    134                                              				
    135                                              			end
    136                                              			else 
    137                                              			begin
    138             1                     456320     				for(i=504;i>=0;i=i-8)
    138             2                   29204480     
    139                                              				begin	
    140                                              				if((data[i+:8]==COM||data[i+:8]==gen3TS1||data[i+:8]==gen3TS2||data[i+:8]==gen3SKIP||
    141                                              					data[i+:8]==gen3EIOS) && !found)
    142                                              				begin
    143             1                     174590     				found = 1'b1;
    144                                              				if((substate !=recoverySpeed && capacity+i-((numberOfDetectedLanes-1)<<3) >= 128<<numberOfShifts)
    145                                              					||(substate==recoverySpeed&&gen<3'd3&&capacity+i-((numberOfDetectedLanes-1)<<3) >= 32<<numberOfShifts))
    146                                              				begin
    147             1                      55177     					validnext = 1'b1;				
    148             1                      55177     					out = orderedSets|(data)<<capacity;
    149                                              
    150                                              				end
    151             1                     174590     				orderedSetsnext = data>>i-((numberOfDetectedLanes-1)<<3);
    152             1                     174590     				capacitynext = width-i+((numberOfDetectedLanes-1)<<3);
    153                                              				end
    154                                              
    155                                              				end
    156                                              			end
    157                                              			
    158                                              			if(!found)
    159                                              			begin
    160             1                     281795     				orderedSetsnext = orderedSets|((2048'b0|data) << capacity);
    161             1                     281795     				capacitynext = capacity + width;
    162                                              				if((substate==recoverySpeed&&gen<3'd3&&capacity>= (32<<numberOfShifts))
    163                                              				||(substate !=recoverySpeed && capacity>= (128<<numberOfShifts)))
    164                                              				begin
    165                                              
    166             1                      19753     					validnext = 1'b1;
    167             1                      19753     					out = orderedSets;
    168             1                      19753     					capacitynext=12'd0;
    169                                              					
    170                                              				end
    171                                              			end
    172                                              		end
    173                                              end
    174                                              end
    175                                              
    176             1                         24     always@(*)
    177                                              begin
    178                                              case(numberOfDetectedLanes)
    179                                              /*5'd1:numberOfShifts = 3'd0;
    180                                              5'd2:numberOfShifts = 3'd1;
    181                                              5'd4:numberOfShifts = 3'd2;
    182                                              5'd8:numberOfShifts = 3'd3;*/
    183             1                         12     5'd16:numberOfShifts= 3'd4;
    184                                              endcase
    185                                              end
    186                                              
    187                                              
    188             1                         14     always@(*)
    189                                              begin
    190                                              case (gen)
    191             1                          8     3'b001 : width = GEN1_PIPEWIDTH<<(numberOfShifts);
    192                                              /*3'b010 : width = GEN2_PIPEWIDTH<<(numberOfShifts);
    193                                              3'b011 : width = GEN3_PIPEWIDTH<<(numberOfShifts);
    194                                              3'b100 : width = GEN4_PIPEWIDTH<<(numberOfShifts);*/
    195             1                          6     3'b101 : width = GEN5_PIPEWIDTH<<(numberOfShifts);
    196                                              endcase
    197                                              end
    198                                              
    199             1                      52877     always@(out)
    200                                              begin
    201                                              
    202             1                      52877     	for(j = 0;j<128<<numberOfShifts;j=j+8)
    202             2                   13536512     
    203                                              	begin
    204             1                   13536512     	outOs[(lanesOffsets[11*lane_iter +: 11]+index_iter)+:8] = out[j+:8];
    205                                              	if(lane_iter==numberOfDetectedLanes-1)
    206                                              	begin
    207             1                     846032     	lane_iter = 4'd0;
    208             1                     846032     	index_iter = index_iter + 8; 
    209                                              	end
    210             1                   12690480     	else lane_iter = lane_iter + 1'b1;
    211                                              	end
    212                                              	
    213                                              end
    214                                              endmodule
    215                                              
    216                                              
    217                                              
    218                                              
    219                                              
    220                                              
    221                                              
    222                                              



Total Coverage By File (code coverage only, filtered view): 94.2%

